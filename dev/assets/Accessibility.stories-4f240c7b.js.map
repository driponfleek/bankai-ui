{"version":3,"file":"Accessibility.stories-4f240c7b.js","sources":["../../../storybook-lib/src/components/docblocks/color/BaseColorWithVariants.jsx","../../stories/foundation/accessibility/const/guideConst.js","../../stories/foundation/accessibility/utils/guideUtils.js","../../stories/foundation/accessibility/sections/accessible-colors/SectionIntro.jsx","../../stories/foundation/accessibility/components/BaseColorWithVariants.jsx","../../stories/foundation/accessibility/sections/accessible-colors/SectionAccessibleColorsHowToS1.jsx","../../stories/foundation/accessibility/sections/accessible-colors/SectionAccessibleColorsHowToS2.jsx","../../stories/foundation/accessibility/sections/accessible-colors/SectionAccessibleColorsHowToS3.jsx","../../stories/foundation/accessibility/sections/accessible-colors/SectionFinalResult.jsx","../../stories/foundation/accessibility/sections/accessible-colors/SectionAccessibleColorsHowTo.jsx","../../stories/foundation/accessibility/StoryAccessibleColorPalettes.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ColorSwatch from './ColorSwatch';\nimport ColorVariantsList from './ColorVariantsList';\n\n// Constants\nimport { genSBBaseCls } from '../../../utils/storiesConfigUtils';\n\n// Props\n\n// Styles\nimport './styles/base-color-with-variants.scss';\n\nconst BaseColorWithVariants = (props) => {\n    const { contextCls, isFancy, shouldScrollList, base, variants } = props;\n    const baseCls = genSBBaseCls('base-color-with-variants');\n    const modCls = {\n        [`${baseCls}--fancy`]: isFancy,\n        [`${baseCls}--standard`]: !isFancy,\n    };\n\n    return (\n        <div className={cx(baseCls, modCls, contextCls)}>\n            <div className={`${baseCls}__inner`}>\n                <div className={`${baseCls}__base-container`}>\n                    <ColorSwatch {...base} isFancy={isFancy} />\n                </div>\n                <div className={`${baseCls}__variants-container`}>\n                    <ColorVariantsList\n                        variants={variants}\n                        shouldScrollList={shouldScrollList}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nBaseColorWithVariants.defaultProps = {\n    isFancy: false,\n    shouldScrollList: true,\n    variants: [],\n};\n\nBaseColorWithVariants.propTypes = {\n    contextCls: PropTypes.string,\n    isFancy: PropTypes.bool,\n    shouldScrollList: PropTypes.bool,\n    base: PropTypes.shape({\n        color: PropTypes.string,\n        mainContent: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n        metaList: PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n        ),\n        hasAlpha: PropTypes.bool,\n    }).isRequired,\n    variants: PropTypes.arrayOf(\n        PropTypes.shape({\n            mainContent: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.element,\n            ]),\n            metaList: PropTypes.arrayOf(\n                PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n            ),\n            hasAlpha: PropTypes.bool,\n        }),\n    ),\n};\n\nexport default BaseColorWithVariants;\n","import { CONTRAST_RATIO_TEXT } from '@driponfleek/bankai-lib-color-utils/src/const/colorConst';\n\nexport const TEXT_CONTRAST_RATIO = `${CONTRAST_RATIO_TEXT.AA}:1`;\n\n// TODO: Localize\nexport const TEXT_COLOR_NAME = 'Text';\n\nexport const BG_COLOR_NAME = 'Background';\n","import {\n    getSanitizedA11yColorVariants,\n    getLighterDarkerVariants,\n    genColorAndVariantsWithMetadata,\n    getControlVsOptionsA11yEvals,\n    getRecommendedColor,\n} from '@driponfleek/bankai-lib-color-utils';\nimport { SEMANTIC_COLOR_TOKEN_DEFAULTS } from '@driponfleek/bankai-lib-theme-utils';\nimport {\n    getMassagedColorData,\n    getMassagedColorVariantData,\n} from '@driponfleek/bankai-lib-storybook';\n\n// Constants\nimport { BG_COLOR_NAME, TEXT_COLOR_NAME } from '../const/guideConst';\n\nconst { SEMANTIC_COLOR_CANVAS_ALT } = SEMANTIC_COLOR_TOKEN_DEFAULTS;\n\nexport const getColorData = (hex) =>\n    genColorAndVariantsWithMetadata({ hex, step: 5 });\n\nexport const getTextColorAndVariantsData = (textColor) => {\n    return getColorData(textColor);\n};\n\nexport const getBgColorData = (bgColor) => {\n    return getColorData(bgColor)?.baseColor;\n};\n\nexport const getMassagedColorWithContrastRatio = (color, bgColor) => {\n    const { contrast, metaList } = color;\n\n    return {\n        ...color,\n        metaList: [\n            ...metaList,\n            `Contrast Ratio - ${contrast}:1 ${bgColor?.color}`,\n        ],\n    };\n};\n\nexport const getMassagedPreferredColorAndVariants = (colorData) => {\n    const { baseColor, variants } = colorData ?? {};\n\n    return {\n        baseColor: getMassagedColorData(baseColor, baseColor.tokenId),\n        variants: getMassagedColorVariantData(variants, baseColor.tokenId),\n    };\n};\n\nexport const getHowWeGetAccessibleColorsData = (bgColor, textColor) => {\n    // Get Text color and variant seed data\n    const textColorAndVariantsData = getTextColorAndVariantsData(textColor);\n    // Get Bg color seed data\n    const bgColorData = getBgColorData(bgColor);\n    // Prep text color and variants for a11y eval against the bg color\n    const preferredColorOps = [\n        textColorAndVariantsData.baseColor,\n        ...textColorAndVariantsData.variants,\n    ];\n    const {\n        controlColor: evaluatedBgColor,\n        evals: evaluatedPreferredColorOps,\n    } = getControlVsOptionsA11yEvals(bgColorData, preferredColorOps);\n    textColorAndVariantsData.baseColor.evalsAgainstBGColor =\n        evaluatedPreferredColorOps.base;\n    textColorAndVariantsData.variants = textColorAndVariantsData.variants.map(\n        (variant) => {\n            return {\n                ...variant,\n                evalsAgainstBGColor:\n                    evaluatedPreferredColorOps[variant.tokenId],\n            };\n        },\n    );\n    // Prep evaluated colors for use\n    // const evaluatedBgColor = bgVsPreferredA11yEvals.controlColor;\n    const evaluatedTextColor = textColorAndVariantsData.baseColor;\n    // Get the contrast ratio between text and bg colors\n    const contrastRatio = `${evaluatedTextColor.evalsAgainstBGColor.wcagContrast}:1`;\n    // Massage data for use with color swatches\n    const bgColorDataMassaged = getMassagedColorData(\n        evaluatedBgColor,\n        BG_COLOR_NAME,\n    );\n    const textColorAndVariantsMassaged = getMassagedPreferredColorAndVariants(\n        textColorAndVariantsData,\n        TEXT_COLOR_NAME,\n    );\n    const textColorVariantsWithContrast =\n        textColorAndVariantsMassaged.variants.map((variant) =>\n            getMassagedColorWithContrastRatio(variant, bgColorDataMassaged),\n        );\n    const variantsSanitized = getSanitizedA11yColorVariants(\n        textColorAndVariantsData.variants,\n        true,\n    ).map((variant) =>\n        getMassagedColorWithContrastRatio(getMassagedColorData(variant)),\n    );\n    const recommendedColor = getMassagedColorData(\n        getRecommendedColor(\n            evaluatedTextColor,\n            textColorAndVariantsData.variants,\n            true,\n        ),\n    );\n\n    return {\n        bgColorDataMassaged,\n        contrastRatio,\n        textColorAndVariantsMassaged,\n        textColorVariantsWithContrast,\n        variantsSanitized,\n        recommendedColor,\n    };\n};\n\nexport const getStep3Data = (colorData = {}) => {\n    const { preferred = {}, variants = [] } = colorData;\n    const { lighterVariants, darkerVariants } = getLighterDarkerVariants(\n        preferred.lightness,\n        variants,\n    );\n    const hasLighterVariants = lighterVariants.length > 0;\n    const hasDarkerVariants = darkerVariants.length > 0;\n    const lighterVariantsLightnesses = hasLighterVariants\n        ? lighterVariants.map((variant) => variant.lightness).join(', ')\n        : 'none';\n    const darkerVariantsLightnesses = hasDarkerVariants\n        ? darkerVariants.map((variant) => variant.lightness).join(', ')\n        : 'none';\n    const shouldPickFromLighterVariantsB1 =\n        !preferred.isDark && hasLighterVariants;\n    const shouldPickFromLighterVariantsB2 =\n        preferred.isDark && !hasDarkerVariants && hasLighterVariants;\n    const shouldPickFromDarkerVariantsB1 =\n        preferred.isDark && hasDarkerVariants;\n    const shouldPickFromDarkerVariantsB2 =\n        !preferred.isDark && !hasLighterVariants && hasDarkerVariants;\n\n    return {\n        hasLighterVariants,\n        hasDarkerVariants,\n        lighterVariantsLightnesses,\n        darkerVariantsLightnesses,\n        shouldPickFromLighterVariantsB1,\n        shouldPickFromLighterVariantsB2,\n        shouldPickFromDarkerVariantsB1,\n        shouldPickFromDarkerVariantsB2,\n    };\n};\n\nexport const getColors = (isDarkMode) => {\n    return {\n        bgColor: isDarkMode ? '#0c0d0e' : SEMANTIC_COLOR_CANVAS_ALT,\n        textColor: isDarkMode ? '#802a59' : '#b76cdf',\n    };\n};\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport { StorySection } from '@driponfleek/bankai-lib-storybook';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionIntro = () => {\n    return (\n        <StorySection>\n            <Paragraph>\n                When color is essential to the comprehension of our{' '}\n                <abbr title=\"User Interfaces\">UIs</abbr> we should strive for\n                accessible color palettes. {getLocale('designSystemName')}{' '}\n                provides tools and utilities that help us comply with{' '}\n                <Hyperlink\n                    href=\"https://webaim.org/articles/contrast/\"\n                    shouldOpenInNewWindow\n                >\n                    Web Content Accessibility Guidelines AA standard contrast\n                    ratios\n                </Hyperlink>\n                .\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionIntro;\n","import PropTypes from 'prop-types';\nimport { BaseColorWithVariants as SBBaseColorWithVariants } from '@driponfleek/bankai-lib-storybook';\n\nconst BaseColorWithVariants = (props) => {\n    const { colorData, isFancy } = props;\n    const { preferred, variants } = colorData ?? {};\n\n    return (\n        <SBBaseColorWithVariants\n            base={preferred}\n            variants={variants}\n            isFancy={isFancy}\n            shouldScrollList={false}\n        />\n    );\n};\n\nBaseColorWithVariants.defaultProps = {\n    isFancy: true,\n};\n\nBaseColorWithVariants.propTypes = {\n    isFancy: PropTypes.bool,\n    colorData: PropTypes.shape({\n        preferred: PropTypes.object,\n        variants: PropTypes.array,\n    }),\n};\n\nexport default BaseColorWithVariants;\n","import PropTypes from 'prop-types';\nimport {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport BaseColorWithVariants from '../../components/BaseColorWithVariants';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionAccessibleColorsHowToS1 = (props) => {\n    const { preferredColorAndVariants } = props;\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                {getLocale(\n                    'stories.foundation.accessibility.accessibleColorPalettes.sectionTitles.step1',\n                )}\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>To generate text color variants:</Paragraph>\n                <OmniList>\n                    <OmniListItem>\n                        We convert the preferred color hex value to HSL &#40;\n                        <strong>H</strong>ue, <strong>S</strong>aturation,{' '}\n                        <strong>L</strong>ightness&#41;\n                    </OmniListItem>\n                    <OmniListItem>\n                        We then derive variants of the preferred Text color by\n                        modifying its lightness in increments of 5%, starting at\n                        95% all the way down to 5%. &#40;We omit 100% because\n                        that always results in White, and 0% because it always\n                        results in Black&#41;\n                    </OmniListItem>\n                    <OmniListItem>\n                        Finally we remove any duplicates of the preferred Text\n                        color found in the variants.\n                    </OmniListItem>\n                </OmniList>\n                <BaseColorWithVariants colorData={preferredColorAndVariants} />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionAccessibleColorsHowToS1.propTypes = {\n    preferredColorAndVariants: PropTypes.shape({\n        preferred: PropTypes.object,\n        variants: PropTypes.array,\n    }),\n};\n\nexport default SectionAccessibleColorsHowToS1;\n","import PropTypes from 'prop-types';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport BaseColorWithVariants from '../../components/BaseColorWithVariants';\n\n// Const\nimport { TEXT_CONTRAST_RATIO } from '../../const/guideConst';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionAccessibleColorsHowToS2 = (props) => {\n    const { colorData, variantsSanitized } = props;\n    const { preferred } = colorData;\n\n    // console.log('variantsSanitized: ', variantsSanitized);\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                {getLocale(\n                    'stories.foundation.accessibility.accessibleColorPalettes.sectionTitles.step2',\n                )}\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Next we evaulate the contrast ratio of all variants against\n                    the background color&#58;\n                </Paragraph>\n                <BaseColorWithVariants colorData={colorData} />\n                <Paragraph>\n                    Then we reduce the number of variants to a reliable set of\n                    accessible options by removing any that do not meet the{' '}\n                    <strong>{TEXT_CONTRAST_RATIO}</strong> accessibility\n                    requirement&#58;\n                </Paragraph>\n                <BaseColorWithVariants\n                    colorData={{\n                        preferred,\n                        variants: variantsSanitized,\n                    }}\n                />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionAccessibleColorsHowToS2.propTypes = {\n    colorData: PropTypes.shape({\n        preferred: PropTypes.object,\n        variants: PropTypes.array,\n    }),\n    variantsSanitized: PropTypes.array,\n};\n\nexport default SectionAccessibleColorsHowToS2;\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    SectionTitle,\n    ColorSwatch,\n} from '@driponfleek/bankai-lib-storybook';\n\n// Const\nimport { getStep3Data } from '../../utils/guideUtils';\nimport { TEXT_COLOR_NAME } from '../../const/guideConst';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionAccessibleColorsHowToS3 = (props) => {\n    const { baseCls, colorData, bgColor } = props;\n    const { preferred } = colorData ?? {};\n    const preferredClone = {\n        ...preferred,\n        metaList: [\n            ...preferred.metaList,\n            <>\n                Perceived Brightness -{' '}\n                <strong>{preferred.isDark ? 'Dark' : 'Light'}</strong>\n            </>,\n            `Contrast Ratio - ${preferred.contrast}:1 ${bgColor.color}`,\n        ],\n    };\n    const {\n        lighterVariantsLightnesses,\n        darkerVariantsLightnesses,\n        shouldPickFromLighterVariantsB1,\n        shouldPickFromLighterVariantsB2,\n        shouldPickFromDarkerVariantsB1,\n        shouldPickFromDarkerVariantsB2,\n    } = getStep3Data(colorData);\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                {getLocale(\n                    'stories.foundation.accessibility.accessibleColorPalettes.sectionTitles.step3',\n                )}\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Our goal is to get as close to the original preferred Text\n                    color as possible with an accessible altnerative. To do that\n                    we start with determing the original preferred text\n                    color&apos;s{' '}\n                    <Hyperlink\n                        href=\"https://www.w3.org/TR/AERT/#color-contrast\"\n                        shouldOpenInNewWindow\n                    >\n                        perceived brightness\n                    </Hyperlink>\n                    &#58;\n                </Paragraph>\n                <div className={`${baseCls}__bg-and-text-colors-container`}>\n                    <ColorSwatch\n                        mainContent={TEXT_COLOR_NAME}\n                        color={preferredClone.color}\n                        metaList={preferredClone.metaList}\n                        isFancy\n                    />\n                </div>\n                <Paragraph>\n                    We&apos;ll also break up the variants into two groups&#58;\n                </Paragraph>\n                <OmniList>\n                    <OmniListItem>\n                        Variants that are <strong>lighter</strong> than our\n                        original preferred Text color &#40;\n                        <em>{lighterVariantsLightnesses}</em>&#41;\n                    </OmniListItem>\n                    <OmniListItem>\n                        Variants that are <strong>darker</strong> than our\n                        original preferred Text color &#40;\n                        <em>{darkerVariantsLightnesses}</em>&#41;\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={4}>\n                    {getLocale(\n                        'stories.foundation.accessibility.accessibleColorPalettes.sectionTitles.step3WhenToPickFromLighterVariants',\n                    )}\n                </SectionTitle>\n                <StorySection>\n                    <Paragraph>\n                        Whenever we pick from the lighter variant options we\n                        will <strong>always choose the darkest variant</strong>{' '}\n                        available to get as close to the original preferred Text\n                        color as possible. We pick from the ligther variant\n                        options when the following conditions are met&#58;\n                    </Paragraph>\n                    <OmniList>\n                        <OmniListItem>\n                            The original preferred Text color is perceived as\n                            light AND there are lighter variants to choose from\n                            &#40;\n                            <strong\n                                className={cx({\n                                    [`${baseCls}--negative`]:\n                                        !shouldPickFromLighterVariantsB1,\n                                    [`${baseCls}--positive`]:\n                                        shouldPickFromLighterVariantsB1,\n                                })}\n                            >\n                                {`${shouldPickFromLighterVariantsB1}`.toUpperCase()}\n                            </strong>\n                            &#41; <em>OR...</em>\n                        </OmniListItem>\n                        <OmniListItem>\n                            The original preferred Text color is perceived as\n                            dark, there are no darker variants AND there are\n                            only lighter variants to choose from &#40;\n                            <strong\n                                className={cx({\n                                    [`${baseCls}--negative`]:\n                                        !shouldPickFromLighterVariantsB2,\n                                    [`${baseCls}--positive`]:\n                                        shouldPickFromLighterVariantsB2,\n                                })}\n                            >\n                                {`${shouldPickFromLighterVariantsB2}`.toUpperCase()}\n                            </strong>\n                            &#41;\n                        </OmniListItem>\n                    </OmniList>\n                </StorySection>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={4}>\n                    {getLocale(\n                        'stories.foundation.accessibility.accessibleColorPalettes.sectionTitles.step3WhenToPickFromDarkerVariants',\n                    )}\n                </SectionTitle>\n                <StorySection>\n                    <Paragraph>\n                        Whenever we pick from the darker variant options we will{' '}\n                        <strong>always choose the lightest variant</strong>{' '}\n                        available to get as close to the original preferred Text\n                        color as possible. We pick from the darker variant\n                        options when the following conditions are met&#58;\n                    </Paragraph>\n                    <OmniList>\n                        <OmniListItem>\n                            The original preferred Text color is perceived as\n                            dark AND there are darker variants to choose from\n                            &#40;\n                            <strong\n                                className={cx({\n                                    [`${baseCls}--negative`]:\n                                        !shouldPickFromDarkerVariantsB1,\n                                    [`${baseCls}--positive`]:\n                                        shouldPickFromDarkerVariantsB1,\n                                })}\n                            >\n                                {`${shouldPickFromDarkerVariantsB1}`.toUpperCase()}\n                            </strong>\n                            &#41; <em>OR...</em>\n                        </OmniListItem>\n                        <OmniListItem>\n                            The original preferred Text color is perceived as\n                            light, there are no lighter variants AND there are\n                            only darker variants to choose from &#40;\n                            <strong\n                                className={cx({\n                                    [`${baseCls}--negative`]:\n                                        !shouldPickFromDarkerVariantsB2,\n                                    [`${baseCls}--positive`]:\n                                        shouldPickFromDarkerVariantsB2,\n                                })}\n                            >\n                                {`${shouldPickFromDarkerVariantsB2}`.toUpperCase()}\n                            </strong>\n                            &#41;\n                        </OmniListItem>\n                    </OmniList>\n                </StorySection>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionAccessibleColorsHowToS3.propTypes = {\n    baseCls: PropTypes.string,\n    bgColor: PropTypes.object,\n    colorData: PropTypes.shape({\n        preferred: PropTypes.object,\n        variants: PropTypes.array,\n    }),\n};\n\nexport default SectionAccessibleColorsHowToS3;\n","import PropTypes from 'prop-types';\nimport {\n    StorySection,\n    SectionTitle,\n    ColorSwatch,\n} from '@driponfleek/bankai-lib-storybook';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionFinalResult = (props) => {\n    const { baseCls, bgColor, recommendedColor } = props;\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                {getLocale(\n                    'stories.foundation.accessibility.accessibleColorPalettes.sectionTitles.finalResult',\n                )}\n            </SectionTitle>\n            <StorySection>\n                <div className={`${baseCls}__bg-and-text-colors-container`}>\n                    <ColorSwatch\n                        mainContent={recommendedColor.mainContent}\n                        color={recommendedColor.color}\n                        metaList={recommendedColor.metaList}\n                        isFancy\n                    />\n                    <ColorSwatch\n                        mainContent={bgColor.mainContent}\n                        color={bgColor.color}\n                        metaList={bgColor.metaList}\n                        isFancy\n                    />\n                </div>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionFinalResult.propTypes = {\n    baseCls: PropTypes.string,\n    bgColor: PropTypes.object,\n    recommendedColor: PropTypes.object,\n};\n\nexport default SectionFinalResult;\n","import PropTypes from 'prop-types';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    SectionTitle,\n    ColorSwatch,\n} from '@driponfleek/bankai-lib-storybook';\nimport SectionStep1 from './SectionAccessibleColorsHowToS1';\nimport SectionStep2 from './SectionAccessibleColorsHowToS2';\nimport SectionStep3 from './SectionAccessibleColorsHowToS3';\n\n// Const\nimport SectionFinalResult from './SectionFinalResult';\nimport { getHowWeGetAccessibleColorsData } from '../../utils/guideUtils';\nimport {\n    TEXT_COLOR_NAME,\n    BG_COLOR_NAME,\n    TEXT_CONTRAST_RATIO,\n} from '../../const/guideConst';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionAccessibleColorsHowTo = (props) => {\n    const { baseCls, bgColor, textColor } = props;\n    const {\n        bgColorDataMassaged,\n        contrastRatio,\n        textColorAndVariantsMassaged,\n        textColorVariantsWithContrast,\n        variantsSanitized,\n        recommendedColor,\n    } = getHowWeGetAccessibleColorsData(bgColor, textColor);\n\n    return (\n        <StorySection>\n            <SectionTitle>\n                {getLocale(\n                    'stories.foundation.accessibility.accessibleColorPalettes.sectionTitles.howWeGetAccessibleColors',\n                )}\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Let&apos;s say we want to use the following Text and\n                    Background colors:\n                </Paragraph>\n                <div className={`${baseCls}__bg-and-text-colors-container`}>\n                    <ColorSwatch\n                        mainContent={TEXT_COLOR_NAME}\n                        color={textColor}\n                        metaList={[textColor]}\n                        isFancy\n                    />\n                    <ColorSwatch\n                        mainContent={BG_COLOR_NAME}\n                        color={bgColor}\n                        metaList={[bgColor]}\n                        isFancy\n                    />\n                </div>\n                <Paragraph>\n                    The text and background color must have a{' '}\n                    <strong>{TEXT_CONTRAST_RATIO}</strong> contrast ratio to\n                    pass WCAG AA compliance. When we test the Text color against\n                    the Background color we get:\n                </Paragraph>\n                <Paragraph contextCls={`${baseCls}__eval-result`}>\n                    Contrast Ratio:{' '}\n                    <strong className={`${baseCls}--negative`}>\n                        {contrastRatio}\n                    </strong>\n                </Paragraph>\n                <Paragraph>\n                    Since this fails the minimum requirement we&apos;ll create\n                    variants of the Text color to give us more options to pick\n                    from.\n                </Paragraph>\n            </StorySection>\n            <SectionStep1\n                preferredColorAndVariants={textColorAndVariantsMassaged}\n            />\n            <SectionStep2\n                colorData={{\n                    preferred: bgColorDataMassaged,\n                    variants: textColorVariantsWithContrast,\n                }}\n                variantsSanitized={variantsSanitized}\n            />\n            <SectionStep3\n                baseCls={baseCls}\n                bgColor={bgColorDataMassaged}\n                colorData={{\n                    preferred: textColorAndVariantsMassaged.baseColor,\n                    variants: variantsSanitized,\n                }}\n            />\n            <SectionFinalResult\n                baseCls={baseCls}\n                bgColor={bgColorDataMassaged}\n                preferredColor={textColorAndVariantsMassaged.baseColor}\n                recommendedColor={recommendedColor}\n            />\n        </StorySection>\n    );\n};\n\nSectionAccessibleColorsHowTo.propTypes = {\n    baseCls: PropTypes.string,\n    bgColor: PropTypes.string,\n    textColor: PropTypes.string,\n};\n\nexport default SectionAccessibleColorsHowTo;\n","import { useState } from 'react';\nimport { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport { getColors } from './utils/guideUtils';\nimport SectionIntro from './sections/accessible-colors/SectionIntro';\nimport SectionAccessibleColorsHowTo from './sections/accessible-colors/SectionAccessibleColorsHowTo';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\nimport {\n    getFoundationTitle,\n    getIsDarkMode,\n} from '../../../utils/storiesConfigUtils';\n\n// Styles\nimport './styles/guide-accessible-color-palettes.scss';\n\n// TODO: Need to rewrite this story since how we do everything related to colors has changed.\nconst StoryAccessibleColorPalettes = () => {\n    const [isDarkMode, setIsDarkMode] = useState(getIsDarkMode());\n    const handleColorSchemeChange = (isNewModeDark) => {\n        if (isNewModeDark !== isDarkMode) {\n            setIsDarkMode(isNewModeDark);\n        }\n    };\n    const { bgColor, textColor } = getColors(isDarkMode);\n    const baseCls = genSBBaseCls('foundation-accessible-color-palettes');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale(\n                'stories.foundation.accessibility.accessibleColorPalettes.title',\n            )}\n            subTitle={getFoundationTitle(getLocale('titles.accessibility'))}\n            onColorSchemeChange={handleColorSchemeChange}\n        >\n            <SectionIntro />\n            <SectionAccessibleColorsHowTo\n                baseCls={baseCls}\n                textColor={textColor}\n                bgColor={bgColor}\n            />\n        </StoryLayout>\n    );\n};\n\nexport default StoryAccessibleColorPalettes;\n"],"names":["BaseColorWithVariants","props","contextCls","isFancy","shouldScrollList","base","variants","baseCls","genSBBaseCls","modCls","jsx","cx","jsxs","ColorSwatch","ColorVariantsList","PropTypes","SBBaseColorWithVariants","TEXT_CONTRAST_RATIO","CONTRAST_RATIO_TEXT","TEXT_COLOR_NAME","BG_COLOR_NAME","SEMANTIC_COLOR_CANVAS_ALT","SEMANTIC_COLOR_TOKEN_DEFAULTS","getColorData","hex","genColorAndVariantsWithMetadata","getTextColorAndVariantsData","textColor","getBgColorData","bgColor","_a","getMassagedColorWithContrastRatio","color","contrast","metaList","getMassagedPreferredColorAndVariants","colorData","baseColor","getMassagedColorData","getMassagedColorVariantData","getHowWeGetAccessibleColorsData","textColorAndVariantsData","bgColorData","preferredColorOps","evaluatedBgColor","evaluatedPreferredColorOps","getControlVsOptionsA11yEvals","variant","evaluatedTextColor","contrastRatio","bgColorDataMassaged","textColorAndVariantsMassaged","textColorVariantsWithContrast","variantsSanitized","getSanitizedA11yColorVariants","recommendedColor","getRecommendedColor","getStep3Data","preferred","lighterVariants","darkerVariants","getLighterDarkerVariants","hasLighterVariants","hasDarkerVariants","lighterVariantsLightnesses","darkerVariantsLightnesses","shouldPickFromLighterVariantsB1","shouldPickFromLighterVariantsB2","shouldPickFromDarkerVariantsB1","shouldPickFromDarkerVariantsB2","getColors","isDarkMode","SectionIntro","StorySection","Paragraph","getLocale","Hyperlink","SectionAccessibleColorsHowToS1","preferredColorAndVariants","SectionTitle","OmniList","OmniListItem","SectionAccessibleColorsHowToS2","SectionAccessibleColorsHowToS3","preferredClone","Fragment","SectionFinalResult","SectionAccessibleColorsHowTo","SectionStep1","SectionStep2","SectionStep3","StoryAccessibleColorPalettes","setIsDarkMode","useState","getIsDarkMode","handleColorSchemeChange","isNewModeDark","StoryLayout","getFoundationTitle"],"mappings":"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"}