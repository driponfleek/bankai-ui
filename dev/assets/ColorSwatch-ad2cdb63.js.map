{"version":3,"file":"ColorSwatch-ad2cdb63.js","sources":["../../../storybook-lib/src/components/docblocks/color/utils/contrastMetaUtils.js","../../../storybook-lib/src/components/docblocks/color/ContrastRatioMeta.jsx","../../../storybook-lib/src/components/docblocks/color/ColorSwatchMetaLI.jsx","../../../storybook-lib/src/components/docblocks/color/ColorSwatchMetaList.jsx","../../../storybook-lib/src/components/docblocks/color/ColorSwatchDetails.jsx","../../../storybook-lib/src/components/docblocks/color/ColorSwatch.jsx"],"sourcesContent":["export const getIsContrastRatioMeta = (item) => {\n    if (!item || typeof item !== 'string') {\n        return false;\n    }\n\n    return item.includes('Contrast Ratio');\n};\n\nexport const getAbstractedContrastMeta = (item) => {\n    const isContrastRatioMeta = getIsContrastRatioMeta(item);\n    const contrastRatioRegex = /Contrast Ratio - (\\d+(\\.\\d+)?:1)/;\n    const hexColorRegex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})\\b/;\n\n    if (!isContrastRatioMeta) {\n        return {};\n    }\n\n    return {\n        bgColor: item.match(hexColorRegex)?.[0],\n        contrastRatio: item.match(contrastRatioRegex)?.[1],\n    };\n};\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n    getIsContrastRatioMeta,\n    getAbstractedContrastMeta,\n} from './utils/contrastMetaUtils';\n\n// Constants\nimport { COLOR_BASE_CLS } from './const/colorBaseClsConst';\n\n// Styles\nimport './styles/contrast-ratio-meta.scss';\n\nconst ContrastRatioMeta = (props) => {\n    const { contextCls, item } = props;\n    const baseCls = `${COLOR_BASE_CLS}__contrast-ratio-meta`;\n    const isContrastRatioMeta = getIsContrastRatioMeta(item);\n\n    if (!isContrastRatioMeta) {\n        return item;\n    }\n\n    const { bgColor, contrastRatio } = getAbstractedContrastMeta(item);\n\n    return (\n        <span className={cx(baseCls, contextCls)}>\n            <span className={`${baseCls}-value`}>{contrastRatio}</span>{' '}\n            <span\n                className={`${baseCls}-color`}\n                style={{ backgroundColor: bgColor }}\n            />\n        </span>\n    );\n};\n\nContrastRatioMeta.propTypes = {\n    contextCls: PropTypes.string,\n    item: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n};\n\nexport default ContrastRatioMeta;\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ContrastRatioMeta from './ContrastRatioMeta';\n\n// Utils\nimport { getIsContrastRatioMeta } from './utils/contrastMetaUtils';\n\n// Constants\nimport { COLOR_BASE_CLS } from './const/colorBaseClsConst';\n\n// Styles\n// import './styles/color-swatch-meta-li.scss';\n\nconst ColorSwatchMetaLI = (props) => {\n    const baseCls = `${COLOR_BASE_CLS}__meta-list-item`;\n    const { item } = props;\n    const isContrastRatio = getIsContrastRatioMeta(item);\n    const modCls = {\n        [`${baseCls}--contrast-ratio`]: isContrastRatio,\n    };\n\n    return (\n        <li className={cx(baseCls, modCls)}>\n            <ContrastRatioMeta item={item} />\n        </li>\n    );\n};\n\nColorSwatchMetaLI.propTypes = {\n    item: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n};\n\nexport default ColorSwatchMetaLI;\n","import { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ColorSwatchMetaLI from './ColorSwatchMetaLI';\n\n// Constants\nimport { COLOR_BASE_CLS } from './const/colorBaseClsConst';\n\n// Styles\nimport './styles/color-swatch-meta-list.scss';\n\nconst ColorSwatchMetaList = (props) => {\n    const { contextCls, metaList } = props;\n    const baseCls = `${COLOR_BASE_CLS}__meta-list`;\n    const childItems = Children.toArray(\n        metaList.map((item) => <ColorSwatchMetaLI item={item} />),\n    );\n\n    return <ul className={cx(baseCls, contextCls)}>{childItems}</ul>;\n};\n\nColorSwatchMetaList.defaultProps = {\n    metaList: [],\n};\n\nColorSwatchMetaList.propTypes = {\n    contextCls: PropTypes.string,\n    metaList: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    ),\n};\n\nexport default ColorSwatchMetaList;\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport ColorSwatchMetaList from './ColorSwatchMetaList';\n\n// Constants\nimport { COLOR_BASE_CLS } from './const/colorBaseClsConst';\n\n// Styles\nimport './styles/color-swatch-details.scss';\n\nconst ColorSwatchDetails = (props) => {\n    const { contextCls, mainContent, metaList } = props;\n    const baseCls = `${COLOR_BASE_CLS}__details`;\n    const hasMeta = metaList.length > 0;\n\n    return (\n        <div className={cx(baseCls, contextCls)}>\n            {mainContent && (\n                <Paragraph contextCls={`${baseCls}-main`}>\n                    {mainContent}\n                </Paragraph>\n            )}\n            {hasMeta && <ColorSwatchMetaList metaList={metaList} />}\n        </div>\n    );\n};\n\nColorSwatchDetails.defaultProps = {\n    metaList: [],\n};\n\nColorSwatchDetails.propTypes = {\n    contextCls: PropTypes.string,\n    mainContent: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    metaList: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    ),\n};\n\nexport default ColorSwatchDetails;\n","import { useMemo } from 'react';\nimport cx from 'classnames';\nimport {\n    getSanitizedHex,\n    getNewColorByLightnessAdjustment,\n} from '@driponfleek/bankai-lib-color-utils';\nimport {\n    getPrioritizedAppTextColor,\n    CORE_COLOR_NEUTRAL_SEED_DEFAULT,\n} from '@driponfleek/bankai-lib-theme-utils';\nimport ColorSwatchDetails from './ColorSwatchDetails';\nimport ColorSwatchMetaList from './ColorSwatchMetaList';\n\n// Utils\nimport { getIsContrastRatioMeta } from './utils/contrastMetaUtils';\n\n// Constants\nimport { COLOR_BASE_CLS } from './const/colorBaseClsConst';\n\n// Styles\nimport './styles/color-swatch.scss';\n\nconst ColorSwatch = (props) => {\n    const {\n        contextCls,\n        color,\n        hasAlpha = false,\n        isCard = false,\n        mainContent,\n        metaList = [],\n        children,\n    } = props;\n    const hasNoColor = !color;\n    const sanitizedHex = getSanitizedHex(color, hasAlpha);\n    // TODO: Move this to utility file\n    const preferredDarkTextColor = useMemo(\n        () =>\n            getNewColorByLightnessAdjustment(\n                CORE_COLOR_NEUTRAL_SEED_DEFAULT,\n                10,\n            ),\n        [],\n    );\n    const preferredLightTextColor = useMemo(\n        () =>\n            getNewColorByLightnessAdjustment(\n                CORE_COLOR_NEUTRAL_SEED_DEFAULT,\n                90,\n            ),\n        [],\n    );\n    const textColor = getPrioritizedAppTextColor({\n        baseHex: sanitizedHex,\n        preferredDarkTextColor,\n        preferredLightTextColor,\n    });\n    // TODO: Move this to utility file\n    const modCls = useMemo(\n        () => ({\n            [`${COLOR_BASE_CLS}--swatch-card`]: isCard,\n            [`${COLOR_BASE_CLS}--swatch-block`]: !isCard,\n            [`${COLOR_BASE_CLS}--no-color`]: hasNoColor,\n        }),\n        [isCard, hasNoColor],\n    );\n\n    const swatchStyle = {\n        color: textColor,\n        ...(!hasNoColor && { backgroundColor: sanitizedHex }),\n    };\n    const textStyle = {\n        ...(!isCard && { color: textColor }),\n    };\n    const { contrastMeta, sanitizedMeta } = useMemo(\n        () =>\n            metaList.reduce(\n                // TODO: Move this to utility file\n                (acc, meta) => {\n                    const accClone = { ...acc };\n                    const isContrastRatioMeta = getIsContrastRatioMeta(meta);\n\n                    // TODO: Need to account for APCA threshold pass/fail scenarios\n                    if (isContrastRatioMeta) {\n                        accClone.contrastMeta.push(meta);\n                    }\n\n                    if (!isContrastRatioMeta) {\n                        accClone.sanitizedMeta.push(meta);\n                    }\n\n                    return accClone;\n                },\n                {\n                    contrastMeta: [],\n                    sanitizedMeta: [],\n                },\n            ),\n        [metaList],\n    );\n\n    return (\n        <div className={cx(COLOR_BASE_CLS, modCls, contextCls)}>\n            <div\n                className={`${COLOR_BASE_CLS}__swatch-color`}\n                style={swatchStyle}\n            >\n                {isCard && contrastMeta.length > 0 && (\n                    <ColorSwatchMetaList metaList={contrastMeta} />\n                )}\n            </div>\n            <div className={`${COLOR_BASE_CLS}__inner`} style={textStyle}>\n                {!children && (\n                    <>\n                        <ColorSwatchDetails\n                            mainContent={mainContent || sanitizedHex}\n                            metaList={sanitizedMeta}\n                        />\n                        {!isCard && contrastMeta.length > 0 && (\n                            <ColorSwatchMetaList metaList={contrastMeta} />\n                        )}\n                    </>\n                )}\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default ColorSwatch;\n"],"names":["getIsContrastRatioMeta","item","getAbstractedContrastMeta","isContrastRatioMeta","contrastRatioRegex","hexColorRegex","_a","_b","ContrastRatioMeta","props","contextCls","baseCls","COLOR_BASE_CLS","bgColor","contrastRatio","cx","jsx","PropTypes","ContrastRatioMeta$1","ColorSwatchMetaLI","isContrastRatio","modCls","ColorSwatchMetaLI$1","ColorSwatchMetaList","metaList","childItems","Children","ColorSwatchMetaList$1","ColorSwatchDetails","mainContent","hasMeta","Paragraph","ColorSwatchDetails$1","ColorSwatch","color","hasAlpha","isCard","children","hasNoColor","sanitizedHex","getSanitizedHex","preferredDarkTextColor","useMemo","getNewColorByLightnessAdjustment","CORE_COLOR_NEUTRAL_SEED_DEFAULT","preferredLightTextColor","textColor","getPrioritizedAppTextColor","swatchStyle","textStyle","contrastMeta","sanitizedMeta","acc","meta","accClone","jsxs","Fragment","ColorSwatch$1"],"mappings":"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"}