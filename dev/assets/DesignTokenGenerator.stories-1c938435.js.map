{"version":3,"file":"DesignTokenGenerator.stories-1c938435.js","sources":["../../../storybook-lib/src/components/layout/StickySection.jsx","../../stories/everyone/tokens/utils/designTokenGenStoryUtils.js","../../stories/everyone/tokens/components/design-token-gen/CompPreviewWithOps.jsx","../../stories/everyone/tokens/components/design-token-gen/AvatarCompOps.jsx","../../stories/everyone/tokens/components/design-token-gen/AvatarCompPreview.jsx","../../stories/everyone/tokens/const/designTokenGenConst.js","../../stories/everyone/tokens/components/design-token-gen/DesignTokenColorPicker.jsx","../../stories/everyone/tokens/sections/design-token-generator/SectionForm.jsx","../../stories/everyone/tokens/sections/design-token-generator/SectionTokens.jsx","../../stories/everyone/tokens/sections/design-token-generator/SectionButtonTokens.jsx","../../stories/everyone/tokens/StoryDesignTokenGen.jsx"],"sourcesContent":["import { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\n// Styles\nimport './styles/sticky-section.scss';\n\n// TODO: Write this as functional component\nclass StickySection extends PureComponent {\n    static defaultProps = {\n        scrollingContainerCSSClass: 'bankai-sb-layout',\n    };\n\n    static propTypes = {\n        contextCls: PropTypes.string,\n        scrollingContainerCSSClass: PropTypes.string,\n    };\n\n    render() {\n        const { contextCls, children } = this.props;\n\n        return (\n            <div\n                className={cx(this.baseCls, contextCls)}\n                ref={this.handleSetRef}\n            >\n                <div className={`${this.baseCls}__inner`}>{children}</div>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        const scrollingContainerDOM = this.getScrollingContainerDOM();\n        scrollingContainerDOM.addEventListener('scroll', this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        const scrollingContainerDOM = this.getScrollingContainerDOM();\n        scrollingContainerDOM.removeEventListener('scroll', this.handleScroll);\n    }\n\n    handleSetRef = (el) => {\n        if (el) {\n            this.containerDOM = el;\n        }\n    };\n\n    handleScroll = () => {\n        const reqAniFrame = this.getBrowserReqAniFrame();\n        const scrollingContainerDOM = this.getScrollingContainerDOM();\n        this.lastScrollY = scrollingContainerDOM.scrollTop;\n\n        if (!this.isScrolling && this.containerDOM) {\n            reqAniFrame(this.handleConfigModCls);\n            this.isScrolling = true;\n        }\n    };\n\n    handleConfigModCls = () => {\n        const modCls = `${this.baseCls}--slim`;\n        const scrollingContainerDOM = this.getScrollingContainerDOM();\n        const { top: distanceFromTop, height } =\n            this.containerDOM.getBoundingClientRect();\n\n        if (this.lastScrollY === scrollingContainerDOM.scrollTop) {\n            const isSlim = this.containerDOM.classList.contains(modCls);\n            // const distanceFromTop =\n            //     this.containerDOM.getBoundingClientRect().top;\n            const shouldBeSlim = distanceFromTop <= 0;\n\n            if (!isSlim && shouldBeSlim) {\n                this.containerDOM.classList.add(modCls);\n                this.containerDOM.style.minHeight = `${height}px`;\n            } else if (isSlim && !shouldBeSlim) {\n                this.containerDOM.classList.remove(modCls);\n                this.containerDOM.style.minHeight = '';\n            }\n        }\n\n        this.isScrolling = false;\n    };\n\n    getScrollingContainerDOM = () => {\n        const { scrollingContainerCSSClass } = this.props;\n\n        return document.getElementsByClassName(scrollingContainerCSSClass)[0];\n    };\n\n    getBrowserReqAniFrame = () => {\n        return (\n            window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            window.oRequestAnimationFrame\n        );\n    };\n\n    baseCls = 'bankai-sb-sticky-section';\n}\n\nexport default StickySection;\n","import {\n    genDesignTokens,\n    massageConstToDotNotation,\n} from '@driponfleek/bankai-lib-theme-utils';\n\nconst getColorOnlyTokens = (tokens = {}) => {\n    const tokenKeys = Object.keys(tokens);\n    const colorTokens = [];\n\n    for (let index = 0; index < tokenKeys.length; index += 1) {\n        const data = {};\n        const tokenKey = tokenKeys[index];\n\n        if (tokenKey.indexOf('color') > -1) {\n            data.token = tokenKey;\n            data.color = tokens[tokenKey];\n            colorTokens.push(data);\n        }\n    }\n\n    return colorTokens;\n};\n\nexport const genTokens = (fieldValues = {}) => {\n    const {\n        isDarkMode,\n        shouldAutoCorrectForA11y,\n        shouldUseMinimumAPCATextCompliance,\n        avatarSourceColorToken,\n        btnSecondarySourceColorToken,\n        btnSecondaryStyle,\n        ...fieldVals\n    } = fieldValues;\n    const presets = {};\n    const fieldValKeys = Object.keys(fieldVals);\n\n    for (let index = 0; index < fieldValKeys.length; index += 1) {\n        const fieldValKey = fieldValKeys[index];\n        const fieldVal = fieldVals[fieldValKey];\n\n        presets[massageConstToDotNotation(fieldValKey)] = fieldVal;\n    }\n\n    const results = getColorOnlyTokens(\n        genDesignTokens(presets, {\n            isDarkMode,\n            shouldAutoCorrectColors: shouldAutoCorrectForA11y,\n            shouldUseMinimumAPCATextCompliance,\n            componentConfigs: {\n                avatar: {\n                    sourceColorToken: avatarSourceColorToken,\n                },\n                btnSecondary: {\n                    style: btnSecondaryStyle,\n                    sourceColorToken: btnSecondarySourceColorToken,\n                },\n            },\n        }),\n    );\n\n    const resultKeys = Object.keys(results);\n\n    for (let index = 0; index < resultKeys.length; index += 1) {\n        const fieldValKey = resultKeys[index];\n        const fieldVal = results[fieldValKey];\n\n        if (\n            fieldVal?.color?.includes(',') &&\n            !fieldVal?.color?.includes('rgb')\n        ) {\n            fieldVal.color = `rgb(${fieldVal.color})`;\n        }\n\n        results[fieldValKey] = fieldVal;\n    }\n\n    return results;\n};\n\n// TODO: Docs\nexport const getTokensByCategory = (tokensData) => {\n    // TODO: Move this to another file?\n    const categorizedTokensData = {\n        accordionTokens: [],\n        avatarTokens: [],\n        badgeTokens: [],\n        badgeAffirmativeTokens: [],\n        badgeCautionaryTokens: [],\n        badgeDangerTokens: [],\n        badgeInfoTokens: [],\n        bannerTokens: [],\n        bannerAffirmativeTokens: [],\n        bannerCautionaryTokens: [],\n        bannerDangerTokens: [],\n        bannerInfoTokens: [],\n        btnPrimaryTokens: [],\n        btnPrimaryDestructiveTokens: [],\n        btnSecondaryTokens: [],\n        btnSecondaryDestructiveTokens: [],\n        calloutAffirmativeTokens: [],\n        calloutCautionaryTokens: [],\n        calloutDangerTokens: [],\n        calloutInfoTokens: [],\n        dndDropzoneTokens: [],\n        formMenuTokens: [],\n        formToggleTokens: [],\n        formToggleSwitchTokens: [],\n        formTokens: [],\n        linkTokens: [],\n        loadingTokens: [],\n        modalTokens: [],\n        remainingTokens: [],\n        semanticTokens: [],\n        tabsTokens: [],\n        toasterAffirmativeTokens: [],\n        toasterCautionaryTokens: [],\n        toasterErrorTokens: [],\n        toasterInfoTokens: [],\n        tooltipTokens: [],\n    };\n\n    for (let index = 0; index < tokensData.length; index += 1) {\n        const tokenData = tokensData[index] ?? {};\n        const { token = '' } = tokenData;\n\n        switch (true) {\n            case token.startsWith('accordion'):\n                categorizedTokensData.accordionTokens.push(tokenData);\n                break;\n            case token.startsWith('avatar'):\n                categorizedTokensData.avatarTokens.push(tokenData);\n                break;\n            case token.startsWith('badge.affirmative'):\n                categorizedTokensData.badgeAffirmativeTokens.push(tokenData);\n                break;\n            case token.startsWith('badge.cautionary'):\n                categorizedTokensData.badgeCautionaryTokens.push(tokenData);\n                break;\n            case token.startsWith('badge.danger'):\n                categorizedTokensData.badgeDangerTokens.push(tokenData);\n                break;\n            case token.startsWith('badge.info'):\n                categorizedTokensData.badgeInfoTokens.push(tokenData);\n                break;\n            case token.startsWith('badge'):\n                categorizedTokensData.badgeTokens.push(tokenData);\n                break;\n            case token.startsWith('banner.affirmative'):\n                categorizedTokensData.bannerAffirmativeTokens.push(tokenData);\n                break;\n            case token.startsWith('banner.cautionary'):\n                categorizedTokensData.bannerCautionaryTokens.push(tokenData);\n                break;\n            case token.startsWith('banner.danger'):\n                categorizedTokensData.bannerDangerTokens.push(tokenData);\n                break;\n            case token.startsWith('banner.info'):\n                categorizedTokensData.bannerInfoTokens.push(tokenData);\n                break;\n            case token.startsWith('banner'):\n                categorizedTokensData.bannerTokens.push(tokenData);\n                break;\n            case token.startsWith('button.primary.destructive') ||\n                token.startsWith('button.split.primary.destructive'):\n                categorizedTokensData.btnPrimaryDestructiveTokens.push(\n                    tokenData,\n                );\n                break;\n            case token.startsWith('button.primary') ||\n                token.startsWith('button.split.primary'):\n                categorizedTokensData.btnPrimaryTokens.push(tokenData);\n                break;\n            case token.startsWith('button.secondary.destructive') ||\n                token.startsWith('button.split.secondary.destructive'):\n                categorizedTokensData.btnSecondaryDestructiveTokens.push(\n                    tokenData,\n                );\n                break;\n            case token.startsWith('button.secondary') ||\n                token.startsWith('button.split.secondary'):\n                categorizedTokensData.btnSecondaryTokens.push(tokenData);\n                break;\n            case token.startsWith('callout.affirmative'):\n                categorizedTokensData.calloutAffirmativeTokens.push(tokenData);\n                break;\n            case token.startsWith('callout.cautionary'):\n                categorizedTokensData.calloutCautionaryTokens.push(tokenData);\n                break;\n            case token.startsWith('callout.danger'):\n                categorizedTokensData.calloutDangerTokens.push(tokenData);\n                break;\n            case token.startsWith('callout.info'):\n                categorizedTokensData.calloutInfoTokens.push(tokenData);\n                break;\n            case token.startsWith('dnd.'):\n                categorizedTokensData.dndDropzoneTokens.push(tokenData);\n                break;\n            case token.startsWith('form.check'):\n                categorizedTokensData.formToggleTokens.push(tokenData);\n                break;\n            case token.startsWith('form.menu'):\n                categorizedTokensData.formMenuTokens.push(tokenData);\n                break;\n            case token.startsWith('form.toggle'):\n                categorizedTokensData.formToggleSwitchTokens.push(tokenData);\n                break;\n            case token.startsWith('form'):\n                categorizedTokensData.formTokens.push(tokenData);\n                break;\n            case token.startsWith('link'):\n                categorizedTokensData.linkTokens.push(tokenData);\n                break;\n            case token.startsWith('loading'):\n                categorizedTokensData.loadingTokens.push(tokenData);\n                break;\n            case token.startsWith('modal'):\n                categorizedTokensData.modalTokens.push(tokenData);\n                break;\n            case token.startsWith('tabs'):\n                categorizedTokensData.tabsTokens.push(tokenData);\n                break;\n            case token.startsWith('toaster.affirmative'):\n                categorizedTokensData.toasterAffirmativeTokens.push(tokenData);\n                break;\n            case token.startsWith('toaster.cautionary'):\n                categorizedTokensData.toasterCautionaryTokens.push(tokenData);\n                break;\n            case token.startsWith('toaster.error'):\n                categorizedTokensData.toasterErrorTokens.push(tokenData);\n                break;\n            case token.startsWith('toaster.info'):\n                categorizedTokensData.toasterInfoTokens.push(tokenData);\n                break;\n            case token.startsWith('tooltip'):\n                categorizedTokensData.tooltipTokens.push(tokenData);\n                break;\n            case token.startsWith('semantic'):\n                categorizedTokensData.semanticTokens.push(tokenData);\n                break;\n\n            default:\n                categorizedTokensData.remainingTokens.push(tokenData);\n                break;\n        }\n    }\n\n    return categorizedTokensData;\n};\n\nexport const getBtnTokensByState = (tokensData = []) => {\n    const categorizedTokensData = {\n        activeTokens: [],\n        focusTokens: [],\n        hoverTokens: [],\n        restingTokens: [],\n    };\n\n    for (let i = 0; i < tokensData.length; i += 1) {\n        const tokenData = tokensData[i] ?? {};\n        const { token = '' } = tokenData;\n\n        switch (true) {\n            case token.includes('.active.'):\n                categorizedTokensData.activeTokens.push(tokenData);\n                break;\n            case token.includes('.focus.'):\n                categorizedTokensData.focusTokens.push(tokenData);\n                break;\n            case token.includes('.hover.'):\n                categorizedTokensData.hoverTokens.push(tokenData);\n                break;\n            default:\n                categorizedTokensData.restingTokens.push(tokenData);\n                break;\n        }\n    }\n\n    return categorizedTokensData;\n};\n\nexport const getCompTheme = (tokensData = []) => {\n    const theme = {};\n\n    for (let i = 0; i < tokensData.length; i += 1) {\n        const tokenData = tokensData[i] ?? {};\n        const { token = '', color = '' } = tokenData;\n\n        theme[token] = color;\n    }\n\n    return theme;\n};\n","import cx from 'classnames';\nimport {\n    ComponentPreview,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport { genCSSVars } from '@driponfleek/bankai-lib-theme-utils';\nimport { Helmet } from 'react-helmet';\nimport { getCompTheme } from '../../utils/designTokenGenStoryUtils';\n\n// Styles\nimport './styles/comp-preview-with-ops.scss';\n\nconst CompPreviewWithOps = (props) => {\n    const {\n        contextCls,\n        tokensData = [],\n        renderOps: Ops,\n        opsProps,\n        children,\n    } = props;\n    const baseCls = genSBBaseCls('comp-preview-with-ops');\n    const hasTokens = tokensData.length > 0;\n    const theme = genCSSVars(\n        getCompTheme(tokensData),\n        `.${contextCls ?? baseCls}`,\n    );\n\n    return (\n        <div className={cx(baseCls, contextCls)}>\n            {hasTokens && (\n                <Helmet>\n                    <style>{theme}</style>\n                </Helmet>\n            )}\n            {children && (\n                <ComponentPreview contextCls={`${baseCls}__preview-container`}>\n                    {children}\n                </ComponentPreview>\n            )}\n            {Ops && (\n                <div className={`${baseCls}__ops-container`}>\n                    <Ops {...opsProps} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default CompPreviewWithOps;\n","import { IFLFormFieldComposer } from '@driponfleek/bankai-ui-form-elements';\nimport { Dropdown } from '@driponfleek/bankai-ui-form-elements-rw';\nimport {\n    FormLayout,\n    FormLayoutSection,\n    DynamicFormRow,\n} from '@driponfleek/bankai-ui-layouts';\n\nconst DropdownField = IFLFormFieldComposer(Dropdown);\n\nconst AvatarCompOps = (props) => {\n    const {\n        sourceTokenOps = [],\n        value,\n        onChange = () => Promise.resolve(),\n    } = props;\n\n    return (\n        <FormLayout>\n            <FormLayoutSection>\n                <DynamicFormRow>\n                    <DropdownField\n                        labelProps={{\n                            content: 'Avatar Source Color Token',\n                        }}\n                        data={sourceTokenOps}\n                        value={value}\n                        textField=\"text\"\n                        onChange={onChange}\n                    />\n                </DynamicFormRow>\n            </FormLayoutSection>\n        </FormLayout>\n    );\n};\n\nexport default AvatarCompOps;\n","import { Avatar } from '@driponfleek/bankai-ui-avatars';\nimport CompPreviewWithOps from './CompPreviewWithOps';\nimport AvatarCompOps from './AvatarCompOps';\n\nconst AvatarCompPreview = (props) => {\n    const { baseCls } = props;\n\n    return (\n        <CompPreviewWithOps\n            {...props}\n            contextCls={`${baseCls}__avatar-preview`}\n            renderOps={AvatarCompOps}\n        >\n            <Avatar>DY</Avatar>\n        </CompPreviewWithOps>\n    );\n};\n\nexport default AvatarCompPreview;\n","import {\n    SEMANTIC_COLOR_TOKEN_NAMES,\n    SEMANTIC_COLOR_TOKEN_DEFAULTS,\n    CORE_COLOR_NEUTRAL_SEED,\n    CORE_COLOR_NEUTRAL_SEED_DEFAULT,\n} from '@driponfleek/bankai-lib-theme-utils';\n\nconst {\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n} = SEMANTIC_COLOR_TOKEN_NAMES;\n\n// TODO: Need more fields for future, for now just do enough for MVP.\nexport const FIELD_IDS = {\n    CORE_COLOR_NEUTRAL_SEED,\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n};\n\nexport const FIELD_IDS_TO_LABEL_MAP = {\n    CORE_COLOR_NEUTRAL_SEED: 'Neutral Seed Color',\n    SEMANTIC_COLOR_ACCENT_PRIMARY: 'Accent Primary Color',\n    SEMANTIC_COLOR_ACCENT_SECONDARY: 'Accent Secondary Color',\n    SEMANTIC_COLOR_ACCENT_TERTIARY: 'Accent Tertiary Color',\n    SEMANTIC_COLOR_AFFIRMATIVE: 'Affirmative Color',\n    SEMANTIC_COLOR_BRAND: 'Brand Color',\n    SEMANTIC_COLOR_CAUTIONARY: 'Cautionary Color',\n    SEMANTIC_COLOR_CANVAS_BRAND: 'Canvas Brand Color',\n    SEMANTIC_COLOR_DESTRUCTIVE: 'Destructive Color',\n    SEMANTIC_COLOR_ERROR: 'Error Color',\n    SEMANTIC_COLOR_INFO: 'Info Color',\n    SEMANTIC_COLOR_PRIMARY: 'Primary Color',\n    SEMANTIC_COLOR_SECONDARY: 'Secondary Color',\n};\n\nexport const FIELD_IDS_TO_VALUE_DEFAULTS = {\n    CORE_COLOR_NEUTRAL_SEED: CORE_COLOR_NEUTRAL_SEED_DEFAULT,\n    SEMANTIC_COLOR_ACCENT_PRIMARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_ACCENT_PRIMARY],\n    SEMANTIC_COLOR_ACCENT_SECONDARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_ACCENT_SECONDARY],\n    SEMANTIC_COLOR_ACCENT_TERTIARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_ACCENT_TERTIARY],\n    SEMANTIC_COLOR_AFFIRMATIVE:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_AFFIRMATIVE],\n    SEMANTIC_COLOR_BRAND: SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_BRAND],\n    SEMANTIC_COLOR_CAUTIONARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_CAUTIONARY],\n    SEMANTIC_COLOR_CANVAS_BRAND:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_CANVAS_BRAND],\n    SEMANTIC_COLOR_DESTRUCTIVE:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_DESTRUCTIVE],\n    SEMANTIC_COLOR_ERROR: SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_ERROR],\n    SEMANTIC_COLOR_INFO: SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_INFO],\n    SEMANTIC_COLOR_PRIMARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_PRIMARY],\n    SEMANTIC_COLOR_SECONDARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_SECONDARY],\n};\n","import PropTypes from 'prop-types';\nimport ColorPickerField from '../../../../../sb-components/form-elements/ColorPickerField';\nimport { FIELD_IDS_TO_LABEL_MAP } from '../../const/designTokenGenConst';\n\nconst DesignTokenColorPicker = (props) => {\n    const { fieldId, fieldValues, ...rest } = props;\n\n    return (\n        <ColorPickerField\n            {...rest}\n            value={fieldValues[fieldId]}\n            color={fieldValues[fieldId]}\n            labelProps={{\n                content: FIELD_IDS_TO_LABEL_MAP[fieldId],\n            }}\n            fieldId={fieldId}\n        />\n    );\n};\n\nDesignTokenColorPicker.defaultProps = {\n    fieldValues: {},\n};\n\nDesignTokenColorPicker.propTypes = {\n    fieldId: PropTypes.string.isRequired,\n    fieldValues: PropTypes.object,\n};\n\nexport default DesignTokenColorPicker;\n","import {\n    FormLayout,\n    FormLayoutSection,\n    DynamicFormRow,\n} from '@driponfleek/bankai-ui-layouts';\nimport { StorySection, StickySection } from '@driponfleek/bankai-lib-storybook';\nimport ToggleSwitchField from '../../../../../sb-components/form-elements/ToggleSwitchField';\nimport DesignTokenColorPicker from '../../components/design-token-gen/DesignTokenColorPicker';\nimport { FIELD_IDS } from '../../const/designTokenGenConst';\n\nconst {\n    CORE_COLOR_NEUTRAL_SEED,\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n} = FIELD_IDS;\n\n/**\n * Props for SectionForm.\n * @typedef {Object} SectionFormProps\n * @property {string} baseCls - The base CSS class.\n * @property {Object} fieldValues - Object containing various field values.\n * @property {string} fieldValues.CORE_COLOR_NEUTRAL_SEED - Seed color for neutral core color generation.\n * @property {string} fieldValues.SEMANTIC_COLOR_ACCENT_PRIMARY - Desired accent color.\n * @property {string} fieldValues.SEMANTIC_COLOR_AFFIRMATIVE - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_CAUTIONARY - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_ERROR - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_INFO - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_PRIMARY - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_SECONDARY - Desired .\n * @property {boolean} fieldValues.isDarkMode - Indicates if tokens should be generated for dark mode.\n * @property {boolean} fieldValues.shouldAutoCorrectForA11y - Indicates if tokens colors should be auto-corrected to be a11y compliant.\n * @property {function} onChange - Callback function triggered when color inputs change.\n * @property {function} onDarkModeChange - Callback function triggered when dark mode toggle switch changes.\n * @property {function} onAutoCorrectForA11yChange - Callback function triggered when auto-correct for a11y toggle switch changes.\n */\n\n/**\n * SectionForm component\n * @param {SectionFormProps} props\n */\nconst SectionForm = (props) => {\n    const {\n        baseCls,\n        fieldValues = {},\n        onChange = () => Promise.resolve(),\n        onAPCAChange = () => Promise.resolve(),\n        onAutoCorrectForA11yChange = () => Promise.resolve(),\n        onDarkModeChange = () => Promise.resolve(),\n    } = props;\n    const {\n        isDarkMode = false,\n        shouldAutoCorrectForA11y = true,\n        shouldUseMinimumAPCATextCompliance = true,\n    } = fieldValues;\n    const pickerCommonProps = {\n        fieldValues,\n        onChange,\n        isLeftAlignedLabel: true,\n    };\n\n    return (\n        <StorySection>\n            <StickySection\n                contextCls={`${baseCls}__form-container`}\n                scrollingContainerCSSClass={baseCls}\n            >\n                <FormLayout>\n                    <FormLayoutSection>\n                        <DynamicFormRow\n                            contextCls={`${baseCls}__settings-container`}\n                        >\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_BRAND}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_PRIMARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_SECONDARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_CANVAS_BRAND}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_AFFIRMATIVE}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_CAUTIONARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_ERROR}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_INFO}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_DESTRUCTIVE}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_ACCENT_PRIMARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_ACCENT_SECONDARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_ACCENT_TERTIARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={CORE_COLOR_NEUTRAL_SEED}\n                            />\n                            <ToggleSwitchField\n                                labelProps={{\n                                    content: 'Generate for dark mode',\n                                }}\n                                isChecked={isDarkMode}\n                                onChange={onDarkModeChange}\n                                fieldId=\"isDarkMode\"\n                            />\n                            <ToggleSwitchField\n                                labelProps={{\n                                    content: 'Auto-Correct for accessibility',\n                                }}\n                                isChecked={shouldAutoCorrectForA11y}\n                                onChange={onAutoCorrectForA11yChange}\n                                fieldId=\"shouldAutoCorrectForA11y\"\n                            />\n                            <ToggleSwitchField\n                                labelProps={{\n                                    content:\n                                        'Use Minimum APCA Contrast for Text',\n                                }}\n                                isChecked={shouldUseMinimumAPCATextCompliance}\n                                onChange={onAPCAChange}\n                                fieldId=\"shouldUseMinimumAPCATextCompliance\"\n                            />\n                        </DynamicFormRow>\n                    </FormLayoutSection>\n                </FormLayout>\n            </StickySection>\n        </StorySection>\n    );\n};\n\nexport default SectionForm;\n","import { List } from '@driponfleek/bankai-ui-lists';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport ColorDesignTokenListItem from '../../../../../sb-components/lists/ColorDesignTokenListItem';\n\n// TODO: Add Prop Types documentation with JSDocs\nconst SectionTokens = (props) => {\n    const {\n        baseCls,\n        sectionTitle,\n        headingLvl = 2,\n        tokensData = [],\n        children,\n    } = props;\n    const renderListItem = (item) => <ColorDesignTokenListItem {...item} />;\n\n    return (\n        <StorySection contextCls={`${baseCls}__tokens-section-container`}>\n            <SectionTitle headingLvl={headingLvl}>{sectionTitle}</SectionTitle>\n            {children && (\n                <div className={`${baseCls}__children-container`}>\n                    {children}\n                </div>\n            )}\n            <StorySection contextCls={`${baseCls}__token-list-container`}>\n                <List renderListItem={renderListItem} data={tokensData} />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionTokens;\n","import { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport SectionTokens from './SectionTokens';\nimport { getBtnTokensByState } from '../../utils/designTokenGenStoryUtils';\n\n// TODO: Add Prop Types documentation with JSDocs\nconst SectionButtonTokens = (props) => {\n    const { baseCls, sectionTitle, tokensData = [], children } = props;\n    const {\n        activeTokens = [],\n        focusTokens = [],\n        hoverTokens = [],\n        restingTokens = [],\n    } = getBtnTokensByState(tokensData);\n\n    return (\n        <StorySection contextCls={`${baseCls}__tokens-section-container`}>\n            <SectionTitle>{sectionTitle}</SectionTitle>\n            {children && (\n                <div className={`${baseCls}__children-container`}>\n                    {children}\n                </div>\n            )}\n            <SectionTokens\n                baseCls={baseCls}\n                sectionTitle=\"Resting State\"\n                headingLvl={3}\n                tokensData={restingTokens}\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                sectionTitle=\"Hover State\"\n                headingLvl={3}\n                tokensData={hoverTokens}\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                sectionTitle=\"Active State\"\n                headingLvl={3}\n                tokensData={activeTokens}\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                sectionTitle=\"Focus State\"\n                headingLvl={3}\n                tokensData={focusTokens}\n            />\n        </StorySection>\n    );\n};\n\nexport default SectionButtonTokens;\n","import { useReducer } from 'react';\nimport { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport {\n    genConstToDotNotationMap,\n    BUTTON_STYLES,\n} from '@driponfleek/bankai-lib-theme-utils';\nimport { IFLFormFieldComposer } from '@driponfleek/bankai-ui-form-elements';\nimport {\n    FormLayout,\n    FormLayoutSection,\n    DynamicFormRow,\n} from '@driponfleek/bankai-ui-layouts';\nimport { Dropdown } from '@driponfleek/bankai-ui-form-elements-rw';\nimport AvatarCompPreview from './components/design-token-gen/AvatarCompPreview';\nimport {\n    genTokens,\n    getTokensByCategory,\n} from './utils/designTokenGenStoryUtils';\nimport { STORY_SUB_TITLE } from './const/storyConst';\nimport {\n    FIELD_IDS_TO_VALUE_DEFAULTS as DEFAULTS,\n    FIELD_IDS,\n} from './const/designTokenGenConst';\nimport SectionForm from './sections/design-token-generator/SectionForm';\nimport SectionTokens from './sections/design-token-generator/SectionTokens';\nimport SectionButtonTokens from './sections/design-token-generator/SectionButtonTokens';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\n\n// Styles\nimport './styles/story-design-token-gen.scss';\n\nconst {\n    CORE_COLOR_NEUTRAL_SEED,\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n} = FIELD_IDS;\nconst constToTokenMap = genConstToDotNotationMap({\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n});\nconst tokenDropdownListData = [\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_PRIMARY],\n        text: 'Primary',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_SECONDARY],\n        text: 'Secondary',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_BRAND],\n        text: 'Brand',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_CANVAS_BRAND],\n        text: 'Canvas Brand',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_ACCENT_PRIMARY],\n        text: 'Accent (Primary)',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_ACCENT_SECONDARY],\n        text: 'Accent (Secondary)',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_ACCENT_TERTIARY],\n        text: 'Accent (Tertiary)',\n    },\n    // {\n    //     id: constToTokenMap[SEMANTIC_COLOR_AFFIRMATIVE],\n    //     text: 'Affirmative',\n    // },\n    // {\n    //     id: constToTokenMap[SEMANTIC_COLOR_CAUTIONARY],\n    //     text: 'Cautionary',\n    // },\n    // {\n    //     id: constToTokenMap[SEMANTIC_COLOR_ERROR],\n    //     text: 'Error',\n    // },\n    // {\n    //     id: constToTokenMap[SEMANTIC_COLOR_INFO],\n    //     text: 'Info',\n    // },\n];\nconst btnStyleDropdownData = [\n    {\n        id: BUTTON_STYLES.FLAT,\n        text: 'Flat',\n    },\n    {\n        id: BUTTON_STYLES.GHOST,\n        text: 'Ghost',\n    },\n];\nconst DropdownField = IFLFormFieldComposer(Dropdown);\n\nconst initialState = {\n    [CORE_COLOR_NEUTRAL_SEED]: DEFAULTS[CORE_COLOR_NEUTRAL_SEED],\n    [SEMANTIC_COLOR_ACCENT_PRIMARY]: DEFAULTS[SEMANTIC_COLOR_ACCENT_PRIMARY],\n    [SEMANTIC_COLOR_ACCENT_SECONDARY]:\n        DEFAULTS[SEMANTIC_COLOR_ACCENT_SECONDARY],\n    [SEMANTIC_COLOR_ACCENT_TERTIARY]: DEFAULTS[SEMANTIC_COLOR_ACCENT_TERTIARY],\n    [SEMANTIC_COLOR_AFFIRMATIVE]: DEFAULTS[SEMANTIC_COLOR_AFFIRMATIVE],\n    [SEMANTIC_COLOR_BRAND]: DEFAULTS[SEMANTIC_COLOR_BRAND],\n    [SEMANTIC_COLOR_CAUTIONARY]: DEFAULTS[SEMANTIC_COLOR_CAUTIONARY],\n    [SEMANTIC_COLOR_CANVAS_BRAND]: DEFAULTS[SEMANTIC_COLOR_CANVAS_BRAND],\n    [SEMANTIC_COLOR_DESTRUCTIVE]: DEFAULTS[SEMANTIC_COLOR_DESTRUCTIVE],\n    [SEMANTIC_COLOR_ERROR]: DEFAULTS[SEMANTIC_COLOR_ERROR],\n    [SEMANTIC_COLOR_INFO]: DEFAULTS[SEMANTIC_COLOR_INFO],\n    [SEMANTIC_COLOR_PRIMARY]: DEFAULTS[SEMANTIC_COLOR_PRIMARY],\n    [SEMANTIC_COLOR_SECONDARY]: DEFAULTS[SEMANTIC_COLOR_SECONDARY],\n    avatarSourceColorToken: constToTokenMap[SEMANTIC_COLOR_CANVAS_BRAND],\n    btnSecondarySourceColorToken: constToTokenMap[SEMANTIC_COLOR_SECONDARY],\n    btnSecondaryStyle: BUTTON_STYLES.GHOST,\n    isDarkMode: false,\n    shouldAutoCorrectForA11y: true,\n    shouldUseMinimumAPCATextCompliance: true,\n};\n\nconst StoryDesignTokenGen = () => {\n    const baseCls = genSBBaseCls('design-token-generator');\n    const reducer = (state, updatedField) => {\n        return { ...state, ...updatedField };\n    };\n    const [fieldValues, dispatch] = useReducer(reducer, initialState);\n    const handleChange = (value, fieldId) => {\n        dispatch({ [fieldId]: value });\n    };\n    const handleDarkModeChange = (value, fieldId) => {\n        const { isDarkMode } = fieldValues;\n\n        dispatch({ [fieldId]: !isDarkMode });\n    };\n    const handleAutoCorrectForA11yChange = (value, fieldId) => {\n        const { shouldAutoCorrectForA11y } = fieldValues;\n\n        dispatch({ [fieldId]: !shouldAutoCorrectForA11y });\n    };\n    const handleAPCAChange = (value, fieldId) => {\n        const { shouldUseMinimumAPCATextCompliance } = fieldValues;\n\n        dispatch({ [fieldId]: !shouldUseMinimumAPCATextCompliance });\n    };\n    const handleAvatarSourceColorChange = (value = {}) => {\n        if (value?.id) {\n            dispatch({ avatarSourceColorToken: value.id });\n        }\n    };\n    const handleBtnSecondarySourceColorChange = (value = {}) => {\n        if (value?.id) {\n            dispatch({ btnSecondarySourceColorToken: value.id });\n        }\n    };\n    const handleBtnSecondaryStyleChange = (value = {}) => {\n        if (value?.id) {\n            dispatch({ btnSecondaryStyle: value.id });\n        }\n    };\n    const tokensData = genTokens(fieldValues);\n    const {\n        accordionTokens,\n        avatarTokens,\n        badgeTokens,\n        badgeAffirmativeTokens,\n        badgeCautionaryTokens,\n        badgeDangerTokens,\n        badgeInfoTokens,\n        bannerTokens,\n        bannerAffirmativeTokens,\n        bannerCautionaryTokens,\n        bannerDangerTokens,\n        bannerInfoTokens,\n        btnPrimaryTokens,\n        btnPrimaryDestructiveTokens,\n        btnSecondaryTokens,\n        btnSecondaryDestructiveTokens,\n        calloutAffirmativeTokens,\n        calloutCautionaryTokens,\n        calloutDangerTokens,\n        calloutInfoTokens,\n        dndDropzoneTokens,\n        formMenuTokens,\n        formToggleSwitchTokens,\n        formToggleTokens,\n        formTokens,\n        linkTokens,\n        loadingTokens,\n        modalTokens,\n        remainingTokens,\n        semanticTokens,\n        tabsTokens,\n        toasterAffirmativeTokens,\n        toasterCautionaryTokens,\n        toasterErrorTokens,\n        toasterInfoTokens,\n        tooltipTokens,\n    } = getTokensByCategory(tokensData);\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale(\n                'stories.everyone.designTokens.designTokenGenerator.title',\n            )}\n            subTitle={STORY_SUB_TITLE}\n        >\n            <SectionForm\n                baseCls={baseCls}\n                fieldValues={fieldValues}\n                onChange={handleChange}\n                onDarkModeChange={handleDarkModeChange}\n                onAutoCorrectForA11yChange={handleAutoCorrectForA11yChange}\n                onAPCAChange={handleAPCAChange}\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={semanticTokens}\n                sectionTitle=\"Semantic\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={accordionTokens}\n                sectionTitle=\"Accordion\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={avatarTokens}\n                sectionTitle=\"Avatar Test\"\n            >\n                <AvatarCompPreview\n                    baseCls={baseCls}\n                    tokensData={avatarTokens}\n                    opsProps={{\n                        sourceTokenOps: tokenDropdownListData,\n                        value: tokenDropdownListData.find(\n                            (token) =>\n                                token.id === fieldValues.avatarSourceColorToken,\n                        ),\n                        onChange: handleAvatarSourceColorChange,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeTokens}\n                sectionTitle=\"Badge\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeAffirmativeTokens}\n                sectionTitle=\"Badge (Affirmative)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeCautionaryTokens}\n                sectionTitle=\"Badge (Cautionary)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeDangerTokens}\n                sectionTitle=\"Badge (Danger)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeInfoTokens}\n                sectionTitle=\"Badge (Info)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerTokens}\n                sectionTitle=\"Banner\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerAffirmativeTokens}\n                sectionTitle=\"Banner (Affirmative)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerCautionaryTokens}\n                sectionTitle=\"Banner (Cautionary)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerDangerTokens}\n                sectionTitle=\"Banner (Danger)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerInfoTokens}\n                sectionTitle=\"Banner (Info)\"\n            />\n            <SectionButtonTokens\n                baseCls={baseCls}\n                tokensData={btnPrimaryTokens}\n                sectionTitle=\"Button (Primary)\"\n            />\n            <SectionButtonTokens\n                baseCls={baseCls}\n                tokensData={btnPrimaryDestructiveTokens}\n                sectionTitle=\"Button (Primary Destructive)\"\n            />\n            <SectionButtonTokens\n                baseCls={baseCls}\n                tokensData={btnSecondaryTokens}\n                sectionTitle=\"Button (Secondary)\"\n            >\n                <FormLayout>\n                    <FormLayoutSection>\n                        <DynamicFormRow>\n                            <DropdownField\n                                labelProps={{\n                                    content:\n                                        'Button Secondary Source Color Token',\n                                }}\n                                data={tokenDropdownListData}\n                                value={tokenDropdownListData.find(\n                                    (token) =>\n                                        token.id ===\n                                        fieldValues.btnSecondarySourceColorToken,\n                                )}\n                                textField=\"text\"\n                                onChange={handleBtnSecondarySourceColorChange}\n                            />\n                            <DropdownField\n                                labelProps={{\n                                    content: 'Button Secondary Style',\n                                }}\n                                data={btnStyleDropdownData}\n                                value={btnStyleDropdownData.find(\n                                    (token) =>\n                                        token.id ===\n                                        fieldValues.btnSecondaryStyle,\n                                )}\n                                textField=\"text\"\n                                onChange={handleBtnSecondaryStyleChange}\n                            />\n                        </DynamicFormRow>\n                    </FormLayoutSection>\n                </FormLayout>\n            </SectionButtonTokens>\n            <SectionButtonTokens\n                baseCls={baseCls}\n                tokensData={btnSecondaryDestructiveTokens}\n                sectionTitle=\"Button (Secondary Destructive)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={calloutAffirmativeTokens}\n                sectionTitle=\"Callout (Affirmative)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={calloutCautionaryTokens}\n                sectionTitle=\"Callout (Cautionary)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={calloutDangerTokens}\n                sectionTitle=\"Callout (Danger)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={calloutInfoTokens}\n                sectionTitle=\"Callout (Info)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={dndDropzoneTokens}\n                sectionTitle=\"Drag & Drop (Dropzone)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={formTokens}\n                sectionTitle=\"Form\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={formToggleTokens}\n                sectionTitle=\"Form Checkboxes and Radios\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={formMenuTokens}\n                sectionTitle=\"Form Menus\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={formToggleSwitchTokens}\n                sectionTitle=\"Form Toggle Switch\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={linkTokens}\n                sectionTitle=\"Links\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={loadingTokens}\n                sectionTitle=\"Loading\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={modalTokens}\n                sectionTitle=\"Modals\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={tabsTokens}\n                sectionTitle=\"Tabs\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={toasterAffirmativeTokens}\n                sectionTitle=\"Toaster (Affirmative)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={toasterCautionaryTokens}\n                sectionTitle=\"Toaster (Cautionary)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={toasterErrorTokens}\n                sectionTitle=\"Toaster (Error)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={toasterInfoTokens}\n                sectionTitle=\"Toaster (Info)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={tooltipTokens}\n                sectionTitle=\"Tooltips\"\n            />\n            {remainingTokens.length > 0 && (\n                <SectionTokens\n                    baseCls={baseCls}\n                    tokensData={remainingTokens}\n                    sectionTitle=\"Misc Tokens\"\n                />\n            )}\n        </StoryLayout>\n    );\n};\n\nexport default StoryDesignTokenGen;\n"],"names":["StickySection","PureComponent","__publicField","el","reqAniFrame","scrollingContainerDOM","modCls","distanceFromTop","height","isSlim","shouldBeSlim","scrollingContainerCSSClass","contextCls","children","jsx","cx","PropTypes","StickySection$1","getColorOnlyTokens","tokens","tokenKeys","colorTokens","index","data","tokenKey","genTokens","fieldValues","isDarkMode","shouldAutoCorrectForA11y","shouldUseMinimumAPCATextCompliance","avatarSourceColorToken","btnSecondarySourceColorToken","btnSecondaryStyle","fieldVals","presets","fieldValKeys","fieldValKey","fieldVal","massageConstToDotNotation","results","genDesignTokens","resultKeys","_a","_b","getTokensByCategory","tokensData","categorizedTokensData","tokenData","token","getBtnTokensByState","i","getCompTheme","theme","color","CompPreviewWithOps","props","Ops","opsProps","baseCls","genSBBaseCls","hasTokens","genCSSVars","Helmet","ComponentPreview","DropdownField","IFLFormFieldComposer","Dropdown","AvatarCompOps","sourceTokenOps","value","onChange","FormLayout","FormLayoutSection","DynamicFormRow","AvatarCompPreview","Avatar","SEMANTIC_COLOR_ACCENT_PRIMARY","SEMANTIC_COLOR_ACCENT_SECONDARY","SEMANTIC_COLOR_ACCENT_TERTIARY","SEMANTIC_COLOR_AFFIRMATIVE","SEMANTIC_COLOR_BRAND","SEMANTIC_COLOR_CAUTIONARY","SEMANTIC_COLOR_CANVAS_BRAND","SEMANTIC_COLOR_DESTRUCTIVE","SEMANTIC_COLOR_ERROR","SEMANTIC_COLOR_INFO","SEMANTIC_COLOR_PRIMARY","SEMANTIC_COLOR_SECONDARY","SEMANTIC_COLOR_TOKEN_NAMES","FIELD_IDS","CORE_COLOR_NEUTRAL_SEED","FIELD_IDS_TO_LABEL_MAP","FIELD_IDS_TO_VALUE_DEFAULTS","CORE_COLOR_NEUTRAL_SEED_DEFAULT","SEMANTIC_COLOR_TOKEN_DEFAULTS","DesignTokenColorPicker","fieldId","rest","ColorPickerField","SectionForm","onAPCAChange","onAutoCorrectForA11yChange","onDarkModeChange","pickerCommonProps","StorySection","jsxs","ToggleSwitchField","SectionTokens","sectionTitle","headingLvl","renderListItem","item","ColorDesignTokenListItem","SectionTitle","List","SectionButtonTokens","activeTokens","focusTokens","hoverTokens","restingTokens","constToTokenMap","genConstToDotNotationMap","tokenDropdownListData","btnStyleDropdownData","BUTTON_STYLES","initialState","DEFAULTS","StoryDesignTokenGen","reducer","state","updatedField","dispatch","useReducer","handleChange","handleDarkModeChange","handleAutoCorrectForA11yChange","handleAPCAChange","handleAvatarSourceColorChange","handleBtnSecondarySourceColorChange","handleBtnSecondaryStyleChange","accordionTokens","avatarTokens","badgeTokens","badgeAffirmativeTokens","badgeCautionaryTokens","badgeDangerTokens","badgeInfoTokens","bannerTokens","bannerAffirmativeTokens","bannerCautionaryTokens","bannerDangerTokens","bannerInfoTokens","btnPrimaryTokens","btnPrimaryDestructiveTokens","btnSecondaryTokens","btnSecondaryDestructiveTokens","calloutAffirmativeTokens","calloutCautionaryTokens","calloutDangerTokens","calloutInfoTokens","dndDropzoneTokens","formMenuTokens","formToggleSwitchTokens","formToggleTokens","formTokens","linkTokens","loadingTokens","modalTokens","remainingTokens","semanticTokens","tabsTokens","toasterAffirmativeTokens","toasterCautionaryTokens","toasterErrorTokens","toasterInfoTokens","tooltipTokens","StoryLayout","getLocale","STORY_SUB_TITLE"],"mappings":"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"}