{"version":3,"file":"DesignTokenGenerator.stories-64fdbb1b.js","sources":["../../../storybook-lib/src/components/layout/StickySection.jsx","../../stories/everyone/tokens/utils/designTokenGenStoryUtils.js","../../stories/everyone/tokens/components/design-token-gen/CompPreviewWithOps.jsx","../../stories/everyone/tokens/components/design-token-gen/SourceTokenOps.jsx","../../stories/everyone/tokens/components/design-token-gen/AvatarCompPreview.jsx","../../stories/everyone/tokens/components/design-token-gen/BadgeCompPreview.jsx","../../stories/everyone/tokens/components/design-token-gen/BannerCompPreview.jsx","../../stories/everyone/tokens/components/design-token-gen/ButtonOps.jsx","../../stories/everyone/tokens/components/design-token-gen/ButtonCompPreview.jsx","../../stories/everyone/tokens/components/design-token-gen/CalloutCompPreview.jsx","../../stories/everyone/tokens/const/designTokenGenConst.js","../../stories/everyone/tokens/components/design-token-gen/DesignTokenColorPicker.jsx","../../stories/everyone/tokens/sections/design-token-generator/SectionForm.jsx","../../stories/everyone/tokens/sections/design-token-generator/SectionTokens.jsx","../../stories/everyone/tokens/sections/design-token-generator/SectionButtonTokens.jsx","../../stories/everyone/tokens/StoryDesignTokenGen.jsx"],"sourcesContent":["import { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\n// Styles\nimport './styles/sticky-section.scss';\n\n// TODO: Write this as functional component\nclass StickySection extends PureComponent {\n    static defaultProps = {\n        scrollingContainerCSSClass: 'bankai-sb-layout',\n    };\n\n    static propTypes = {\n        contextCls: PropTypes.string,\n        scrollingContainerCSSClass: PropTypes.string,\n    };\n\n    render() {\n        const { contextCls, children } = this.props;\n\n        return (\n            <div\n                className={cx(this.baseCls, contextCls)}\n                ref={this.handleSetRef}\n            >\n                <div className={`${this.baseCls}__inner`}>{children}</div>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        const scrollingContainerDOM = this.getScrollingContainerDOM();\n        scrollingContainerDOM.addEventListener('scroll', this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        const scrollingContainerDOM = this.getScrollingContainerDOM();\n        scrollingContainerDOM.removeEventListener('scroll', this.handleScroll);\n    }\n\n    handleSetRef = (el) => {\n        if (el) {\n            this.containerDOM = el;\n        }\n    };\n\n    handleScroll = () => {\n        const reqAniFrame = this.getBrowserReqAniFrame();\n        const scrollingContainerDOM = this.getScrollingContainerDOM();\n        this.lastScrollY = scrollingContainerDOM.scrollTop;\n\n        if (!this.isScrolling && this.containerDOM) {\n            reqAniFrame(this.handleConfigModCls);\n            this.isScrolling = true;\n        }\n    };\n\n    handleConfigModCls = () => {\n        const modCls = `${this.baseCls}--slim`;\n        const scrollingContainerDOM = this.getScrollingContainerDOM();\n        const { top: distanceFromTop, height } =\n            this.containerDOM.getBoundingClientRect();\n\n        if (this.lastScrollY === scrollingContainerDOM.scrollTop) {\n            const isSlim = this.containerDOM.classList.contains(modCls);\n            // const distanceFromTop =\n            //     this.containerDOM.getBoundingClientRect().top;\n            const shouldBeSlim = distanceFromTop <= 0;\n\n            if (!isSlim && shouldBeSlim) {\n                this.containerDOM.classList.add(modCls);\n                this.containerDOM.style.minHeight = `${height}px`;\n            } else if (isSlim && !shouldBeSlim) {\n                this.containerDOM.classList.remove(modCls);\n                this.containerDOM.style.minHeight = '';\n            }\n        }\n\n        this.isScrolling = false;\n    };\n\n    getScrollingContainerDOM = () => {\n        const { scrollingContainerCSSClass } = this.props;\n\n        return document.getElementsByClassName(scrollingContainerCSSClass)[0];\n    };\n\n    getBrowserReqAniFrame = () => {\n        return (\n            window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            window.oRequestAnimationFrame\n        );\n    };\n\n    baseCls = 'bankai-sb-sticky-section';\n}\n\nexport default StickySection;\n","import {\n    genDesignTokens,\n    massageConstToDotNotation,\n} from '@driponfleek/bankai-lib-theme-utils';\n\nconst getColorOnlyTokens = (tokens = {}) => {\n    const tokenKeys = Object.keys(tokens);\n    const colorTokens = [];\n\n    for (let index = 0; index < tokenKeys.length; index += 1) {\n        const data = {};\n        const tokenKey = tokenKeys[index];\n\n        if (tokenKey.indexOf('color') > -1) {\n            data.token = tokenKey;\n            data.color = tokens[tokenKey];\n            colorTokens.push(data);\n        }\n    }\n\n    return colorTokens;\n};\n\nexport const genTokens = (fieldValues = {}) => {\n    const {\n        isDarkMode,\n        shouldAutoCorrectForA11y,\n        // shouldUseMinimumAPCATextCompliance,\n        avatarSourceColorToken,\n        badgeAffirmativeSourceColorToken,\n        badgeCautionarySourceColorToken,\n        badgeDangerSourceColorToken,\n        badgeInfoSourceColorToken,\n        bannerAffirmativeSourceColorToken,\n        bannerCautionarySourceColorToken,\n        bannerDangerSourceColorToken,\n        bannerInfoSourceColorToken,\n        buttonPrimarySourceColorToken,\n        buttonPrimaryStyle,\n        buttonPrimaryDestructiveSourceColorToken,\n        buttonPrimaryDestructiveStyle,\n        buttonSecondarySourceColorToken,\n        buttonSecondaryStyle,\n        buttonSecondaryDestructiveSourceColorToken,\n        buttonSecondaryDestructiveStyle,\n        calloutAffirmativeSourceColorToken,\n        calloutCautionarySourceColorToken,\n        calloutDangerSourceColorToken,\n        calloutInfoSourceColorToken,\n        ...fieldVals\n    } = fieldValues;\n    const presets = {};\n    const fieldValKeys = Object.keys(fieldVals);\n\n    for (let index = 0; index < fieldValKeys.length; index += 1) {\n        const fieldValKey = fieldValKeys[index];\n        const fieldVal = fieldVals[fieldValKey];\n\n        presets[massageConstToDotNotation(fieldValKey)] = fieldVal;\n    }\n\n    const results = getColorOnlyTokens(\n        genDesignTokens(presets, {\n            isDarkMode,\n            shouldAutoCorrectColors: shouldAutoCorrectForA11y,\n            // shouldUseMinimumAPCATextCompliance,\n            componentConfigs: {\n                avatar: {\n                    sourceColorToken: avatarSourceColorToken,\n                },\n                btnPrimary: {\n                    style: buttonPrimaryStyle,\n                    sourceColorToken: buttonPrimarySourceColorToken,\n                },\n                btnPrimaryDestructive: {\n                    style: buttonPrimaryDestructiveStyle,\n                    sourceColorToken: buttonPrimaryDestructiveSourceColorToken,\n                },\n                btnSecondary: {\n                    style: buttonSecondaryStyle,\n                    sourceColorToken: buttonSecondarySourceColorToken,\n                },\n                btnSecondaryDestructive: {\n                    style: buttonSecondaryDestructiveStyle,\n                    sourceColorToken:\n                        buttonSecondaryDestructiveSourceColorToken,\n                },\n                badgeAffirmative: {\n                    sourceColorToken: badgeAffirmativeSourceColorToken,\n                },\n                badgeCautionary: {\n                    sourceColorToken: badgeCautionarySourceColorToken,\n                },\n                badgeDanger: {\n                    sourceColorToken: badgeDangerSourceColorToken,\n                },\n                badgeInfo: {\n                    sourceColorToken: badgeInfoSourceColorToken,\n                },\n                bannerAffirmative: {\n                    sourceColorToken: bannerAffirmativeSourceColorToken,\n                },\n                bannerCautionary: {\n                    sourceColorToken: bannerCautionarySourceColorToken,\n                },\n                bannerDanger: {\n                    sourceColorToken: bannerDangerSourceColorToken,\n                },\n                bannerInfo: {\n                    sourceColorToken: bannerInfoSourceColorToken,\n                },\n                calloutAffirmative: {\n                    sourceColorToken: calloutAffirmativeSourceColorToken,\n                },\n                calloutCautionary: {\n                    sourceColorToken: calloutCautionarySourceColorToken,\n                },\n                calloutDanger: {\n                    sourceColorToken: calloutDangerSourceColorToken,\n                },\n                calloutInfo: {\n                    sourceColorToken: calloutInfoSourceColorToken,\n                },\n            },\n        }),\n    );\n\n    const resultKeys = Object.keys(results);\n\n    for (let index = 0; index < resultKeys.length; index += 1) {\n        const fieldValKey = resultKeys[index];\n        const fieldVal = results[fieldValKey];\n\n        if (\n            fieldVal?.color?.includes(',') &&\n            !fieldVal?.color?.includes('rgb')\n        ) {\n            fieldVal.color = `rgb(${fieldVal.color})`;\n        }\n\n        results[fieldValKey] = fieldVal;\n    }\n\n    return results;\n};\n\n// TODO: Docs\nexport const getTokensByCategory = (tokensData) => {\n    // TODO: Move this to another file?\n    const categorizedTokensData = {\n        accordionTokens: [],\n        avatarTokens: [],\n        badgeTokens: [],\n        badgeAffirmativeTokens: [],\n        badgeCautionaryTokens: [],\n        badgeDangerTokens: [],\n        badgeInfoTokens: [],\n        bannerTokens: [],\n        bannerAffirmativeTokens: [],\n        bannerCautionaryTokens: [],\n        bannerDangerTokens: [],\n        bannerInfoTokens: [],\n        btnPrimaryTokens: [],\n        btnPrimaryDestructiveTokens: [],\n        btnSecondaryTokens: [],\n        btnSecondaryDestructiveTokens: [],\n        calloutAffirmativeTokens: [],\n        calloutCautionaryTokens: [],\n        calloutDangerTokens: [],\n        calloutInfoTokens: [],\n        dndDropzoneTokens: [],\n        formMenuTokens: [],\n        formToggleTokens: [],\n        formToggleSwitchTokens: [],\n        formTokens: [],\n        linkTokens: [],\n        loadingTokens: [],\n        modalTokens: [],\n        remainingTokens: [],\n        semanticTokens: [],\n        tabsTokens: [],\n        toasterAffirmativeTokens: [],\n        toasterCautionaryTokens: [],\n        toasterErrorTokens: [],\n        toasterInfoTokens: [],\n        tooltipTokens: [],\n    };\n\n    for (let index = 0; index < tokensData.length; index += 1) {\n        const tokenData = tokensData[index] ?? {};\n        const { token = '' } = tokenData;\n\n        switch (true) {\n            case token.startsWith('accordion'):\n                categorizedTokensData.accordionTokens.push(tokenData);\n                break;\n            case token.startsWith('avatar'):\n                categorizedTokensData.avatarTokens.push(tokenData);\n                break;\n            case token.startsWith('badge.affirmative'):\n                categorizedTokensData.badgeAffirmativeTokens.push(tokenData);\n                break;\n            case token.startsWith('badge.cautionary'):\n                categorizedTokensData.badgeCautionaryTokens.push(tokenData);\n                break;\n            case token.startsWith('badge.danger'):\n                categorizedTokensData.badgeDangerTokens.push(tokenData);\n                break;\n            case token.startsWith('badge.info'):\n                categorizedTokensData.badgeInfoTokens.push(tokenData);\n                break;\n            case token.startsWith('badge'):\n                categorizedTokensData.badgeTokens.push(tokenData);\n                break;\n            case token.startsWith('banner.affirmative'):\n                categorizedTokensData.bannerAffirmativeTokens.push(tokenData);\n                break;\n            case token.startsWith('banner.cautionary'):\n                categorizedTokensData.bannerCautionaryTokens.push(tokenData);\n                break;\n            case token.startsWith('banner.danger'):\n                categorizedTokensData.bannerDangerTokens.push(tokenData);\n                break;\n            case token.startsWith('banner.info'):\n                categorizedTokensData.bannerInfoTokens.push(tokenData);\n                break;\n            case token.startsWith('banner'):\n                categorizedTokensData.bannerTokens.push(tokenData);\n                break;\n            case token.startsWith('button.primary.destructive') ||\n                token.startsWith('button.split.primary.destructive'):\n                categorizedTokensData.btnPrimaryDestructiveTokens.push(\n                    tokenData,\n                );\n                break;\n            case token.startsWith('button.primary') ||\n                token.startsWith('button.split.primary'):\n                categorizedTokensData.btnPrimaryTokens.push(tokenData);\n                break;\n            case token.startsWith('button.secondary.destructive') ||\n                token.startsWith('button.split.secondary.destructive'):\n                categorizedTokensData.btnSecondaryDestructiveTokens.push(\n                    tokenData,\n                );\n                break;\n            case token.startsWith('button.secondary') ||\n                token.startsWith('button.split.secondary'):\n                categorizedTokensData.btnSecondaryTokens.push(tokenData);\n                break;\n            case token.startsWith('callout.affirmative'):\n                categorizedTokensData.calloutAffirmativeTokens.push(tokenData);\n                break;\n            case token.startsWith('callout.cautionary'):\n                categorizedTokensData.calloutCautionaryTokens.push(tokenData);\n                break;\n            case token.startsWith('callout.danger'):\n                categorizedTokensData.calloutDangerTokens.push(tokenData);\n                break;\n            case token.startsWith('callout.info'):\n                categorizedTokensData.calloutInfoTokens.push(tokenData);\n                break;\n            case token.startsWith('dnd.'):\n                categorizedTokensData.dndDropzoneTokens.push(tokenData);\n                break;\n            case token.startsWith('form.check'):\n                categorizedTokensData.formToggleTokens.push(tokenData);\n                break;\n            case token.startsWith('form.menu'):\n                categorizedTokensData.formMenuTokens.push(tokenData);\n                break;\n            case token.startsWith('form.toggle'):\n                categorizedTokensData.formToggleSwitchTokens.push(tokenData);\n                break;\n            case token.startsWith('form'):\n                categorizedTokensData.formTokens.push(tokenData);\n                break;\n            case token.startsWith('link'):\n                categorizedTokensData.linkTokens.push(tokenData);\n                break;\n            case token.startsWith('loading'):\n                categorizedTokensData.loadingTokens.push(tokenData);\n                break;\n            case token.startsWith('modal'):\n                categorizedTokensData.modalTokens.push(tokenData);\n                break;\n            case token.startsWith('tabs'):\n                categorizedTokensData.tabsTokens.push(tokenData);\n                break;\n            case token.startsWith('toaster.affirmative'):\n                categorizedTokensData.toasterAffirmativeTokens.push(tokenData);\n                break;\n            case token.startsWith('toaster.cautionary'):\n                categorizedTokensData.toasterCautionaryTokens.push(tokenData);\n                break;\n            case token.startsWith('toaster.error'):\n                categorizedTokensData.toasterErrorTokens.push(tokenData);\n                break;\n            case token.startsWith('toaster.info'):\n                categorizedTokensData.toasterInfoTokens.push(tokenData);\n                break;\n            case token.startsWith('tooltip'):\n                categorizedTokensData.tooltipTokens.push(tokenData);\n                break;\n            case token.startsWith('semantic'):\n                categorizedTokensData.semanticTokens.push(tokenData);\n                break;\n\n            default:\n                categorizedTokensData.remainingTokens.push(tokenData);\n                break;\n        }\n    }\n\n    return categorizedTokensData;\n};\n\nexport const getBtnTokensByState = (tokensData = []) => {\n    const categorizedTokensData = {\n        activeTokens: [],\n        focusTokens: [],\n        hoverTokens: [],\n        restingTokens: [],\n    };\n\n    for (let i = 0; i < tokensData.length; i += 1) {\n        const tokenData = tokensData[i] ?? {};\n        const { token = '' } = tokenData;\n\n        switch (true) {\n            case token.includes('.active.'):\n                categorizedTokensData.activeTokens.push(tokenData);\n                break;\n            case token.includes('.focus.'):\n                categorizedTokensData.focusTokens.push(tokenData);\n                break;\n            case token.includes('.hover.'):\n                categorizedTokensData.hoverTokens.push(tokenData);\n                break;\n            default:\n                categorizedTokensData.restingTokens.push(tokenData);\n                break;\n        }\n    }\n\n    return categorizedTokensData;\n};\n\nexport const getCompTheme = (tokensData = []) => {\n    const theme = {};\n\n    for (let i = 0; i < tokensData.length; i += 1) {\n        const tokenData = tokensData[i] ?? {};\n        const { token = '', color = '' } = tokenData;\n\n        theme[token] = color;\n    }\n\n    return theme;\n};\n","import cx from 'classnames';\nimport {\n    ComponentPreview,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport { genCSSVars } from '@driponfleek/bankai-lib-theme-utils';\nimport { Helmet } from 'react-helmet';\nimport { getCompTheme } from '../../utils/designTokenGenStoryUtils';\n\n// Styles\nimport './styles/comp-preview-with-ops.scss';\n\nconst CompPreviewWithOps = (props) => {\n    const {\n        contextCls,\n        tokensData = [],\n        semanticTokens,\n        renderOps: Ops,\n        opsProps,\n        children,\n    } = props;\n    const baseCls = genSBBaseCls('comp-preview-with-ops');\n    const hasTokens = tokensData.length > 0;\n    const theme = genCSSVars(\n        getCompTheme([...tokensData, ...(semanticTokens || [])]),\n        `.${contextCls ?? baseCls} .${baseCls}__preview-container`,\n    );\n\n    return (\n        <div className={cx(baseCls, contextCls)}>\n            {hasTokens && (\n                <Helmet>\n                    <style>{theme}</style>\n                </Helmet>\n            )}\n            {children && (\n                <ComponentPreview contextCls={`${baseCls}__preview-container`}>\n                    {children}\n                </ComponentPreview>\n            )}\n            {Ops && (\n                <div className={`${baseCls}__ops-container`}>\n                    <Ops {...opsProps} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default CompPreviewWithOps;\n","import { IFLFormFieldComposer } from '@driponfleek/bankai-ui-form-elements';\nimport { Dropdown } from '@driponfleek/bankai-ui-form-elements-rw';\nimport {\n    FormLayout,\n    FormLayoutSection,\n    DynamicFormRow,\n} from '@driponfleek/bankai-ui-layouts';\n\nconst DropdownField = IFLFormFieldComposer(Dropdown);\n\nconst SourceTokenOps = (props) => {\n    const {\n        label,\n        value,\n        sourceTokenOps = [],\n        onChange = () => Promise.resolve(),\n    } = props;\n\n    return (\n        <FormLayout>\n            <FormLayoutSection>\n                <DynamicFormRow>\n                    <DropdownField\n                        labelProps={{\n                            content: label,\n                        }}\n                        data={sourceTokenOps}\n                        value={value}\n                        textField=\"text\"\n                        onChange={onChange}\n                    />\n                </DynamicFormRow>\n            </FormLayoutSection>\n        </FormLayout>\n    );\n};\n\nexport default SourceTokenOps;\n","import { useMemo } from 'react';\nimport { Avatar } from '@driponfleek/bankai-ui-avatars';\nimport CompPreviewWithOps from './CompPreviewWithOps';\nimport SourceTokenOps from './SourceTokenOps';\n\nconst AvatarCompPreview = (props) => {\n    const { baseCls, opsProps, dispatch, ...rest } = props;\n    const handleChange = (value = {}) => {\n        if (value?.id) {\n            dispatch({ avatarSourceColorToken: value.id });\n        }\n    };\n    const opsVal = useMemo(\n        () =>\n            opsProps?.sourceTokenOps.find(\n                (token) => token.id === opsProps?.value,\n            ),\n        [opsProps],\n    );\n\n    return (\n        <CompPreviewWithOps\n            {...rest}\n            contextCls={`${baseCls}__avatar-preview`}\n            renderOps={SourceTokenOps}\n            opsProps={{ ...opsProps, onChange: handleChange, value: opsVal }}\n        >\n            <Avatar>DY</Avatar>\n        </CompPreviewWithOps>\n    );\n};\n\nexport default AvatarCompPreview;\n","import { useMemo } from 'react';\nimport {\n    Badge,\n    BadgeAffirmative,\n    BadgeCautionary,\n    BadgeDanger,\n    BadgeInfo,\n} from '@driponfleek/bankai-ui-badges';\nimport CompPreviewWithOps from './CompPreviewWithOps';\nimport SourceTokenOps from './SourceTokenOps';\n\nconst getBadgePreviewComp = (type) => {\n    switch (type) {\n        case 'affirmative':\n            return BadgeAffirmative;\n        case 'cautionary':\n            return BadgeCautionary;\n        case 'danger':\n            return BadgeDanger;\n        case 'info':\n            return BadgeInfo;\n        default:\n            return Badge;\n    }\n};\n\nconst BadgeCompPreview = (props) => {\n    const { baseCls, variant, dispatch, opsProps, ...rest } = props;\n    const variantLowercase = variant?.toLowerCase();\n    const valueKey = `badge${variant || ''}SourceColorToken`;\n    const handleChange = (value = {}) => {\n        if (value?.id) {\n            dispatch({\n                [valueKey]: value.id,\n            });\n        }\n    };\n    const Comp = useMemo(\n        () => getBadgePreviewComp(variantLowercase),\n        [variantLowercase],\n    );\n    const sourceTokenVal = useMemo(\n        () =>\n            opsProps?.sourceTokenOps.find(\n                (token) => token.id === opsProps?.value,\n            ),\n        [opsProps],\n    );\n    const previewProps = {\n        ...rest,\n        ...(variant && {\n            renderOps: SourceTokenOps,\n            opsProps: {\n                ...opsProps,\n                onChange: handleChange,\n                value: sourceTokenVal,\n            },\n        }),\n    };\n\n    return (\n        <CompPreviewWithOps\n            {...previewProps}\n            contextCls={`${baseCls}__badge-${\n                variant ? `${variantLowercase}-` : ''\n            }preview`}\n        >\n            <Comp>Badge Text</Comp>\n        </CompPreviewWithOps>\n    );\n};\n\nexport default BadgeCompPreview;\n","import { useMemo } from 'react';\nimport {\n    Banner,\n    BannerAffirmative,\n    BannerCautionary,\n    BannerDanger,\n    BannerInfo,\n} from '@driponfleek/bankai-ui-callouts';\nimport {\n    BankaiCircleCheck,\n    BankaiCircleInfo,\n    BankaiTriangleAlert,\n    BankaiUser,\n} from '@driponfleek/bankai-ui-icons';\nimport CompPreviewWithOps from './CompPreviewWithOps';\nimport SourceTokenOps from './SourceTokenOps';\n\nconst getPreviewComp = (type) => {\n    switch (type) {\n        case 'affirmative':\n            return BannerAffirmative;\n        case 'cautionary':\n            return BannerCautionary;\n        case 'danger':\n            return BannerDanger;\n        case 'info':\n            return BannerInfo;\n        default:\n            return Banner;\n    }\n};\n\nconst getIcon = (type) => {\n    switch (type) {\n        case 'affirmative':\n            return BankaiCircleCheck;\n        case 'cautionary':\n        case 'danger':\n            return BankaiTriangleAlert;\n        case 'info':\n            return BankaiCircleInfo;\n        default:\n            return BankaiUser;\n    }\n};\n\nconst BannerCompPreview = (props) => {\n    const { baseCls, variant, dispatch, opsProps, ...rest } = props;\n    const variantLowercase = variant?.toLowerCase();\n    const valueKey = `banner${variant || ''}SourceColorToken`;\n    const handleChange = (value = {}) => {\n        if (value?.id) {\n            dispatch({\n                [valueKey]: value.id,\n            });\n        }\n    };\n    const Comp = useMemo(\n        () => getPreviewComp(variantLowercase),\n        [variantLowercase],\n    );\n    const Icon = useMemo(() => getIcon(variantLowercase), [variantLowercase]);\n    const sourceTokenVal = useMemo(\n        () =>\n            opsProps?.sourceTokenOps.find(\n                (token) => token.id === opsProps?.value,\n            ),\n        [opsProps],\n    );\n    const previewProps = {\n        ...rest,\n        ...(variant && {\n            renderOps: SourceTokenOps,\n            opsProps: {\n                ...opsProps,\n                onChange: handleChange,\n                value: sourceTokenVal,\n            },\n        }),\n    };\n\n    return (\n        <CompPreviewWithOps\n            {...previewProps}\n            contextCls={`${baseCls}__banner-${\n                variant ? `${variantLowercase}-` : ''\n            }preview`}\n        >\n            <Comp\n                renderIcon={Icon}\n                title=\"Banner Title\"\n                msg=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n            />\n        </CompPreviewWithOps>\n    );\n};\n\nexport default BannerCompPreview;\n","import { IFLFormFieldComposer } from '@driponfleek/bankai-ui-form-elements';\nimport { Dropdown } from '@driponfleek/bankai-ui-form-elements-rw';\nimport {\n    FormLayout,\n    FormLayoutSection,\n    DynamicFormRow,\n} from '@driponfleek/bankai-ui-layouts';\n\nconst DropdownField = IFLFormFieldComposer(Dropdown);\n\nconst ButtonOps = (props) => {\n    const {\n        sourceTokenLabel,\n        sourceTokenValue,\n        sourceTokenOps = [],\n        styleLabel,\n        styleValue,\n        styleOps = [],\n        onSourceTokenChange = () => Promise.resolve(),\n        onStyleChange = () => Promise.resolve(),\n    } = props;\n\n    return (\n        <FormLayout>\n            <FormLayoutSection>\n                <DynamicFormRow>\n                    <DropdownField\n                        labelProps={{\n                            content: sourceTokenLabel,\n                        }}\n                        data={sourceTokenOps}\n                        value={sourceTokenValue}\n                        textField=\"text\"\n                        onChange={onSourceTokenChange}\n                    />\n                </DynamicFormRow>\n                <DynamicFormRow>\n                    <DropdownField\n                        labelProps={{\n                            content: styleLabel,\n                        }}\n                        data={styleOps}\n                        value={styleValue}\n                        textField=\"text\"\n                        onChange={onStyleChange}\n                    />\n                </DynamicFormRow>\n            </FormLayoutSection>\n        </FormLayout>\n    );\n};\n\nexport default ButtonOps;\n","import { useMemo } from 'react';\nimport {\n    Button,\n    ButtonPrimary,\n    ButtonSecondary,\n} from '@driponfleek/bankai-ui-buttons';\nimport CompPreviewWithOps from './CompPreviewWithOps';\nimport ButtonOps from './ButtonOps';\n\nconst getButtonPreviewComp = (type) => {\n    switch (type) {\n        case 'primary':\n            return ButtonPrimary;\n        case 'secondary':\n            return ButtonSecondary;\n        default:\n            return Button;\n    }\n};\n\nconst ButtonCompPreview = (props) => {\n    const {\n        baseCls,\n        variant,\n        dispatch,\n        opsProps,\n        isDestructive = false,\n        ...rest\n    } = props;\n    const {\n        sourceTokenOps = [],\n        sourceTokenValue,\n        styleOps = [],\n        styleValue,\n    } = opsProps ?? {};\n    const variantLowercase = variant?.toLowerCase();\n    const valueKey = `button${variant || ''}${\n        isDestructive ? 'Destructive' : ''\n    }`;\n    const sourceTokenValueKey = `${valueKey}SourceColorToken`;\n    const styleValueKey = `${valueKey}Style`;\n    const handleSourceTokenChange = (value = {}) => {\n        if (value?.id) {\n            dispatch({\n                [sourceTokenValueKey]: value.id,\n            });\n        }\n    };\n    const handleStyleChange = (value = {}) => {\n        if (value?.id) {\n            dispatch({\n                [styleValueKey]: value.id,\n            });\n        }\n    };\n    const Comp = useMemo(\n        () => getButtonPreviewComp(variantLowercase),\n        [variantLowercase],\n    );\n    const sourceTokenVal = useMemo(\n        () => sourceTokenOps.find((token) => token.id === sourceTokenValue),\n        [sourceTokenOps, sourceTokenValue],\n    );\n    const styleVal = useMemo(\n        () => styleOps.find((token) => token.id === styleValue),\n        [styleOps, styleValue],\n    );\n    const previewProps = {\n        ...rest,\n        ...(variant && {\n            renderOps: ButtonOps,\n            opsProps: {\n                ...opsProps,\n                sourceTokenValue: sourceTokenVal,\n                styleValue: styleVal,\n                onSourceTokenChange: handleSourceTokenChange,\n                onStyleChange: handleStyleChange,\n            },\n        }),\n    };\n\n    return (\n        <CompPreviewWithOps\n            {...previewProps}\n            contextCls={`${baseCls}__button${\n                variant ? `-${variantLowercase}` : ''\n            }${isDestructive ? `-destructive` : ''}-preview`}\n        >\n            <Comp text=\"Button Text\" isDestructive={isDestructive} />\n        </CompPreviewWithOps>\n    );\n};\n\nexport default ButtonCompPreview;\n","import { useMemo } from 'react';\nimport {\n    Callout,\n    CalloutAffirmative,\n    CalloutCautionary,\n    CalloutDanger,\n    CalloutInfo,\n} from '@driponfleek/bankai-ui-callouts';\nimport {\n    BankaiCircleCheck,\n    BankaiCircleInfo,\n    BankaiTriangleAlert,\n    BankaiUser,\n} from '@driponfleek/bankai-ui-icons';\nimport CompPreviewWithOps from './CompPreviewWithOps';\nimport SourceTokenOps from './SourceTokenOps';\n\nconst getPreviewComp = (type) => {\n    switch (type) {\n        case 'affirmative':\n            return CalloutAffirmative;\n        case 'cautionary':\n            return CalloutCautionary;\n        case 'danger':\n            return CalloutDanger;\n        case 'info':\n            return CalloutInfo;\n        default:\n            return Callout;\n    }\n};\n\nconst getIcon = (type) => {\n    switch (type) {\n        case 'affirmative':\n            return BankaiCircleCheck;\n        case 'cautionary':\n        case 'danger':\n            return BankaiTriangleAlert;\n        case 'info':\n            return BankaiCircleInfo;\n        default:\n            return BankaiUser;\n    }\n};\n\nconst CalloutCompPreview = (props) => {\n    const { baseCls, variant, dispatch, opsProps, ...rest } = props;\n    const variantLowercase = variant?.toLowerCase();\n    const valueKey = `callout${variant || ''}SourceColorToken`;\n    const handleChange = (value = {}) => {\n        if (value?.id) {\n            dispatch({\n                [valueKey]: value.id,\n            });\n        }\n    };\n    const Comp = useMemo(\n        () => getPreviewComp(variantLowercase),\n        [variantLowercase],\n    );\n    const Icon = useMemo(() => getIcon(variantLowercase), [variantLowercase]);\n    const sourceTokenVal = useMemo(\n        () =>\n            opsProps?.sourceTokenOps.find(\n                (token) => token.id === opsProps?.value,\n            ),\n        [opsProps],\n    );\n    const previewProps = {\n        ...rest,\n        ...(variant && {\n            renderOps: SourceTokenOps,\n            opsProps: {\n                ...opsProps,\n                onChange: handleChange,\n                value: sourceTokenVal,\n            },\n        }),\n    };\n\n    return (\n        <CompPreviewWithOps\n            {...previewProps}\n            contextCls={`${baseCls}__callout-${\n                variant ? `${variantLowercase}-` : ''\n            }preview`}\n        >\n            <Comp\n                renderIcon={Icon}\n                title=\"Callout Title\"\n                msg=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n            />\n        </CompPreviewWithOps>\n    );\n};\n\nexport default CalloutCompPreview;\n","import {\n    SEMANTIC_COLOR_TOKEN_NAMES,\n    SEMANTIC_COLOR_TOKEN_DEFAULTS,\n    CORE_COLOR_NEUTRAL_SEED,\n    CORE_COLOR_NEUTRAL_SEED_DEFAULT,\n} from '@driponfleek/bankai-lib-theme-utils';\n\nconst {\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n} = SEMANTIC_COLOR_TOKEN_NAMES;\n\n// TODO: Need more fields for future, for now just do enough for MVP.\nexport const FIELD_IDS = {\n    CORE_COLOR_NEUTRAL_SEED,\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n};\n\nexport const FIELD_IDS_TO_LABEL_MAP = {\n    CORE_COLOR_NEUTRAL_SEED: 'Neutral Seed Color',\n    SEMANTIC_COLOR_ACCENT_PRIMARY: 'Accent Primary Color',\n    SEMANTIC_COLOR_ACCENT_SECONDARY: 'Accent Secondary Color',\n    SEMANTIC_COLOR_ACCENT_TERTIARY: 'Accent Tertiary Color',\n    SEMANTIC_COLOR_AFFIRMATIVE: 'Affirmative Color',\n    SEMANTIC_COLOR_BRAND: 'Brand Color',\n    SEMANTIC_COLOR_CAUTIONARY: 'Cautionary Color',\n    SEMANTIC_COLOR_CANVAS_BRAND: 'Canvas Brand Color',\n    SEMANTIC_COLOR_DESTRUCTIVE: 'Destructive Color',\n    SEMANTIC_COLOR_ERROR: 'Error Color',\n    SEMANTIC_COLOR_INFO: 'Info Color',\n    SEMANTIC_COLOR_PRIMARY: 'Primary Color',\n    SEMANTIC_COLOR_SECONDARY: 'Secondary Color',\n};\n\nexport const FIELD_IDS_TO_VALUE_DEFAULTS = {\n    CORE_COLOR_NEUTRAL_SEED: CORE_COLOR_NEUTRAL_SEED_DEFAULT,\n    SEMANTIC_COLOR_ACCENT_PRIMARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_ACCENT_PRIMARY],\n    SEMANTIC_COLOR_ACCENT_SECONDARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_ACCENT_SECONDARY],\n    SEMANTIC_COLOR_ACCENT_TERTIARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_ACCENT_TERTIARY],\n    SEMANTIC_COLOR_AFFIRMATIVE:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_AFFIRMATIVE],\n    SEMANTIC_COLOR_BRAND: SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_BRAND],\n    SEMANTIC_COLOR_CAUTIONARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_CAUTIONARY],\n    SEMANTIC_COLOR_CANVAS_BRAND:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_CANVAS_BRAND],\n    SEMANTIC_COLOR_DESTRUCTIVE:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_DESTRUCTIVE],\n    SEMANTIC_COLOR_ERROR: SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_ERROR],\n    SEMANTIC_COLOR_INFO: SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_INFO],\n    SEMANTIC_COLOR_PRIMARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_PRIMARY],\n    SEMANTIC_COLOR_SECONDARY:\n        SEMANTIC_COLOR_TOKEN_DEFAULTS[SEMANTIC_COLOR_SECONDARY],\n};\n","import PropTypes from 'prop-types';\nimport ColorPickerField from '../../../../../sb-components/form-elements/ColorPickerField';\nimport { FIELD_IDS_TO_LABEL_MAP } from '../../const/designTokenGenConst';\n\nconst DesignTokenColorPicker = (props) => {\n    const { fieldId, fieldValues, ...rest } = props;\n\n    return (\n        <ColorPickerField\n            {...rest}\n            value={fieldValues[fieldId]}\n            color={fieldValues[fieldId]}\n            labelProps={{\n                content: FIELD_IDS_TO_LABEL_MAP[fieldId],\n            }}\n            fieldId={fieldId}\n        />\n    );\n};\n\nDesignTokenColorPicker.defaultProps = {\n    fieldValues: {},\n};\n\nDesignTokenColorPicker.propTypes = {\n    fieldId: PropTypes.string.isRequired,\n    fieldValues: PropTypes.object,\n};\n\nexport default DesignTokenColorPicker;\n","import {\n    FormLayout,\n    FormLayoutSection,\n    DynamicFormRow,\n} from '@driponfleek/bankai-ui-layouts';\nimport { StorySection, StickySection } from '@driponfleek/bankai-lib-storybook';\nimport ToggleSwitchField from '../../../../../sb-components/form-elements/ToggleSwitchField';\nimport DesignTokenColorPicker from '../../components/design-token-gen/DesignTokenColorPicker';\nimport { FIELD_IDS } from '../../const/designTokenGenConst';\n\nconst {\n    CORE_COLOR_NEUTRAL_SEED,\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n} = FIELD_IDS;\n\n/**\n * Props for SectionForm.\n * @typedef {Object} SectionFormProps\n * @property {string} baseCls - The base CSS class.\n * @property {Object} fieldValues - Object containing various field values.\n * @property {string} fieldValues.CORE_COLOR_NEUTRAL_SEED - Seed color for neutral core color generation.\n * @property {string} fieldValues.SEMANTIC_COLOR_ACCENT_PRIMARY - Desired accent color.\n * @property {string} fieldValues.SEMANTIC_COLOR_AFFIRMATIVE - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_CAUTIONARY - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_ERROR - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_INFO - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_PRIMARY - Desired .\n * @property {string} fieldValues.SEMANTIC_COLOR_SECONDARY - Desired .\n * @property {boolean} fieldValues.isDarkMode - Indicates if tokens should be generated for dark mode.\n * @property {boolean} fieldValues.shouldAutoCorrectForA11y - Indicates if tokens colors should be auto-corrected to be a11y compliant.\n * @property {function} onChange - Callback function triggered when color inputs change.\n * @property {function} onDarkModeChange - Callback function triggered when dark mode toggle switch changes.\n * @property {function} onAutoCorrectForA11yChange - Callback function triggered when auto-correct for a11y toggle switch changes.\n */\n\n/**\n * SectionForm component\n * @param {SectionFormProps} props\n */\nconst SectionForm = (props) => {\n    const {\n        baseCls,\n        fieldValues = {},\n        onChange = () => Promise.resolve(),\n        // onAPCAChange = () => Promise.resolve(),\n        onAutoCorrectForA11yChange = () => Promise.resolve(),\n        onDarkModeChange = () => Promise.resolve(),\n    } = props;\n    const {\n        isDarkMode = false,\n        shouldAutoCorrectForA11y = true,\n        // shouldUseMinimumAPCATextCompliance = true,\n    } = fieldValues;\n    const pickerCommonProps = {\n        fieldValues,\n        onChange,\n        isLeftAlignedLabel: true,\n    };\n\n    return (\n        <StorySection>\n            <StickySection\n                contextCls={`${baseCls}__form-container`}\n                scrollingContainerCSSClass={baseCls}\n            >\n                <FormLayout>\n                    <FormLayoutSection>\n                        <DynamicFormRow\n                            contextCls={`${baseCls}__settings-container`}\n                        >\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_BRAND}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_PRIMARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_SECONDARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_CANVAS_BRAND}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_AFFIRMATIVE}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_CAUTIONARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_ERROR}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_INFO}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_DESTRUCTIVE}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_ACCENT_PRIMARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_ACCENT_SECONDARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={SEMANTIC_COLOR_ACCENT_TERTIARY}\n                            />\n                            <DesignTokenColorPicker\n                                {...pickerCommonProps}\n                                fieldId={CORE_COLOR_NEUTRAL_SEED}\n                            />\n                            <ToggleSwitchField\n                                labelProps={{\n                                    content: 'Generate For Dark Mode',\n                                }}\n                                isChecked={isDarkMode}\n                                onChange={onDarkModeChange}\n                                fieldId=\"isDarkMode\"\n                            />\n                            <ToggleSwitchField\n                                labelProps={{\n                                    content: 'Auto-Correct For Accessibility',\n                                }}\n                                isChecked={shouldAutoCorrectForA11y}\n                                onChange={onAutoCorrectForA11yChange}\n                                fieldId=\"shouldAutoCorrectForA11y\"\n                            />\n                            {/* <ToggleSwitchField\n                                labelProps={{\n                                    content:\n                                        'Use Minimum APCA Contrast For Text',\n                                }}\n                                isChecked={shouldUseMinimumAPCATextCompliance}\n                                onChange={onAPCAChange}\n                                fieldId=\"shouldUseMinimumAPCATextCompliance\"\n                            /> */}\n                        </DynamicFormRow>\n                    </FormLayoutSection>\n                </FormLayout>\n            </StickySection>\n        </StorySection>\n    );\n};\n\nexport default SectionForm;\n","import { List } from '@driponfleek/bankai-ui-lists';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport ColorDesignTokenListItem from '../../../../../sb-components/lists/ColorDesignTokenListItem';\n\n// TODO: Add Prop Types documentation with JSDocs\nconst SectionTokens = (props) => {\n    const {\n        baseCls,\n        sectionTitle,\n        headingLvl = 2,\n        tokensData = [],\n        children,\n    } = props;\n    const renderListItem = (item) => <ColorDesignTokenListItem {...item} />;\n\n    return (\n        <StorySection contextCls={`${baseCls}__tokens-section-container`}>\n            <SectionTitle headingLvl={headingLvl}>{sectionTitle}</SectionTitle>\n            {children && (\n                <div className={`${baseCls}__children-container`}>\n                    {children}\n                </div>\n            )}\n            <StorySection contextCls={`${baseCls}__token-list-container`}>\n                <List renderListItem={renderListItem} data={tokensData} />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionTokens;\n","import { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport SectionTokens from './SectionTokens';\nimport { getBtnTokensByState } from '../../utils/designTokenGenStoryUtils';\n\n// TODO: Add Prop Types documentation with JSDocs\nconst SectionButtonTokens = (props) => {\n    const { baseCls, sectionTitle, tokensData = [], children } = props;\n    const {\n        activeTokens = [],\n        focusTokens = [],\n        hoverTokens = [],\n        restingTokens = [],\n    } = getBtnTokensByState(tokensData);\n\n    return (\n        <StorySection contextCls={`${baseCls}__tokens-section-container`}>\n            <SectionTitle>{sectionTitle}</SectionTitle>\n            {children && (\n                <div className={`${baseCls}__children-container`}>\n                    {children}\n                </div>\n            )}\n            <SectionTokens\n                baseCls={baseCls}\n                sectionTitle=\"Resting State\"\n                headingLvl={3}\n                tokensData={restingTokens}\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                sectionTitle=\"Hover State\"\n                headingLvl={3}\n                tokensData={hoverTokens}\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                sectionTitle=\"Active State\"\n                headingLvl={3}\n                tokensData={activeTokens}\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                sectionTitle=\"Focus State\"\n                headingLvl={3}\n                tokensData={focusTokens}\n            />\n        </StorySection>\n    );\n};\n\nexport default SectionButtonTokens;\n","import { useReducer, useMemo } from 'react';\nimport { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport {\n    genConstToDotNotationMap,\n    BUTTON_STYLES,\n} from '@driponfleek/bankai-lib-theme-utils';\nimport { reducer } from '@driponfleek/bankai-lib-helper-utils';\nimport AvatarCompPreview from './components/design-token-gen/AvatarCompPreview';\nimport BadgeCompPreview from './components/design-token-gen/BadgeCompPreview';\nimport BannerCompPreview from './components/design-token-gen/BannerCompPreview';\nimport ButtonCompPreview from './components/design-token-gen/ButtonCompPreview';\nimport CalloutCompPreview from './components/design-token-gen/CalloutCompPreview';\nimport {\n    genTokens,\n    getTokensByCategory,\n} from './utils/designTokenGenStoryUtils';\nimport { STORY_SUB_TITLE } from './const/storyConst';\nimport {\n    FIELD_IDS_TO_VALUE_DEFAULTS as DEFAULTS,\n    FIELD_IDS,\n} from './const/designTokenGenConst';\nimport SectionForm from './sections/design-token-generator/SectionForm';\nimport SectionTokens from './sections/design-token-generator/SectionTokens';\nimport SectionButtonTokens from './sections/design-token-generator/SectionButtonTokens';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\n\n// Styles\nimport './styles/story-design-token-gen.scss';\n\nconst {\n    CORE_COLOR_NEUTRAL_SEED,\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n} = FIELD_IDS;\nconst constToTokenMap = genConstToDotNotationMap({\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n});\nconst tokenDropdownListData = [\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_PRIMARY],\n        text: 'Primary',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_SECONDARY],\n        text: 'Secondary',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_BRAND],\n        text: 'Brand',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_CANVAS_BRAND],\n        text: 'Canvas Brand',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_ACCENT_PRIMARY],\n        text: 'Accent (Primary)',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_ACCENT_SECONDARY],\n        text: 'Accent (Secondary)',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_ACCENT_TERTIARY],\n        text: 'Accent (Tertiary)',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_AFFIRMATIVE],\n        text: 'Affirmative',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_CAUTIONARY],\n        text: 'Cautionary',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_DESTRUCTIVE],\n        text: 'Destructive',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_ERROR],\n        text: 'Error',\n    },\n    {\n        id: constToTokenMap[SEMANTIC_COLOR_INFO],\n        text: 'Info',\n    },\n];\nconst btnStyleDropdownData = [\n    {\n        id: BUTTON_STYLES.FLAT,\n        text: 'Flat',\n    },\n    {\n        id: BUTTON_STYLES.GHOST,\n        text: 'Ghost',\n    },\n];\n\nconst initialState = {\n    [CORE_COLOR_NEUTRAL_SEED]: DEFAULTS[CORE_COLOR_NEUTRAL_SEED],\n    [SEMANTIC_COLOR_ACCENT_PRIMARY]: DEFAULTS[SEMANTIC_COLOR_ACCENT_PRIMARY],\n    [SEMANTIC_COLOR_ACCENT_SECONDARY]:\n        DEFAULTS[SEMANTIC_COLOR_ACCENT_SECONDARY],\n    [SEMANTIC_COLOR_ACCENT_TERTIARY]: DEFAULTS[SEMANTIC_COLOR_ACCENT_TERTIARY],\n    [SEMANTIC_COLOR_AFFIRMATIVE]: DEFAULTS[SEMANTIC_COLOR_AFFIRMATIVE],\n    [SEMANTIC_COLOR_BRAND]: DEFAULTS[SEMANTIC_COLOR_BRAND],\n    [SEMANTIC_COLOR_CAUTIONARY]: DEFAULTS[SEMANTIC_COLOR_CAUTIONARY],\n    [SEMANTIC_COLOR_CANVAS_BRAND]: DEFAULTS[SEMANTIC_COLOR_CANVAS_BRAND],\n    [SEMANTIC_COLOR_DESTRUCTIVE]: DEFAULTS[SEMANTIC_COLOR_DESTRUCTIVE],\n    [SEMANTIC_COLOR_ERROR]: DEFAULTS[SEMANTIC_COLOR_ERROR],\n    [SEMANTIC_COLOR_INFO]: DEFAULTS[SEMANTIC_COLOR_INFO],\n    [SEMANTIC_COLOR_PRIMARY]: DEFAULTS[SEMANTIC_COLOR_PRIMARY],\n    [SEMANTIC_COLOR_SECONDARY]: DEFAULTS[SEMANTIC_COLOR_SECONDARY],\n    avatarSourceColorToken: constToTokenMap[SEMANTIC_COLOR_CANVAS_BRAND],\n    badgeAffirmativeSourceColorToken:\n        constToTokenMap[SEMANTIC_COLOR_AFFIRMATIVE],\n    badgeCautionarySourceColorToken: constToTokenMap[SEMANTIC_COLOR_CAUTIONARY],\n    badgeDangerSourceColorToken: constToTokenMap[SEMANTIC_COLOR_ERROR],\n    badgeInfoSourceColorToken: constToTokenMap[SEMANTIC_COLOR_INFO],\n    bannerAffirmativeSourceColorToken:\n        constToTokenMap[SEMANTIC_COLOR_AFFIRMATIVE],\n    bannerCautionarySourceColorToken:\n        constToTokenMap[SEMANTIC_COLOR_CAUTIONARY],\n    bannerDangerSourceColorToken: constToTokenMap[SEMANTIC_COLOR_ERROR],\n    bannerInfoSourceColorToken: constToTokenMap[SEMANTIC_COLOR_INFO],\n    buttonPrimarySourceColorToken: constToTokenMap[SEMANTIC_COLOR_PRIMARY],\n    buttonPrimaryStyle: BUTTON_STYLES.FLAT,\n    buttonPrimaryDestructiveSourceColorToken:\n        constToTokenMap[SEMANTIC_COLOR_DESTRUCTIVE],\n    buttonPrimaryDestructiveStyle: BUTTON_STYLES.FLAT,\n    buttonSecondarySourceColorToken: constToTokenMap[SEMANTIC_COLOR_SECONDARY],\n    buttonSecondaryStyle: BUTTON_STYLES.GHOST,\n    buttonSecondaryDestructiveSourceColorToken:\n        constToTokenMap[SEMANTIC_COLOR_DESTRUCTIVE],\n    buttonSecondaryDestructiveStyle: BUTTON_STYLES.GHOST,\n    calloutAffirmativeSourceColorToken:\n        constToTokenMap[SEMANTIC_COLOR_AFFIRMATIVE],\n    calloutCautionarySourceColorToken:\n        constToTokenMap[SEMANTIC_COLOR_CAUTIONARY],\n    calloutDangerSourceColorToken: constToTokenMap[SEMANTIC_COLOR_ERROR],\n    calloutInfoSourceColorToken: constToTokenMap[SEMANTIC_COLOR_INFO],\n    isDarkMode: false,\n    shouldAutoCorrectForA11y: true,\n    // shouldUseMinimumAPCATextCompliance: true,\n};\n\nconst StoryDesignTokenGen = () => {\n    const baseCls = genSBBaseCls('design-token-generator');\n    const [fieldValues, dispatch] = useReducer(reducer, initialState);\n    // TODO: Pass dispatch to form and let it handle the state updates\n    const handleChange = (value, fieldId) => {\n        dispatch({ [fieldId]: value });\n    };\n    const handleDarkModeChange = (value, fieldId) => {\n        const { isDarkMode } = fieldValues;\n\n        dispatch({ [fieldId]: !isDarkMode });\n    };\n    const handleAutoCorrectForA11yChange = (value, fieldId) => {\n        const { shouldAutoCorrectForA11y } = fieldValues;\n\n        dispatch({ [fieldId]: !shouldAutoCorrectForA11y });\n    };\n\n    // TODO: APCA is the future, revisit once it is the standard.\n    // const handleAPCAChange = (value, fieldId) => {\n    //     const { shouldUseMinimumAPCATextCompliance } = fieldValues;\n\n    //     dispatch({ [fieldId]: !shouldUseMinimumAPCATextCompliance });\n    // };\n\n    // TODO: To improve performance here we need to have every section\n    // generate its own tokens and memoize them instead of doing all at once\n    const {\n        accordionTokens,\n        avatarTokens,\n        badgeTokens,\n        badgeAffirmativeTokens,\n        badgeCautionaryTokens,\n        badgeDangerTokens,\n        badgeInfoTokens,\n        bannerTokens,\n        bannerAffirmativeTokens,\n        bannerCautionaryTokens,\n        bannerDangerTokens,\n        bannerInfoTokens,\n        btnPrimaryTokens,\n        btnPrimaryDestructiveTokens,\n        btnSecondaryTokens,\n        btnSecondaryDestructiveTokens,\n        calloutAffirmativeTokens,\n        calloutCautionaryTokens,\n        calloutDangerTokens,\n        calloutInfoTokens,\n        dndDropzoneTokens,\n        formMenuTokens,\n        formToggleSwitchTokens,\n        formToggleTokens,\n        formTokens,\n        linkTokens,\n        loadingTokens,\n        modalTokens,\n        remainingTokens,\n        semanticTokens,\n        tabsTokens,\n        toasterAffirmativeTokens,\n        toasterCautionaryTokens,\n        toasterErrorTokens,\n        toasterInfoTokens,\n        tooltipTokens,\n    } = useMemo(\n        () => getTokensByCategory(genTokens(fieldValues)),\n        [fieldValues],\n    );\n    // console.log('fieldValues: ', fieldValues);\n\n    // TODO: Add Core Neutral Colors and move input from SectionForm to preview\n    // of components that are impacted by that change (ex. Banner, Badge, Callout)\n    // TODO: A lot of the preview props are common, see about defining once\n    // instead of every time.\n    // TODO: Variants need to be in constants instead of hard-coded\n    // TODO: Consider defining the source color token label this in the comp preview where possible\n    // TODO: Consider limiting the tokens available to certain components\n    // TODO: Change \"Error\" to \"Danger\"? (ex. SEMANTIC_COLOR_ERROR)\n    // TODO: Need to consider overall page design to make it more user-friendly.\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale(\n                'stories.everyone.designTokens.designTokenGenerator.title',\n            )}\n            subTitle={STORY_SUB_TITLE}\n        >\n            <SectionForm\n                baseCls={baseCls}\n                fieldValues={fieldValues}\n                onChange={handleChange}\n                onDarkModeChange={handleDarkModeChange}\n                onAutoCorrectForA11yChange={handleAutoCorrectForA11yChange}\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={semanticTokens}\n                sectionTitle=\"Semantic\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={accordionTokens}\n                sectionTitle=\"Accordion\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={avatarTokens}\n                sectionTitle=\"Avatar\"\n            >\n                <AvatarCompPreview\n                    baseCls={baseCls}\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={avatarTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Avatar Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.avatarSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeTokens}\n                sectionTitle=\"Badge\"\n            >\n                <BadgeCompPreview\n                    baseCls={baseCls}\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={badgeTokens}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeAffirmativeTokens}\n                sectionTitle=\"Badge (Affirmative)\"\n            >\n                <BadgeCompPreview\n                    baseCls={baseCls}\n                    variant=\"Affirmative\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={badgeAffirmativeTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Badge (Affirmative) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.badgeAffirmativeSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeCautionaryTokens}\n                sectionTitle=\"Badge (Cautionary)\"\n            >\n                <BadgeCompPreview\n                    baseCls={baseCls}\n                    variant=\"Cautionary\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={badgeCautionaryTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Badge (Cautionary) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.badgeCautionarySourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeDangerTokens}\n                sectionTitle=\"Badge (Danger)\"\n            >\n                <BadgeCompPreview\n                    baseCls={baseCls}\n                    variant=\"Danger\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={badgeDangerTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Badge (Danger) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.badgeDangerSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={badgeInfoTokens}\n                sectionTitle=\"Badge (Info)\"\n            >\n                <BadgeCompPreview\n                    baseCls={baseCls}\n                    variant=\"Info\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={badgeInfoTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Badge (Info) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.badgeInfoSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerTokens}\n                sectionTitle=\"Banner\"\n            >\n                <BannerCompPreview\n                    baseCls={baseCls}\n                    semanticTokens={semanticTokens}\n                    tokensData={bannerTokens}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerAffirmativeTokens}\n                sectionTitle=\"Banner (Affirmative)\"\n            >\n                <BannerCompPreview\n                    baseCls={baseCls}\n                    variant=\"Affirmative\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={bannerAffirmativeTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Banner (Affirmative) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.bannerAffirmativeSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerCautionaryTokens}\n                sectionTitle=\"Banner (Cautionary)\"\n            >\n                <BannerCompPreview\n                    baseCls={baseCls}\n                    variant=\"Cautionary\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={bannerCautionaryTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Banner (Cautionary) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.bannerCautionarySourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerDangerTokens}\n                sectionTitle=\"Banner (Danger)\"\n            >\n                <BannerCompPreview\n                    baseCls={baseCls}\n                    variant=\"Danger\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={bannerDangerTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Banner (Danger) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.bannerDangerSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={bannerInfoTokens}\n                sectionTitle=\"Banner (Info)\"\n            >\n                <BannerCompPreview\n                    baseCls={baseCls}\n                    variant=\"Info\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={bannerInfoTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Banner (Info) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.bannerInfoSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionButtonTokens\n                baseCls={baseCls}\n                tokensData={btnPrimaryTokens}\n                sectionTitle=\"Button (Primary)\"\n            >\n                <ButtonCompPreview\n                    baseCls={baseCls}\n                    variant=\"Primary\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={btnPrimaryTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        sourceTokenLabel: 'Button (Primary) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        sourceTokenValue:\n                            fieldValues.buttonPrimarySourceColorToken,\n                        styleLabel: 'Button (Primary) Style',\n                        styleOps: btnStyleDropdownData,\n                        styleValue: fieldValues.buttonPrimaryStyle,\n                    }}\n                />\n            </SectionButtonTokens>\n            <SectionButtonTokens\n                baseCls={baseCls}\n                tokensData={btnPrimaryDestructiveTokens}\n                sectionTitle=\"Button (Primary Destructive)\"\n            >\n                <ButtonCompPreview\n                    baseCls={baseCls}\n                    variant=\"Primary\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={btnPrimaryDestructiveTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        sourceTokenLabel:\n                            'Button (Primary Destructive) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        sourceTokenValue:\n                            fieldValues.buttonPrimaryDestructiveSourceColorToken,\n                        styleLabel: 'Button (Primary Destructive) Style',\n                        styleOps: btnStyleDropdownData,\n                        styleValue: fieldValues.buttonPrimaryDestructiveStyle,\n                    }}\n                    isDestructive\n                />\n            </SectionButtonTokens>\n            <SectionButtonTokens\n                baseCls={baseCls}\n                tokensData={btnSecondaryTokens}\n                sectionTitle=\"Button (Secondary)\"\n            >\n                <ButtonCompPreview\n                    baseCls={baseCls}\n                    variant=\"Secondary\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={btnSecondaryTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        sourceTokenLabel:\n                            'Button (Secondary) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        sourceTokenValue:\n                            fieldValues.buttonSecondarySourceColorToken,\n                        styleLabel: 'Button (Secondary) Style',\n                        styleOps: btnStyleDropdownData,\n                        styleValue: fieldValues.buttonSecondaryStyle,\n                    }}\n                />\n            </SectionButtonTokens>\n            <SectionButtonTokens\n                baseCls={baseCls}\n                tokensData={btnSecondaryDestructiveTokens}\n                sectionTitle=\"Button (Secondary Destructive)\"\n            >\n                <ButtonCompPreview\n                    baseCls={baseCls}\n                    variant=\"Secondary\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={btnSecondaryDestructiveTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        sourceTokenLabel:\n                            'Button (Secondary Destructive) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        sourceTokenValue:\n                            fieldValues.buttonSecondaryDestructiveSourceColorToken,\n                        styleLabel: 'Button (Secondary Destructive) Style',\n                        styleOps: btnStyleDropdownData,\n                        styleValue: fieldValues.buttonSecondaryDestructiveStyle,\n                    }}\n                    isDestructive\n                />\n            </SectionButtonTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={calloutAffirmativeTokens}\n                sectionTitle=\"Callout (Affirmative)\"\n            >\n                <CalloutCompPreview\n                    baseCls={baseCls}\n                    variant=\"Affirmative\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={calloutAffirmativeTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Callout (Affirmative) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.calloutAffirmativeSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={calloutCautionaryTokens}\n                sectionTitle=\"Callout (Cautionary)\"\n            >\n                <CalloutCompPreview\n                    baseCls={baseCls}\n                    variant=\"Cautionary\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={calloutCautionaryTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Callout (Cautionary) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.calloutCautionarySourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={calloutDangerTokens}\n                sectionTitle=\"Callout (Danger)\"\n            >\n                <CalloutCompPreview\n                    baseCls={baseCls}\n                    variant=\"Danger\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={calloutDangerTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Callout (Danger) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.calloutDangerSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={calloutInfoTokens}\n                sectionTitle=\"Callout (Info)\"\n            >\n                <CalloutCompPreview\n                    baseCls={baseCls}\n                    variant=\"Info\"\n                    isDarkMode={fieldValues.isDarkMode}\n                    semanticTokens={semanticTokens}\n                    tokensData={calloutInfoTokens}\n                    dispatch={dispatch}\n                    opsProps={{\n                        label: 'Callout (Info) Source Color Token',\n                        sourceTokenOps: tokenDropdownListData,\n                        value: fieldValues.calloutInfoSourceColorToken,\n                    }}\n                />\n            </SectionTokens>\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={dndDropzoneTokens}\n                sectionTitle=\"Drag & Drop (Dropzone)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={formTokens}\n                sectionTitle=\"Form\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={formToggleTokens}\n                sectionTitle=\"Form Checkboxes and Radios\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={formMenuTokens}\n                sectionTitle=\"Form Menus\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={formToggleSwitchTokens}\n                sectionTitle=\"Form Toggle Switch\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={linkTokens}\n                sectionTitle=\"Links\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={loadingTokens}\n                sectionTitle=\"Loading\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={modalTokens}\n                sectionTitle=\"Modals\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={tabsTokens}\n                sectionTitle=\"Tabs\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={toasterAffirmativeTokens}\n                sectionTitle=\"Toaster (Affirmative)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={toasterCautionaryTokens}\n                sectionTitle=\"Toaster (Cautionary)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={toasterErrorTokens}\n                sectionTitle=\"Toaster (Error)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={toasterInfoTokens}\n                sectionTitle=\"Toaster (Info)\"\n            />\n            <SectionTokens\n                baseCls={baseCls}\n                tokensData={tooltipTokens}\n                sectionTitle=\"Tooltips\"\n            />\n            {remainingTokens.length > 0 && (\n                <SectionTokens\n                    baseCls={baseCls}\n                    tokensData={remainingTokens}\n                    sectionTitle=\"Misc Tokens\"\n                />\n            )}\n        </StoryLayout>\n    );\n};\n\nexport default StoryDesignTokenGen;\n"],"names":["StickySection","PureComponent","__publicField","el","reqAniFrame","scrollingContainerDOM","modCls","distanceFromTop","height","isSlim","shouldBeSlim","scrollingContainerCSSClass","contextCls","children","jsx","cx","PropTypes","StickySection$1","getColorOnlyTokens","tokens","tokenKeys","colorTokens","index","data","tokenKey","genTokens","fieldValues","isDarkMode","shouldAutoCorrectForA11y","avatarSourceColorToken","badgeAffirmativeSourceColorToken","badgeCautionarySourceColorToken","badgeDangerSourceColorToken","badgeInfoSourceColorToken","bannerAffirmativeSourceColorToken","bannerCautionarySourceColorToken","bannerDangerSourceColorToken","bannerInfoSourceColorToken","buttonPrimarySourceColorToken","buttonPrimaryStyle","buttonPrimaryDestructiveSourceColorToken","buttonPrimaryDestructiveStyle","buttonSecondarySourceColorToken","buttonSecondaryStyle","buttonSecondaryDestructiveSourceColorToken","buttonSecondaryDestructiveStyle","calloutAffirmativeSourceColorToken","calloutCautionarySourceColorToken","calloutDangerSourceColorToken","calloutInfoSourceColorToken","fieldVals","presets","fieldValKeys","fieldValKey","fieldVal","massageConstToDotNotation","results","genDesignTokens","resultKeys","_a","_b","getTokensByCategory","tokensData","categorizedTokensData","tokenData","token","getBtnTokensByState","i","getCompTheme","theme","color","CompPreviewWithOps","props","semanticTokens","Ops","opsProps","baseCls","genSBBaseCls","hasTokens","genCSSVars","Helmet","ComponentPreview","DropdownField","IFLFormFieldComposer","Dropdown","SourceTokenOps","label","value","sourceTokenOps","onChange","FormLayout","FormLayoutSection","DynamicFormRow","AvatarCompPreview","dispatch","rest","handleChange","opsVal","useMemo","Avatar","getBadgePreviewComp","type","BadgeAffirmative","BadgeCautionary","BadgeDanger","BadgeInfo","Badge","BadgeCompPreview","variant","variantLowercase","valueKey","Comp","sourceTokenVal","previewProps","getPreviewComp","BannerAffirmative","BannerCautionary","BannerDanger","BannerInfo","Banner","getIcon","BankaiCircleCheck","BankaiTriangleAlert","BankaiCircleInfo","BankaiUser","BannerCompPreview","Icon","ButtonOps","sourceTokenLabel","sourceTokenValue","styleLabel","styleValue","styleOps","onSourceTokenChange","onStyleChange","jsxs","getButtonPreviewComp","ButtonPrimary","ButtonSecondary","Button","ButtonCompPreview","isDestructive","sourceTokenValueKey","styleValueKey","handleSourceTokenChange","handleStyleChange","styleVal","CalloutAffirmative","CalloutCautionary","CalloutDanger","CalloutInfo","Callout","CalloutCompPreview","SEMANTIC_COLOR_ACCENT_PRIMARY","SEMANTIC_COLOR_ACCENT_SECONDARY","SEMANTIC_COLOR_ACCENT_TERTIARY","SEMANTIC_COLOR_AFFIRMATIVE","SEMANTIC_COLOR_BRAND","SEMANTIC_COLOR_CAUTIONARY","SEMANTIC_COLOR_CANVAS_BRAND","SEMANTIC_COLOR_DESTRUCTIVE","SEMANTIC_COLOR_ERROR","SEMANTIC_COLOR_INFO","SEMANTIC_COLOR_PRIMARY","SEMANTIC_COLOR_SECONDARY","SEMANTIC_COLOR_TOKEN_NAMES","FIELD_IDS","CORE_COLOR_NEUTRAL_SEED","FIELD_IDS_TO_LABEL_MAP","FIELD_IDS_TO_VALUE_DEFAULTS","CORE_COLOR_NEUTRAL_SEED_DEFAULT","SEMANTIC_COLOR_TOKEN_DEFAULTS","DesignTokenColorPicker","fieldId","ColorPickerField","SectionForm","onAutoCorrectForA11yChange","onDarkModeChange","pickerCommonProps","StorySection","ToggleSwitchField","SectionTokens","sectionTitle","headingLvl","renderListItem","item","ColorDesignTokenListItem","SectionTitle","List","SectionButtonTokens","activeTokens","focusTokens","hoverTokens","restingTokens","constToTokenMap","genConstToDotNotationMap","tokenDropdownListData","btnStyleDropdownData","BUTTON_STYLES","initialState","DEFAULTS","StoryDesignTokenGen","useReducer","reducer","handleDarkModeChange","handleAutoCorrectForA11yChange","accordionTokens","avatarTokens","badgeTokens","badgeAffirmativeTokens","badgeCautionaryTokens","badgeDangerTokens","badgeInfoTokens","bannerTokens","bannerAffirmativeTokens","bannerCautionaryTokens","bannerDangerTokens","bannerInfoTokens","btnPrimaryTokens","btnPrimaryDestructiveTokens","btnSecondaryTokens","btnSecondaryDestructiveTokens","calloutAffirmativeTokens","calloutCautionaryTokens","calloutDangerTokens","calloutInfoTokens","dndDropzoneTokens","formMenuTokens","formToggleSwitchTokens","formToggleTokens","formTokens","linkTokens","loadingTokens","modalTokens","remainingTokens","tabsTokens","toasterAffirmativeTokens","toasterCautionaryTokens","toasterErrorTokens","toasterInfoTokens","tooltipTokens","StoryLayout","getLocale","STORY_SUB_TITLE"],"mappings":"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"}