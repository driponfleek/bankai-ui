{"version":3,"file":"ColorVariantsGenerator.stories-8e9b6bf5.js","sources":["../../stories/designers/working-with-color/sections/color-variant-generator/SectionForm.jsx","../../stories/designers/working-with-color/sections/color-variant-generator/SectionVariants.jsx","../../stories/designers/working-with-color/StoryColorVariantsGen.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport {\n    FormLayout,\n    FormLayoutSection,\n    DynamicFormRow,\n} from '@driponfleek/bankai-ui-layouts';\nimport { StorySection } from '@driponfleek/bankai-lib-storybook';\nimport ColorPickerField from '../../../../../sb-components/form-elements/ColorPickerField';\nimport ToggleSwitchField from '../../../../../sb-components/form-elements/ToggleSwitchField';\n\nconst SectionForm = (props) => {\n    const {\n        baseCls,\n        sourceColor,\n        shouldShowMaxVariants,\n        onColorChange,\n        onToggleChange,\n    } = props;\n\n    return (\n        <StorySection>\n            <FormLayout>\n                <FormLayoutSection>\n                    <DynamicFormRow\n                        contextCls={`${baseCls}__settings-container`}\n                    >\n                        <ColorPickerField\n                            value={sourceColor}\n                            color={sourceColor}\n                            labelProps={{ content: 'Source Color' }}\n                            onChange={onColorChange}\n                            isLeftAlignedLabel\n                        />\n                        <ToggleSwitchField\n                            isChecked={shouldShowMaxVariants}\n                            labelProps={{ content: 'Show Max Variants?' }}\n                            onChange={onToggleChange}\n                        />\n                    </DynamicFormRow>\n                </FormLayoutSection>\n            </FormLayout>\n        </StorySection>\n    );\n};\n\nSectionForm.defaultProps = {\n    shouldShowMaxVariants: true,\n    onColorChange: () => Promise.resolve(),\n    onToggleChange: () => Promise.resolve(),\n};\n\nSectionForm.propTypes = {\n    baseCls: PropTypes.string,\n    sourceColor: PropTypes.string,\n    shouldShowMaxVariants: PropTypes.bool,\n    onColorChange: PropTypes.func,\n    onToggleChange: PropTypes.func,\n};\n\nexport default SectionForm;\n","import PropTypes from 'prop-types';\nimport {\n    StorySection,\n    ColorVariantsList,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionVariants = (props) => {\n    const { contextCls, variants } = props;\n\n    return (\n        <StorySection>\n            <ColorVariantsList\n                contextCls={contextCls}\n                variants={variants}\n                shouldScrollList={false}\n            />\n        </StorySection>\n    );\n};\n\nSectionVariants.defaultProps = {\n    variants: [],\n};\n\nSectionVariants.propTypes = {\n    contextCls: PropTypes.string,\n    variants: PropTypes.arrayOf(\n        PropTypes.shape({\n            mainContent: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.element,\n            ]),\n            metaList: PropTypes.arrayOf(\n                PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n            ),\n            hasAlpha: PropTypes.bool,\n        }),\n    ),\n};\n\nexport default SectionVariants;\n","import { useState, useMemo } from 'react';\nimport { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport { CORE_COLOR_NEUTRAL_SEED_DEFAULT } from '@driponfleek/bankai-lib-theme-utils';\nimport { getColorVariants } from './utils/colorVariantsGenStoryUtils';\nimport { STORY_SUB_TITLE } from './const/storyConst';\nimport SectionCVGForm from './sections/color-variant-generator/SectionForm';\nimport SectionCVGVariants from './sections/color-variant-generator/SectionVariants';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\nimport { getLocale } from '../../../utils/localeUtils';\n\n// Styles\nimport './styles/story-color-variants-gen.scss';\n\nconst StoryColorVariantsGen = () => {\n    const [sourceColor, setSourceColor] = useState(\n        CORE_COLOR_NEUTRAL_SEED_DEFAULT,\n    );\n    const [shouldShowMaxVariants, setShouldShowMaxVariants] = useState(true);\n    const baseCls = genSBBaseCls('color-variant-generator');\n    const massagedVariants = useMemo(\n        () => getColorVariants(sourceColor, shouldShowMaxVariants ? 1 : 5),\n        [sourceColor, shouldShowMaxVariants],\n    );\n    const handleToggleChange = () => {\n        setShouldShowMaxVariants(!shouldShowMaxVariants);\n    };\n    const handleColorChange = (val) => {\n        setSourceColor(val);\n    };\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale(\n                'stories.designers.workingWithColor.colorVariantsGenerator.title',\n            )}\n            subTitle={STORY_SUB_TITLE}\n        >\n            <SectionCVGForm\n                baseCls={baseCls}\n                sourceColor={sourceColor}\n                shouldShowMaxVariants={shouldShowMaxVariants}\n                onColorChange={handleColorChange}\n                onToggleChange={handleToggleChange}\n            />\n            <SectionCVGVariants\n                contextCls={`${baseCls}__variants-list`}\n                variants={massagedVariants}\n            />\n        </StoryLayout>\n    );\n};\n\nexport default StoryColorVariantsGen;\n"],"names":["SectionForm","props","baseCls","sourceColor","shouldShowMaxVariants","onColorChange","onToggleChange","jsx","StorySection","FormLayout","FormLayoutSection","jsxs","DynamicFormRow","ColorPickerField","ToggleSwitchField","PropTypes","SectionVariants","contextCls","variants","ColorVariantsList","StoryColorVariantsGen","setSourceColor","useState","CORE_COLOR_NEUTRAL_SEED_DEFAULT","setShouldShowMaxVariants","genSBBaseCls","massagedVariants","useMemo","getColorVariants","handleToggleChange","handleColorChange","val","StoryLayout","getLocale","STORY_SUB_TITLE","SectionCVGForm","SectionCVGVariants"],"mappings":"i/CAUA,MAAAA,EAAAC,GAAA,CACA,KAAA,CACA,QAAAC,EACA,YAAAC,EACA,sBAAAC,EACA,cAAAC,EACA,eAAAC,CACA,EAAAL,EAEA,OACAM,EAAAC,EAAA,CACA,SAAAD,EAAAE,EAAA,CACA,WAAAC,EACA,CAAA,SAAAC,EAAAC,EAAA,CACA,WAAA,GAAAV,CAAA,uBAEA,SAAA,CAAAK,EAAAM,EAAA,CACA,MAAAV,EACA,MAAAA,EACA,WAAA,CAAA,QAAA,cAAA,EACA,SAAAE,EACA,mBAAA,EAAA,CACA,EACAE,EAAAO,EAAA,CACA,UAAAV,EACA,WAAA,CAAA,QAAA,oBAAA,EACA,SAAAE,CAAA,CACA,CAAA,CAAA,CAAA,EAEA,EACA,CACA,CAAA,CAEA,EAEAN,EAAA,aAAA,CACA,sBAAA,GACA,cAAA,IAAA,QAAA,QAAA,EACA,eAAA,IAAA,QAAA,QAAA,CACA,EAEAA,EAAA,UAAA,CACA,QAAAe,EAAA,OACA,YAAAA,EAAA,OACA,sBAAAA,EAAA,KACA,cAAAA,EAAA,KACA,eAAAA,EAAA,IACA,wiBCnDA,MAAAC,EAAAf,GAAA,CACA,KAAA,CAAA,WAAAgB,EAAA,SAAAC,CAAA,EAAAjB,EAEA,SACAO,EACA,CAAA,SAAAD,EAAAY,EAAA,CACA,WAAAF,EACA,SAAAC,EACA,iBAAA,EAAA,CAEA,CAAA,CAAA,CAEA,EAEAF,EAAA,aAAA,CACA,SAAA,CAAA,CACA,EAEAA,EAAA,UAAA,CACA,WAAAD,EAAA,OACA,SAAAA,EAAA,QACAA,EAAA,MAAA,CACA,YAAAA,EAAA,UAAA,CACAA,EAAA,OACAA,EAAA,OAAA,CACA,EACA,SAAAA,EAAA,QACAA,EAAA,UAAA,CAAAA,EAAA,OAAAA,EAAA,OAAA,CAAA,CACA,EACA,SAAAA,EAAA,IAAA,CACA,CACA,CACA,seCzBA,MAAAK,EAAA,IAAA,CACA,KAAA,CAAAjB,EAAAkB,CAAA,EAAAC,EAAA,SACAC,CAAA,EAEA,CAAAnB,EAAAoB,CAAA,EAAAF,WAAA,EAAA,EACApB,EAAAuB,EAAA,yBAAA,EACAC,EAAAC,EAAA,QACA,IAAAC,EAAAzB,EAAAC,EAAA,EAAA,CAAA,EACA,CAAAD,EAAAC,CAAA,CAAA,EAEAyB,EAAA,IAAA,CACAL,EAAA,CAAApB,CAAA,CAAA,EAEA0B,EAAAC,GAAA,CACAV,EAAAU,CAAA,CAAA,EAIA,OAAApB,EAAAqB,EAAA,CACA,WAAA9B,EACA,MAAA+B,EACA,iEACA,EACA,SAAAC,EAEA,SAAA,CAAA3B,EAAA4B,EAAA,CACA,QAAAjC,EACA,YAAAC,EACA,sBAAAC,EACA,cAAA0B,EACA,eAAAD,CAAA,CACA,EACAtB,EAAA6B,EAAA,CACA,WAAA,GAAAlC,CAAA,kBACA,SAAAwB,CAAA,CACA,CAAA,CAAA,CAAA,CAGA;;;;;;;;;;;;;;"}