{"version":3,"file":"LoadingFlow.stories-6d074248.js","sources":["../../../components/loading/src/LoadingErrorState.jsx","../../../components/loading/src/utils/loadingFlowUtils.js","../../../components/loading/src/LoadingFlow.jsx","../../stories/components/loading/sections/loading-flow/SectionPlayground.jsx","../../stories/components/loading/StoryLoadingFlow.jsx","../../stories/components/loading/args/loadingFlowArgs.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { CalloutDanger } from '@driponfleek/bankai-ui-callouts';\n\n// Styles\nimport './styles/loading-state.scss';\n\nconst LoadingErrorState = (props) => {\n    const { contextCls, renderIcon, ...rest } = props;\n    const baseCls = 'bankai-loading-error-state';\n\n    return <CalloutDanger {...rest} contextCls={cx(baseCls, contextCls)} />;\n};\n\nLoadingErrorState.propTypes = {\n    contextCls: PropTypes.string,\n    title: PropTypes.string,\n    msg: PropTypes.string,\n    renderIcon: PropTypes.func,\n};\n\nexport default LoadingErrorState;\n","export const getShouldRenderLoading = (props) => {\n    const { isLoading, hasError } = props;\n\n    return isLoading && !hasError;\n};\n\nexport const getShouldRenderError = (props) => {\n    const { isLoading, hasError } = props;\n\n    return !isLoading && hasError;\n};\n\nexport const getShouldRenderContent = (props) => {\n    const { isLoading, hasError } = props;\n\n    return !isLoading && !hasError;\n};\n","import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport LoadingErrorState from './LoadingErrorState';\nimport LoadingState from './LoadingState';\n\n// Utils\nimport {\n    getShouldRenderError,\n    getShouldRenderLoading,\n    getShouldRenderContent,\n} from './utils/loadingFlowUtils';\n\nconst LoadingFlow = (props) => {\n    const {\n        contextCls,\n        errorStateProps,\n        loadingStateProps,\n        renderErrorState,\n        renderLoadingState,\n        children,\n        ...rest\n    } = props;\n    const baseCls = 'bankai-loading-flow';\n    const shouldRenderLoadingState = getShouldRenderLoading(rest);\n    const shouldRenderErrorState = getShouldRenderError(rest);\n    const shouldRenderContent = getShouldRenderContent(rest);\n\n    return (\n        <Fragment>\n            {shouldRenderLoadingState &&\n                renderLoadingState({\n                    ...loadingStateProps,\n                    contextCls: cx(\n                        baseCls,\n                        `${baseCls}--loading-state`,\n                        contextCls,\n                    ),\n                })}\n            {shouldRenderErrorState &&\n                renderErrorState({\n                    ...errorStateProps,\n                    contextCls: cx(\n                        baseCls,\n                        `${baseCls}--error-state`,\n                        contextCls,\n                    ),\n                })}\n            {shouldRenderContent && children}\n        </Fragment>\n    );\n};\n\nLoadingFlow.defaultProps = {\n    hasError: false,\n    isLoading: true,\n    errorStateProps: {},\n    loadingStateProps: {},\n    renderErrorState: LoadingErrorState,\n    renderLoadingState: LoadingState,\n};\n\nLoadingFlow.propTypes = {\n    contextCls: PropTypes.string,\n    hasError: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    errorStateProps: PropTypes.shape({\n        msg: PropTypes.string,\n        title: PropTypes.string,\n    }),\n    loadingStateProps: PropTypes.shape({\n        msg: PropTypes.string,\n        title: PropTypes.string,\n    }),\n    renderLoadingState: PropTypes.func,\n    renderErrorState: PropTypes.func,\n};\n\nexport default LoadingFlow;\n","import { LoadingFlow } from '@driponfleek/bankai-ui-loading';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    ComponentPreview,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionPlayground = (props) => {\n    return (\n        <StorySection>\n            <ComponentPreview shouldCheckA11Y>\n                <LoadingFlow {...props}>\n                    <Paragraph>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                        Nulla auctor justo sit amet varius malesuada. Duis\n                        tempor a nibh nec convallis. Praesent iaculis vulputate\n                        risus, a condimentum massa sollicitudin sit amet. Fusce\n                        pretium, diam in eleifend tincidunt, eros lorem euismod\n                        turpis, vitae vehicula ante quam nec nibh. Mauris ut\n                        purus eu ligula aliquet congue vitae id lorem. Curabitur\n                        in enim iaculis, malesuada ligula interdum, tempor\n                        lorem. Sed pulvinar augue velit, at mattis magna lacinia\n                        in. Phasellus accumsan maximus urna vehicula vulputate.\n                        Nam tincidunt tristique tortor, id pulvinar nisi\n                        hendrerit id.\n                    </Paragraph>\n                </LoadingFlow>\n            </ComponentPreview>\n        </StorySection>\n    );\n};\n\nexport default SectionPlayground;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport { STORY_SUB_TITLE, PKG_JSON } from './const/storyConst';\nimport SectionPlayground from './sections/loading-flow/SectionPlayground';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\n\nconst StoryLoadingFlow = (props) => {\n    const baseCls = genSBBaseCls('loading-flow');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            pkgVer={PKG_JSON.version}\n            title={getLocale('stories.components.loading.loadingFlow.title')}\n            subTitle={STORY_SUB_TITLE}\n        >\n            <SectionPlayground {...props} />\n        </StoryLayout>\n    );\n};\n\nexport default StoryLoadingFlow;\n","import { boolArg, shapeArg, funcArg } from '@driponfleek/bankai-lib-storybook';\nimport { contextClsArgType, contextClsArg } from '../../../../args/sharedArgs';\n\nexport const args = {\n    ...contextClsArg,\n    isLoading: true,\n    hasError: false,\n    errorStateProps: {\n        msg: 'Please try again.',\n        title: 'Something Went Wrong',\n    },\n    loadingStateProps: {\n        msg: 'Please wait...',\n        title: 'Loading',\n    },\n};\n\nexport const argTypes = {\n    ...contextClsArgType,\n    ...boolArg({\n        // description: '',\n        propName: 'hasError',\n    }),\n    ...boolArg({\n        // description: '',\n        propName: 'isLoading',\n    }),\n    ...shapeArg({\n        // description: '',\n        propName: 'errorStateProps',\n    }),\n    ...shapeArg({\n        // description: '',\n        propName: 'loadingStateProps',\n    }),\n    ...funcArg({\n        description: `Render function for rendering your own loading state UI instead of the default one.`,\n        propName: 'renderLoadingState',\n    }),\n    ...funcArg({\n        description: `Render function for rendering your own error state UI instead of the default one.`,\n        propName: 'renderErrorState',\n    }),\n};\n"],"names":["LoadingErrorState","props","contextCls","renderIcon","rest","jsx","CalloutDanger","cx","PropTypes","LoadingErrorState$1","getShouldRenderLoading","isLoading","hasError","getShouldRenderError","getShouldRenderContent","LoadingFlow","errorStateProps","loadingStateProps","renderErrorState","renderLoadingState","children","baseCls","shouldRenderLoadingState","shouldRenderErrorState","shouldRenderContent","Fragment","LoadingState","BankaiLoadingFlow","SectionPlayground","StorySection","ComponentPreview","Paragraph","StoryLoadingFlow","genSBBaseCls","StoryLayout","PKG_JSON","getLocale","STORY_SUB_TITLE","args","contextClsArg","argTypes","contextClsArgType","boolArg","shapeArg","funcArg"],"mappings":"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"}