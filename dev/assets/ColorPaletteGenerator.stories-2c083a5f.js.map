{"version":3,"file":"ColorPaletteGenerator.stories-2c083a5f.js","sources":["../../stories/designers/working-with-color/utils/colorPaletteGenStoryUtils.js","../../stories/designers/working-with-color/components/StatusColorPaletteListItem.jsx","../../stories/designers/working-with-color/sections/color-palette-generator/SectionStatusPalette.jsx","../../stories/designers/working-with-color/components/HarmonyColorPaletteListItem.jsx","../../stories/designers/working-with-color/sections/color-palette-generator/SectionPalette.jsx","../../stories/designers/working-with-color/components/ColorPaletteGenSwatchMenuOp.jsx","../../stories/designers/working-with-color/components/ColorPaletteGenSwatch.jsx","../../stories/designers/working-with-color/sections/color-palette-generator/SectionPaletteChoices.jsx","../../stories/designers/working-with-color/StoryColorPaletteGenerator.jsx"],"sourcesContent":["import {\n    COLOR_HARMONIES,\n    genColorMetadata,\n} from '@driponfleek/bankai-lib-color-utils';\nimport { SEMANTIC_COLOR_TOKEN_NAMES } from '@driponfleek/bankai-lib-theme-utils';\nimport { getColorSwatchData } from './colorVariantsGenStoryUtils';\n\nconst {\n    ANALOGOUS,\n    COMPOUND,\n    MONOCHROMATIC,\n    SHADES,\n    SPLIT_COMPLEMENTARY,\n    TINTS,\n    TONES,\n} = COLOR_HARMONIES;\nconst {\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n} = SEMANTIC_COLOR_TOKEN_NAMES;\nconst harmoniesWithOffset = [ANALOGOUS, COMPOUND, SPLIT_COMPLEMENTARY];\nconst harmoniesWithNumberOfColors = [MONOCHROMATIC, SHADES, TINTS, TONES];\n\nexport const convertScreamingSnakeToTitleCase = (str) =>\n    (str ?? '')\n        .toLowerCase()\n        .split('_')\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n\nexport const initialState = {\n    baseColor: '#006fa3',\n    harmony: ANALOGOUS,\n    numberOfColors: 5,\n    offset: 30,\n};\n\nexport const initialPaletteState = {\n    [SEMANTIC_COLOR_ACCENT_PRIMARY]: undefined,\n    [SEMANTIC_COLOR_ACCENT_SECONDARY]: undefined,\n    [SEMANTIC_COLOR_ACCENT_TERTIARY]: undefined,\n    [SEMANTIC_COLOR_AFFIRMATIVE]: undefined,\n    [SEMANTIC_COLOR_BRAND]: undefined,\n    [SEMANTIC_COLOR_CANVAS_BRAND]: undefined,\n    [SEMANTIC_COLOR_CAUTIONARY]: undefined,\n    [SEMANTIC_COLOR_DESTRUCTIVE]: undefined,\n    [SEMANTIC_COLOR_ERROR]: undefined,\n    [SEMANTIC_COLOR_INFO]: undefined,\n    [SEMANTIC_COLOR_PRIMARY]: undefined,\n    [SEMANTIC_COLOR_SECONDARY]: undefined,\n    isDestructiveSameAsError: true,\n    isPrimarySameAsBrand: true,\n};\n\nexport const readableColorHarmoniesText = Object.keys(COLOR_HARMONIES).reduce(\n    (acc, HARMONY) => {\n        return {\n            ...acc,\n            [HARMONY]: convertScreamingSnakeToTitleCase(HARMONY),\n        };\n    },\n    {},\n);\n\nexport const harmonyDropdownOps = Object.keys(COLOR_HARMONIES).map(\n    (HARMONY) => ({\n        id: HARMONY,\n        text: readableColorHarmoniesText[HARMONY],\n    }),\n);\n\nexport const getColorPaletteListData = (colors = []) =>\n    colors.map((color) => getColorSwatchData(genColorMetadata(color)));\n\nexport const getShouldShowOffset = (harmony) =>\n    harmoniesWithOffset.includes(harmony);\n\nexport const getShouldShowNumberOfColors = (harmony) =>\n    harmoniesWithNumberOfColors.includes(harmony);\n","import ColorDesignTokenListItem from '../../../../sb-components/lists/ColorDesignTokenListItem';\n\nconst StatusColorPaletteListItem = (props) => {\n    const { color, mainContent } = props ?? {};\n\n    return <ColorDesignTokenListItem token={mainContent} color={color} />;\n};\n\nexport default StatusColorPaletteListItem;\n","import {\n    StorySection,\n    SectionTitle,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport StatusColorPaletteListItem from '../../components/StatusColorPaletteListItem';\nimport ColorTokenTileList from '../../../../../sb-components/lists/ColorTokenTileList';\n\n// Styles\nimport './styles/section-palette.scss';\n\nconst SectionStatusPalette = (props) => {\n    const { data = [] } = props;\n    const baseCls = genSBBaseCls('section-color-palette');\n\n    return (\n        <StorySection contextCls={baseCls}>\n            <SectionTitle>Status And Informative</SectionTitle>\n            <ColorTokenTileList\n                renderListItem={StatusColorPaletteListItem}\n                data={data}\n            />\n        </StorySection>\n    );\n};\n\nexport default SectionStatusPalette;\n","import ColorDesignTokenListItem from '../../../../sb-components/lists/ColorDesignTokenListItem';\n\nconst HarmonyColorPaletteListItem = (props) => {\n    const { color } = props ?? {};\n\n    return (\n        <ColorDesignTokenListItem\n            token={color}\n            color={color}\n            shouldShowMeta={false}\n        />\n    );\n};\n\nexport default HarmonyColorPaletteListItem;\n","import {\n    StorySection,\n    SectionTitle,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport HarmonyColorPaletteListItem from '../../components/HarmonyColorPaletteListItem';\nimport ColorTokenTileList from '../../../../../sb-components/lists/ColorTokenTileList';\n\n// Styles\nimport './styles/section-palette.scss';\n\nconst SectionPalette = (props) => {\n    const { listData = [] } = props;\n    const baseCls = genSBBaseCls('section-color-palette');\n\n    return (\n        <StorySection contextCls={baseCls}>\n            <SectionTitle>Harmony Colors</SectionTitle>\n            <ColorTokenTileList\n                data={listData}\n                renderListItem={HarmonyColorPaletteListItem}\n            />\n        </StorySection>\n    );\n};\n\nexport default SectionPalette;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport './styles/color-palette-gen-swatch-menu-op.scss';\n\nconst ColorPaletteGenSwatchMenuOp = (props) => {\n    const { value } = props ?? {};\n    const baseCls = genSBBaseCls('color-palette-gen-swatch-menu-op');\n\n    return (\n        <span className={baseCls}>\n            <span\n                className={`${baseCls}__swatch`}\n                style={{ backgroundColor: value }}\n            />\n            <span className={`${baseCls}__value`}>{value}</span>\n        </span>\n    );\n};\n\nexport default ColorPaletteGenSwatchMenuOp;\n","import { ColorSwatch, genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport { IFLFormFieldComposer } from '@driponfleek/bankai-ui-form-elements';\nimport { Dropdown } from '@driponfleek/bankai-ui-form-elements-rw';\nimport ColorPaletteGenSwatchMenuOp from './ColorPaletteGenSwatchMenuOp';\nimport { convertScreamingSnakeToTitleCase } from '../utils/colorPaletteGenStoryUtils';\n\n// Styles\nimport './styles/color-palette-gen-swatch.scss';\n\nconst DropdownInput = IFLFormFieldComposer(Dropdown);\n\nconst ColorPaletteGenSwatch = (props) => {\n    const {\n        color,\n        token = '',\n        isDisabled = false,\n        options = [],\n        onChange = () => Promise.resolve(),\n    } = props;\n    const baseCls = genSBBaseCls('color-palette-gen-swatch');\n    const labelText = convertScreamingSnakeToTitleCase(\n        token.replace('SEMANTIC_COLOR_', ''),\n    );\n\n    const handleChange = (value) => {\n        onChange({ token, value });\n    };\n\n    return (\n        <ColorSwatch contextCls={baseCls} color={color} isCard>\n            <DropdownInput\n                labelProps={{ content: labelText }}\n                data={options}\n                value={color}\n                isDisabled={isDisabled}\n                renderListItem={ColorPaletteGenSwatchMenuOp}\n                onChange={handleChange}\n            />\n        </ColorSwatch>\n    );\n};\n\nexport default ColorPaletteGenSwatch;\n","import { useReducer } from 'react';\nimport { reducer } from '@driponfleek/bankai-lib-helper-utils';\nimport {\n    FormFieldComposer,\n    Fieldset,\n    Checkbox,\n    FORM_FIELD_COMP_VARIANTS,\n} from '@driponfleek/bankai-ui-form-elements';\nimport {\n    FormLayout,\n    FormLayoutSection,\n    DynamicFormRow,\n} from '@driponfleek/bankai-ui-layouts';\nimport { SEMANTIC_COLOR_TOKEN_NAMES } from '@driponfleek/bankai-lib-theme-utils';\nimport {\n    StorySection,\n    SectionTitle,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport { initialPaletteState } from '../../utils/colorPaletteGenStoryUtils';\nimport ColorPaletteGenSwatch from '../../components/ColorPaletteGenSwatch';\n\n// Styles\nimport './styles/section-palette-choices.scss';\n\nconst { INLINE_RIGHT } = FORM_FIELD_COMP_VARIANTS;\nconst CheckboxInput = FormFieldComposer(Checkbox);\nconst {\n    SEMANTIC_COLOR_ACCENT_PRIMARY,\n    SEMANTIC_COLOR_ACCENT_SECONDARY,\n    SEMANTIC_COLOR_ACCENT_TERTIARY,\n    SEMANTIC_COLOR_AFFIRMATIVE,\n    SEMANTIC_COLOR_BRAND,\n    SEMANTIC_COLOR_CANVAS_BRAND,\n    SEMANTIC_COLOR_CAUTIONARY,\n    SEMANTIC_COLOR_DESTRUCTIVE,\n    SEMANTIC_COLOR_ERROR,\n    SEMANTIC_COLOR_INFO,\n    SEMANTIC_COLOR_PRIMARY,\n    SEMANTIC_COLOR_SECONDARY,\n} = SEMANTIC_COLOR_TOKEN_NAMES;\n\nconst SectionPaletteChoices = (props) => {\n    const { colors = [], statusColors = [] } = props;\n    const baseCls = genSBBaseCls('color-palette-gen-choices');\n    const [fieldValues, dispatch] = useReducer(reducer, initialPaletteState);\n    const { isPrimarySameAsBrand, isDestructiveSameAsError } = fieldValues;\n\n    // TODO: Need a download button for grabbing these once picked to upload to\n    // the design token generator\n    const handleIsPrimarySameAsBrandChange = () => {\n        const newVal = !isPrimarySameAsBrand;\n        const updates = { isPrimarySameAsBrand: newVal };\n\n        if (newVal) {\n            updates[SEMANTIC_COLOR_PRIMARY] = fieldValues[SEMANTIC_COLOR_BRAND];\n        }\n\n        dispatch(updates);\n    };\n\n    const handleDestructiveSameAsErrorChange = () => {\n        const newVal = !isDestructiveSameAsError;\n        const updates = { isDestructiveSameAsError: newVal };\n\n        if (newVal) {\n            updates[SEMANTIC_COLOR_DESTRUCTIVE] =\n                fieldValues[SEMANTIC_COLOR_ERROR];\n        }\n\n        dispatch(updates);\n    };\n\n    const handleChange = (params) => {\n        const { token, value } = params;\n        const updates = { [token]: value };\n\n        if (token === SEMANTIC_COLOR_BRAND && isPrimarySameAsBrand) {\n            updates[SEMANTIC_COLOR_PRIMARY] = value;\n        }\n\n        if (token === SEMANTIC_COLOR_ERROR && isDestructiveSameAsError) {\n            updates[SEMANTIC_COLOR_DESTRUCTIVE] = value;\n        }\n\n        dispatch(updates);\n    };\n\n    return (\n        <StorySection contextCls={baseCls}>\n            <SectionTitle>Palette Choices</SectionTitle>\n            <FormLayout>\n                <FormLayoutSection>\n                    <DynamicFormRow>\n                        <CheckboxInput\n                            labelProps={{ content: 'Primary Is Same As Brand' }}\n                            isChecked={isPrimarySameAsBrand}\n                            onChange={handleIsPrimarySameAsBrandChange}\n                            variant={INLINE_RIGHT}\n                        />\n                        <CheckboxInput\n                            labelProps={{\n                                content: 'Destructive Is Same As Error',\n                            }}\n                            isChecked={isDestructiveSameAsError}\n                            onChange={handleDestructiveSameAsErrorChange}\n                            variant={INLINE_RIGHT}\n                        />\n                    </DynamicFormRow>\n                </FormLayoutSection>\n                <FormLayoutSection>\n                    <Fieldset legend=\"Main\">\n                        <DynamicFormRow>\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_BRAND}\n                                options={colors}\n                                onChange={handleChange}\n                                color={fieldValues[SEMANTIC_COLOR_BRAND]}\n                            />\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_PRIMARY}\n                                options={colors}\n                                onChange={handleChange}\n                                color={fieldValues[SEMANTIC_COLOR_PRIMARY]}\n                                isDisabled={isPrimarySameAsBrand}\n                            />\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_SECONDARY}\n                                options={colors}\n                                onChange={handleChange}\n                                color={fieldValues[SEMANTIC_COLOR_SECONDARY]}\n                            />\n                        </DynamicFormRow>\n                    </Fieldset>\n                </FormLayoutSection>\n                <FormLayoutSection>\n                    <Fieldset legend=\"Accents and Canvas (Brand)\">\n                        <DynamicFormRow>\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_ACCENT_PRIMARY}\n                                options={colors}\n                                onChange={handleChange}\n                                color={\n                                    fieldValues[SEMANTIC_COLOR_ACCENT_PRIMARY]\n                                }\n                            />\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_ACCENT_SECONDARY}\n                                options={colors}\n                                onChange={handleChange}\n                                color={\n                                    fieldValues[SEMANTIC_COLOR_ACCENT_SECONDARY]\n                                }\n                            />\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_ACCENT_TERTIARY}\n                                options={colors}\n                                onChange={handleChange}\n                                color={\n                                    fieldValues[SEMANTIC_COLOR_ACCENT_TERTIARY]\n                                }\n                            />\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_CANVAS_BRAND}\n                                options={colors}\n                                onChange={handleChange}\n                                color={fieldValues[SEMANTIC_COLOR_CANVAS_BRAND]}\n                            />\n                        </DynamicFormRow>\n                    </Fieldset>\n                </FormLayoutSection>\n                <FormLayoutSection>\n                    <Fieldset legend=\"Status and Informative\">\n                        <DynamicFormRow>\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_AFFIRMATIVE}\n                                options={[statusColors.affirmative]}\n                                onChange={handleChange}\n                                color={fieldValues[SEMANTIC_COLOR_AFFIRMATIVE]}\n                            />\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_CAUTIONARY}\n                                options={[statusColors.cautionary]}\n                                onChange={handleChange}\n                                color={fieldValues[SEMANTIC_COLOR_CAUTIONARY]}\n                            />\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_ERROR}\n                                options={[statusColors.error]}\n                                onChange={handleChange}\n                                color={fieldValues[SEMANTIC_COLOR_ERROR]}\n                            />\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_DESTRUCTIVE}\n                                options={[statusColors.error, ...colors]}\n                                onChange={handleChange}\n                                color={fieldValues[SEMANTIC_COLOR_DESTRUCTIVE]}\n                                isDisabled={isDestructiveSameAsError}\n                            />\n                            <ColorPaletteGenSwatch\n                                token={SEMANTIC_COLOR_INFO}\n                                options={[statusColors.info, ...colors]}\n                                onChange={handleChange}\n                                color={fieldValues[SEMANTIC_COLOR_INFO]}\n                            />\n                        </DynamicFormRow>\n                    </Fieldset>\n                </FormLayoutSection>\n            </FormLayout>\n        </StorySection>\n    );\n};\n\nexport default SectionPaletteChoices;\n","import { useMemo, useReducer } from 'react';\nimport { reducer } from '@driponfleek/bankai-lib-helper-utils';\nimport { IFLFormFieldComposer } from '@driponfleek/bankai-ui-form-elements';\nimport {\n    Dropdown,\n    NumberPicker,\n} from '@driponfleek/bankai-ui-form-elements-rw';\nimport { StorySection, genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport {\n    genColorMetadata,\n    genHarmonyColors,\n} from '@driponfleek/bankai-lib-color-utils';\nimport { generateStatusPalette } from '@driponfleek/bankai-lib-theme-utils';\nimport { DynamicFormRow } from '@driponfleek/bankai-ui-layouts';\n// import { v4 as uuidv4 } from 'uuid';\nimport { getColorSwatchData } from './utils/colorVariantsGenStoryUtils';\nimport {\n    getColorPaletteListData,\n    getShouldShowNumberOfColors,\n    getShouldShowOffset,\n    harmonyDropdownOps,\n    initialState,\n} from './utils/colorPaletteGenStoryUtils';\nimport { STORY_SUB_TITLE } from './const/storyConst';\nimport SectionStatusPalette from './sections/color-palette-generator/SectionStatusPalette';\nimport SectionPalette from './sections/color-palette-generator/SectionPalette';\nimport SectionPaletteChoices from './sections/color-palette-generator/SectionPaletteChoices';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\nimport ColorPickerField from '../../../sb-components/form-elements/ColorPickerField';\n\n// Styles\nimport './styles/story-color-palette-gen.scss';\n\nconst DropdownInput = IFLFormFieldComposer(Dropdown);\nconst NumberPickerInput = IFLFormFieldComposer(NumberPicker);\n\nconst StoryColorPaletteGenerator = () => {\n    const baseCls = genSBBaseCls('color-palette-gen');\n    const [fieldValues, dispatch] = useReducer(reducer, initialState);\n    const { baseColor, harmony, numberOfColors, offset } = fieldValues;\n    const shouldShowNumberOfColors = getShouldShowNumberOfColors(harmony);\n    const shouldShowOffset = getShouldShowOffset(harmony);\n    // TODO: Need to add Brewer stuff for data vis.\n    // When doing Brewer need to hide palette choices\n    const harmonyColors = useMemo(\n        () =>\n            genHarmonyColors(harmony, {\n                baseHex: baseColor,\n                numberOfColors,\n                offset,\n            }),\n        [harmony, baseColor, numberOfColors, offset],\n    );\n    const harmonyListData = useMemo(\n        () => getColorPaletteListData(harmonyColors),\n        [harmonyColors],\n    );\n    const statusColors = useMemo(\n        () => generateStatusPalette(baseColor),\n        [baseColor],\n    );\n    // TODO: Add neutral seed color by reducing chroma so that base color slightly is present in the gray\n    const statusPalette = useMemo(\n        () => ({\n            Affirmative: statusColors.affirmative,\n            Cautionary: statusColors.cautionary,\n            Danger: statusColors.error,\n            Info: statusColors.info,\n        }),\n        [statusColors],\n    );\n    // TODO: Move to utility file\n    const statusListData = useMemo(() => {\n        return Object.keys(statusPalette).map((colorName) =>\n            getColorSwatchData({\n                ...genColorMetadata(statusPalette[colorName]),\n                tokenId: colorName,\n            }),\n        );\n    }, [statusPalette]);\n\n    const handleBaseColorChange = (value) => {\n        dispatch({ baseColor: value });\n    };\n\n    const handleHarmonyChange = (params) => {\n        if (params?.id) {\n            dispatch({ harmony: params?.id });\n        }\n    };\n\n    const handleNumberOfColorsChange = (params) => {\n        const { newValue } = params ?? {};\n        dispatch({ numberOfColors: newValue });\n    };\n    const handleOffsetChange = (params) => {\n        const { newValue } = params ?? {};\n        dispatch({ offset: newValue });\n    };\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title=\"Color Palette Generator\"\n            subTitle={STORY_SUB_TITLE}\n        >\n            <div className={`${baseCls}__form-and-results-container`}>\n                <StorySection contextCls={`${baseCls}__form-container`}>\n                    <DynamicFormRow>\n                        <ColorPickerField\n                            color={baseColor}\n                            value={baseColor}\n                            labelProps={{ content: 'Base Color' }}\n                            onChange={handleBaseColorChange}\n                            isLeftAlignedLabel\n                        />\n                    </DynamicFormRow>\n                    <DynamicFormRow>\n                        <DropdownInput\n                            dataKey=\"id\"\n                            textField=\"text\"\n                            data={harmonyDropdownOps}\n                            value={harmony}\n                            labelProps={{ content: 'Color Harmony' }}\n                            onChange={handleHarmonyChange}\n                            isLeftAlignedLabel\n                        />\n                    </DynamicFormRow>\n                    {shouldShowNumberOfColors && (\n                        <DynamicFormRow>\n                            <NumberPickerInput\n                                labelProps={{ content: 'Number of Colors' }}\n                                value={numberOfColors}\n                                onChange={handleNumberOfColorsChange}\n                                min={2}\n                                max={99}\n                                isLeftAlignedLabel\n                            />\n                        </DynamicFormRow>\n                    )}\n                    {shouldShowOffset && (\n                        <DynamicFormRow>\n                            <NumberPickerInput\n                                labelProps={{ content: 'Offset' }}\n                                value={offset}\n                                onChange={handleOffsetChange}\n                                min={10}\n                                max={150}\n                                isLeftAlignedLabel\n                            />\n                        </DynamicFormRow>\n                    )}\n                </StorySection>\n                <SectionPalette listData={harmonyListData} />\n                <SectionStatusPalette data={statusListData} />\n            </div>\n            <SectionPaletteChoices\n                contextCls={`${baseCls}__palette-choices`}\n                colors={[baseColor, ...harmonyColors]}\n                statusColors={statusColors}\n            />\n        </StoryLayout>\n    );\n};\n\nexport default StoryColorPaletteGenerator;\n"],"names":["ANALOGOUS","COMPOUND","MONOCHROMATIC","SHADES","SPLIT_COMPLEMENTARY","TINTS","TONES","COLOR_HARMONIES","SEMANTIC_COLOR_ACCENT_PRIMARY","SEMANTIC_COLOR_ACCENT_SECONDARY","SEMANTIC_COLOR_ACCENT_TERTIARY","SEMANTIC_COLOR_AFFIRMATIVE","SEMANTIC_COLOR_BRAND","SEMANTIC_COLOR_CANVAS_BRAND","SEMANTIC_COLOR_CAUTIONARY","SEMANTIC_COLOR_DESTRUCTIVE","SEMANTIC_COLOR_ERROR","SEMANTIC_COLOR_INFO","SEMANTIC_COLOR_PRIMARY","SEMANTIC_COLOR_SECONDARY","SEMANTIC_COLOR_TOKEN_NAMES","harmoniesWithOffset","harmoniesWithNumberOfColors","convertScreamingSnakeToTitleCase","str","word","initialState","initialPaletteState","readableColorHarmoniesText","acc","HARMONY","harmonyDropdownOps","getColorPaletteListData","colors","color","getColorSwatchData","genColorMetadata","getShouldShowOffset","harmony","getShouldShowNumberOfColors","StatusColorPaletteListItem","props","mainContent","jsx","ColorDesignTokenListItem","SectionStatusPalette","data","baseCls","genSBBaseCls","jsxs","StorySection","SectionTitle","ColorTokenTileList","HarmonyColorPaletteListItem","SectionPalette","listData","ColorPaletteGenSwatchMenuOp","value","DropdownInput","IFLFormFieldComposer","Dropdown","ColorPaletteGenSwatch","token","isDisabled","options","onChange","labelText","ColorSwatch","INLINE_RIGHT","FORM_FIELD_COMP_VARIANTS","CheckboxInput","FormFieldComposer","Checkbox","SectionPaletteChoices","statusColors","fieldValues","dispatch","useReducer","reducer","isPrimarySameAsBrand","isDestructiveSameAsError","handleIsPrimarySameAsBrandChange","newVal","updates","handleDestructiveSameAsErrorChange","handleChange","params","FormLayout","FormLayoutSection","DynamicFormRow","Fieldset","NumberPickerInput","NumberPicker","StoryColorPaletteGenerator","baseColor","numberOfColors","offset","shouldShowNumberOfColors","shouldShowOffset","harmonyColors","useMemo","genHarmonyColors","harmonyListData","generateStatusPalette","statusPalette","statusListData","colorName","handleBaseColorChange","handleHarmonyChange","handleNumberOfColorsChange","newValue","handleOffsetChange","StoryLayout","STORY_SUB_TITLE","ColorPickerField"],"mappings":"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"}