{"version":3,"file":"ColorDesignTokenListItem-565b691b.js","sources":["../../../storybook-lib/src/components/docblocks/color/ColorSwatchSimple.jsx","../../../lib/helper-utils/index.js","../../sb-components/lists/ColorDesignTokenListItem.jsx"],"sourcesContent":["import cx from 'classnames';\n\n// Constants\nimport { COLOR_BASE_CLS } from './const/colorBaseClsConst';\n\n// Styles\nimport './styles/color-swatch-simple.scss';\n\nconst ColorSwatchSimple = (props) => {\n    const { contextCls, color } = props;\n    const baseCls = `${COLOR_BASE_CLS}-simple`;\n\n    const swatchStyle = {\n        backgroundColor: color,\n    };\n\n    return (\n        <span className={cx(baseCls, contextCls)}>\n            <span className={`${baseCls}__color`} style={swatchStyle} />\n        </span>\n    );\n};\n\nexport default ColorSwatchSimple;\n","export { default as debounce } from 'lodash.debounce';\nexport { default as throttle } from 'lodash.throttle';\nexport const reducer = (currentState, updates) => ({\n    ...currentState,\n    ...updates,\n});\n","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { chromajs, getSanitizedHex } from '@driponfleek/bankai-lib-color-utils';\nimport {\n    ColorSwatchSimple,\n    genSBBaseCls,\n    copyTextToClipboard,\n} from '@driponfleek/bankai-lib-storybook';\nimport { ListItem } from '@driponfleek/bankai-ui-lists';\nimport { Button } from '@driponfleek/bankai-ui-buttons';\nimport { BankaiCheck, BankaiCopy } from '@driponfleek/bankai-ui-icons';\n\n// Styles\nimport './styles/color-design-token-list-item.scss';\n\nconst ColorDesignTokenListItem = (props) => {\n    const { token, color, shouldShowMeta = true } = props;\n    const [copiedValue, setCopiedValue] = useState(undefined);\n    const baseCls = genSBBaseCls('color-design-token-list-item');\n    const sanatizedColor =\n        !color || color.includes('#') ? getSanitizedHex(color) : color;\n    const chromaColorData = chromajs(sanatizedColor);\n    const alpha = chromaColorData.alpha();\n    const hex = chromaColorData.hex('rgb'); // Required to prevent hex containing alpha value\n    const hasTransparency = alpha < 1;\n    const isTransparent = alpha === 0;\n    const Icon = !copiedValue ? BankaiCopy : BankaiCheck;\n    const modCls = {\n        [`${baseCls}__copy-btn--copied`]: !!copiedValue,\n    };\n    let meta;\n\n    if (shouldShowMeta) {\n        meta = hasTransparency ? `${hex}, ${alpha * 100}% opacity` : hex;\n        meta = isTransparent ? 'transparent' : meta;\n    }\n\n    const handleClickTimeout = useRef(undefined);\n    const handleClick = () => {\n        setCopiedValue(isTransparent ? 'transparent' : hex);\n    };\n    useEffect(() => {\n        clearTimeout(handleClickTimeout.current);\n\n        if (copiedValue) {\n            copyTextToClipboard(copiedValue);\n            handleClickTimeout.current = setTimeout(() => {\n                setCopiedValue(undefined);\n            }, 1500);\n        }\n\n        return () => {\n            clearTimeout(handleClickTimeout.current);\n        };\n    }, [copiedValue]);\n\n    const renderBefore = () => (\n        <ColorSwatchSimple\n            contextCls={`${baseCls}__swatch`}\n            color={color}\n            alpha={alpha}\n            isTransparent={isTransparent}\n        />\n    );\n\n    const renderAfter = () => (\n        <Button\n            aria-label={`Click to copy the value of ${token}`}\n            contextCls={cx(`${baseCls}__copy-btn`, modCls)}\n            onClick={handleClick}\n            renderIcon={Icon}\n        />\n    );\n\n    return (\n        <ListItem\n            contextCls={baseCls}\n            text={token}\n            meta={meta}\n            renderAfter={renderAfter}\n            renderBefore={renderBefore}\n        />\n    );\n};\n\nColorDesignTokenListItem.propTypes = {\n    token: PropTypes.string,\n    color: PropTypes.string,\n    shouldShowMeta: PropTypes.bool,\n};\n\nexport default ColorDesignTokenListItem;\n"],"names":["ColorSwatchSimple","props","contextCls","color","baseCls","COLOR_BASE_CLS","swatchStyle","jsx","cx","ColorSwatchSimple$1","reducer","currentState","updates","ColorDesignTokenListItem","token","shouldShowMeta","copiedValue","setCopiedValue","useState","genSBBaseCls","sanatizedColor","getSanitizedHex","chromaColorData","chromajs","alpha","hex","hasTransparency","isTransparent","Icon","BankaiCheck","BankaiCopy","modCls","meta","handleClickTimeout","useRef","handleClick","useEffect","copyTextToClipboard","ListItem","Button","PropTypes"],"mappings":"wfAQA,MAAAA,EAAAC,GAAA,CACA,KAAA,CAAA,WAAAC,EAAA,MAAAC,CAAA,EAAAF,EACAG,EAAA,GAAAC,CAAA,UAEAC,EAAA,CACA,gBAAAH,CAAA,EAGA,OACAI,EAAA,OAAA,CAAA,UAAAC,EAAAJ,EAAAF,CAAA,EACA,SAAAK,EAAA,OAAA,CAAA,UAAA,GAAAH,CAAA,UAAA,MAAAE,EAAA,CACA,CAAA,CAEA,EAEAG,EAAAT,6ECrBY,MAACU,EAAU,CAACC,EAAcC,KAAa,CAC/C,GAAGD,EACH,GAAGC,CACP,GCWA,MAAAC,EAAAZ,GAAA,CACA,KAAA,CAAA,MAAAa,EAAA,MAAAX,EAAA,eAAAY,EAAA,IAAAd,EACA,CAAAe,EAAAC,CAAA,EAAAC,EAAAA,SAAA,MAAA,EACAd,EAAAe,EAAA,8BAAA,EACAC,EACA,CAAAjB,GAAAA,EAAA,SAAA,GAAA,EAAAkB,EAAAlB,CAAA,EAAAA,EACAmB,EAAAC,EAAAH,CAAA,EACAI,EAAAF,EAAA,QACAG,EAAAH,EAAA,IAAA,KAAA,EACAI,EAAAF,EAAA,EACAG,EAAAH,IAAA,EACAI,EAAAZ,EAAAa,EAAAC,EACAC,EAAA,CACA,CAAA,GAAA3B,CAAA,oBAAA,EAAA,CAAA,CAAAY,CAAA,EAEA,IAAAgB,EAEAjB,IACAiB,EAAAN,EAAA,GAAAD,CAAA,KAAAD,EAAA,GAAA,YAAAC,EACAO,EAAAL,EAAA,cAAAK,GAGA,MAAAC,EAAAC,EAAAA,OAAA,MAAA,EACAC,EAAA,IAAA,CACAlB,EAAAU,EAAA,cAAAF,CAAA,CAAA,EAEAW,OAAAA,EAAAA,UAAA,KACA,aAAAH,EAAA,OAAA,EAEAjB,IACAqB,EAAArB,CAAA,EACAiB,EAAA,QAAA,WAAA,IAAA,CACAhB,EAAA,MAAA,GACA,IAAA,GAGA,IAAA,CACA,aAAAgB,EAAA,OAAA,CAAA,GAEA,CAAAjB,CAAA,CAAA,EAqBAT,EAAA+B,EAAA,CACA,WAAAlC,EACA,KAAAU,EACA,KAAAkB,EACA,YAdA,IACAzB,EAAAgC,EAAA,CACA,aAAA,8BAAAzB,CAAA,GACA,WAAAN,EAAA,GAAAJ,CAAA,aAAA2B,CAAA,EACA,QAAAI,EACA,WAAAP,CAAA,CAAA,EAUA,aAxBA,IACArB,EAAAP,EAAA,CACA,WAAA,GAAAI,CAAA,WACA,MAAAD,EACA,MAAAqB,EACA,cAAAG,CAAA,CAAA,CAmBA,CAAA,CAGA,EAEAd,EAAA,UAAA,CACA,MAAA2B,EAAA,OACA,MAAAA,EAAA,OACA,eAAAA,EAAA,IACA"}