import{j as e,e as i,d as n,g as u,F as a,c as Ve}from"./localeUtils-d4452531.js";import{P as r}from"./Paragraph-af02171f.js";import{C as P,a as m}from"./CodeBlock-ad079d16.js";import{S as s}from"./SectionTitle-24a62094.js";import{H as l}from"./Hyperlink-46fde701.js";import{O as c,a as t}from"./OmniListItem-eac18975.js";import{C as o}from"./CodeTag-130d1f4a.js";import{B as V,a as $e}from"./DoAndDoNotDo-4a4416a6.js";import{B as S}from"./BannerInfo-00a69b9c.js";import{S as I}from"./StoryLayout-bfb8ef29.js";import{e as _}from"./storiesConfigUtils-16bc9c2c.js";import{g as b}from"./storiesConfigUtils-656c85e3.js";import{P as f}from"./index-f9722e9b.js";import{B as Ke}from"./BankaiFolderOpen-11916373.js";import{l as qe}from"./chunk-DXNAW7Q2-0e265de5.js";import{L as Je}from"./LinkButton-ceb0bc03.js";import"./index-c013ead5.js";import"./_commonjsHelpers-725317a4.js";import"./clipboardUtils-4a738ab5.js";import"./objectWithoutPropertiesLoose-4f48578a.js";import"./chunk-S4VUQJ4A-a04acc28.js";import"./iframe-69f0769b.js";import"../sb-preview/runtime.js";import"./index-e74941a2.js";import"./index-11d98b33.js";import"./index-356e4a49.js";import"./Button-a32e5de4.js";import"./BankaiSpinner-6f45239a.js";import"./shared-2f79c10d.js";import"./BannerDanger-20d9cfb2.js";import"./BannerInfo-23f765f3.js";import"./MainContent-d7b5e6f9.js";import"./BankaiCircleCheck-16e9598b.js";import"./BankaiTriangleAlert-46c2520f.js";import"./BankaiCircleX-c067c4dd.js";import"./BankaiCircleInfo-19f0e78f.js";import"./MainContent-20489744.js";const $=()=>e(i,{children:e(r,{children:"Crafting a polished interface is a journey that starts with thoughtful styles. Our CSS Best Practices guide is here to assist, whether you're a seasoned developer or just beginning. Gain insights into naming conventions, name spacing, context, and modifier classes to enhance your coding skills. Explore the nuances of rem vs px, not only for responsiveness but also for improved accessibility. Uncover crucial do's and don'ts for maintaining clean, maintainable, and high-performance stylesheets. Welcome to CSS excellence, where simplicity and efficiency coexist with design excellence."})});$.__docgenInfo={description:"",methods:[],displayName:"SectionIntro"};const y="button",B="bankai",Ge=`<button class="${y} ${y}--primary">
    <span class="${y}__icon">✓</span>
</button>`,Xe=`<button class="${B}-${y} ${y}--primary">
    <span class="${B}-${y}__icon">✓</span>
</button>`,Ye=`import { Button } from '@driponfleek/bankai-ui-buttons';

const contextCls = 'log-in-button';

<Button contextCls={contextCls} text="Log In" />

// CSS Class List Output: .bankai-button.log-in-button`,K=()=>n(i,{children:[e(s,{children:"CSS Naming Conventions"}),n(i,{children:[n(r,{children:[e(l,{href:"http://getbem.com/naming/",shouldOpenInNewWindow:!0,children:"BEM"})," ","(Block, Element, Modifier) is a clear and maintainable naming convention for CSS classes and IDs, providing a structured approach to naming elements in your stylesheets. The three core entities in BEM are:"]}),n(c,{isOrderedList:!0,children:[n(t,{children:[e("strong",{children:"Block:"})," Represents a standalone component that is meaningful on its own, such as a button or a navigation bar."]}),n(t,{children:[e("strong",{children:"Element:"})," A part of a block that has no standalone meaning and is semantically tied to its block, like a button's label or an item in a navigation menu."]}),n(t,{children:[e("strong",{children:"Modifier:"})," Flags on blocks or elements to define variations or states, allowing you to modify their appearance or behavior. For example, a button could have a modifier for a different color when in a disabled state."]})]}),n(r,{children:["BEM's syntax is structured as"," ",e(o,{children:"block__element--modifier"}),", offering clarity and consistency in your CSS code. This convention enhances collaboration among developers and simplifies the maintenance of stylesheets as your project grows:"]}),e(P,{codeString:Ge,shouldShowCopy:!1}),n(c,{children:[n(t,{children:[e("strong",{children:"Block:"})," ",e(o,{children:"button"})]}),n(t,{children:[e("strong",{children:"Element:"})," ",e(o,{children:"button__icon"})]}),n(t,{children:[e("strong",{children:"Modifier:"})," ",e(o,{children:"button--primary"})]})]})]}),n(i,{children:[e(s,{headingLvl:3,children:"Name Spacing"}),n(i,{children:[n(r,{children:["To foster organization and mitigate naming conflicts, we recommend namespacing all classes and IDs using the pattern: ",e(o,{children:"[sdk name]-[block]"})," — for example, ",e(o,{children:"bankai-accordion"}),". This not only ensures uniqueness and clarity but also significantly boosts style scoping. The prefixed names create a well-defined, isolated scope for styles, diminishing the likelihood of unintended conflicts. This practice proves particularly valuable in larger projects, where maintaining a clear, conflict-free styling approach is crucial for robust and scalable applications."]}),e(P,{codeString:Xe,shouldShowCopy:!1}),n(c,{children:[n(t,{children:[e("strong",{children:"Name Space:"})," ",e(o,{children:"bankai"})]}),n(t,{children:[e("strong",{children:"Block:"})," ",e(o,{children:"button"})]}),n(t,{children:[e("strong",{children:"Element:"})," ",e(o,{children:"button__icon"})]}),n(t,{children:[e("strong",{children:"Modifier:"})," ",e(o,{children:"button--primary"})]})]})]})]})]});K.__docgenInfo={description:"",methods:[],displayName:"SectionClassNamingConventions"};const q=()=>n(i,{children:[e(s,{children:"Context Classes"}),n(i,{children:[n(r,{children:["Enhance the adaptability of your styles by leveraging context classes within ",u("designSystemName"),". Context classes provide a powerful way to tailor the appearance of an element based on its surroundings or placement in the UI. For example, you can use a context class to style a button differently when it's placed within a specific section, ensuring a cohesive and contextual user interface:"]}),e(P,{codeString:Ye,shouldShowCopy:!1})]}),n(i,{children:[e(s,{headingLvl:3,children:"When to Use Context Classes"}),e(i,{children:e(c,{children:n(t,{children:[e("strong",{children:"Surrounding Environment:"})," Apply context classes when you want a component to adapt its style based on its immediate surroundings in the UI. This allows for a more flexible and contextually relevant presentation."]})})})]}),n(i,{children:[e(s,{headingLvl:3,children:"Benefits of Context Classes"}),e(i,{children:n(c,{children:[n(t,{children:[e("strong",{children:"Enhanced Adaptability:"})," Context classes enable your components to seamlessly adapt to different parts of the UI, ensuring a consistent yet tailored user experience."]}),n(t,{children:[e("strong",{children:"Improved Style Scope:"})," By using context classes, you enhance the style scoping of your components. Each context class creates a well-defined scope for styles, preventing unintended clashes and providing a cleaner, more maintainable codebase."]}),e(r,{children:"Utilize context classes judiciously to create a design system that not only maintains consistency but also gracefully adapts to diverse UI scenarios, fostering a more dynamic and user-friendly interface."})]})})]})]});q.__docgenInfo={description:"",methods:[],displayName:"SectionContextClasses"};const J=()=>{const d=[n(a,{children:[e("strong",{children:"Do Use Descriptive Class Names:"})," Choose class names that clearly convey the purpose of the styles they represent. This fosters readability and makes maintenance more straightforward."]}),n(a,{children:[e("strong",{children:"Do Leverage BEM Naming Convention:"})," Follow the BEM (Block, Element, Modifier) naming convention for clarity and maintainability in your CSS code. It enhances collaboration and simplifies scaling your project."]}),n(a,{children:[e("strong",{children:"Do Name Space Classes and IDs:"})," Prefix all classes and IDs with the pattern"," ",e(o,{children:"[sdk name]-[block]"})," to ensure uniqueness and reduce the risk of naming conflicts. This practice also improves style scoping."]}),n(a,{children:[e("strong",{children:"Do Utilize Context Classes Wisely:"})," Ensure all components have a contextCls prop. Employ context classes to adapt component styles based on their surroundings in the UI. This enhances adaptability and fosters a cohesive user experience."]}),n(a,{children:[e("strong",{children:"Do Use Modifier Classes for Variants and States:"})," ","Apply modifier classes to specify styles for different component variants or states. Follow the BEM syntax (",e(o,{children:"block__element--modifier"}),") to maintain clarity and consistency."]}),n(a,{children:[e("strong",{children:"Do Choose rem for Scalability:"})," Opt for rem units when defining spacing and sizing that should scale with font size, promoting accessibility and responsive design."]}),n(a,{children:[e("strong",{children:"Do Use Kebab-Case for Classes and IDs:"})," ","Consistently use"," ",e(l,{href:"https://en.wikipedia.org/wiki/Letter_case#Kebab_case",shouldOpenInNewWindow:!0,children:"kebab-case"})," ","for class names and IDs to ensure a standardized and readable approach in your stylesheets."]}),n(a,{children:[e("strong",{children:"Do Ensure Every Element Has a Class:"})," Assign a class name to every element to provide developers with a reliable way to target it without modifying the original component."]}),n(a,{children:[e("strong",{children:"Do Use CSS Variables with Fallbacks:"})," Implement CSS Variables with fallback values to ensure graceful degradation in case a variable is not supported."]}),n(a,{children:[e("strong",{children:"Do Use SASS Mixins and Variables:"})," Leverage SASS mixins and variables to ensure consistency and prevent redundant code."]})],g=[n(a,{children:[e("strong",{children:"Do Not Use Unclear or Generic Class Names:"})," ","Avoid ambiguous class names that make it challenging to understand the purpose of the styles. Be explicit and descriptive."]}),n(a,{children:[e("strong",{children:"Do Not Deviate from the BEM Convention:"})," Stick to the BEM naming convention consistently. Deviating from it can lead to confusion, especially in collaborative projects."]}),n(a,{children:[e("strong",{children:"Do Not Skip Name Spacing:"})," Neglecting to namespace classes and IDs increases the risk of naming conflicts, impacting the maintainability of your stylesheets."]}),n(a,{children:[e("strong",{children:"Do Not Overuse Context Classes:"})," While context classes are powerful, overusing them can lead to a complex and convoluted styling system. Apply them judiciously."]}),n(a,{children:[e("strong",{children:"Do Not Neglect Modifier Classes:"})," Ensure that modifier classes follow the BEM syntax and are applied consistently. Neglecting them can result in inconsistent styling for different component states or variants."]}),n(a,{children:[e("strong",{children:"Do Not Use Camel-Case, Snake-Case, or Pascal-Case:"})," ","Stick to kebab-case for classes and IDs (with the exception of elements in BEM naming convention that use double-underscore) to maintain a uniform and predictable coding style."]}),n(a,{children:[e("strong",{children:"Do Not Style IDs Directly:"})," Due to their high specificity, avoid styling IDs directly. Instead, use classes for styling to ensure easier overrides in different contexts."]}),n(a,{children:[e("strong",{children:"Do Not Style HTML Elements Directly:"})," Refrain from styling HTML elements directly to prevent global impacts and make contextual overrides more manageable."]}),n(a,{children:[e("strong",{children:"Do Not Use Inline Styles Unless Absolutely Necessary:"})," ","Inline styles can complicate maintenance and reduce the reusability of styles. Reserve inline styles for exceptional cases."]}),n(a,{children:[e("strong",{children:"Do Not Start Classes and IDs with Numbers or Include Special Characters:"})," ","Follow a naming convention that avoids starting class names or IDs with numbers and excludes special characters to maintain compatibility and avoid unexpected behavior."]})];return n(i,{children:[e(s,{children:u("titles.dosAndDoNotDos")}),n(i,{children:[e(V,{doTitle:"Do's for Clean and Efficient CSS",doNotDoTitle:"Do Not Do's for CSS Pitfalls",doList:d,doNotDoList:g}),e(r,{children:"By adhering to these best practices, you'll establish a solid foundation for your projects, ensuring clean, maintainable, and high-performance CSS."})]})]})};J.__docgenInfo={description:"",methods:[],displayName:"SectionDosAndDontDos"};const G=()=>n(i,{children:[e(s,{children:"Further Reading"}),e(i,{children:n(c,{children:[n(t,{children:[e("strong",{children:"BEM Methodology:"})," Learn more about the BEM (Block, Element, Modifier) naming convention and its advantages in creating scalable and maintainable CSS."," ",e(l,{href:"http://getbem.com/",shouldOpenInNewWindow:!0,children:"BEM Documentation"})]}),n(t,{children:[e("strong",{children:"CSS Variables and Fallbacks:"})," Dive into the usage of CSS Variables and the importance of providing fallback values."," ",e(l,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties",shouldOpenInNewWindow:!0,children:"MDN Web Docs - CSS Variables"})]}),n(t,{children:[e("strong",{children:"SASS Mixins and Variables:"})," Explore the benefits of using SASS mixins and variables for a more modular and efficient stylesheet."," ",e(l,{href:"https://sass-lang.com/documentation",shouldOpenInNewWindow:!0,children:"SASS Documentation"})]}),n(t,{children:[e("strong",{children:"Rem vs Px:"})," Understand the considerations between using rem and px units for spacing and sizing in your CSS."," ",e(l,{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#Relative_units",shouldOpenInNewWindow:!0,children:"MDN Web Docs - Use relative units"})]}),n(t,{children:[e("strong",{children:"Kebab-Case:"})," Understand the importance of kebab-case in naming classes and IDs for a consistent and readable coding style."," ",e(l,{href:"https://developer.mozilla.org/en-US/docs/Glossary/Kebab_case",shouldOpenInNewWindow:!0,children:"MDN Web Docs - Kebab Case"})]}),n(t,{children:[e("strong",{children:"Understanding Success Criterion 1.4.4 (Resize Text):"})," ","Gain insights into the accessibility guideline regarding text resizing and its impact on users."," ",e(l,{href:"https://www.w3.org/WAI/WCAG21/quickref/#resize-text",shouldOpenInNewWindow:!0,children:"Understanding SC 1.4.4 - W3C"})]})]})})]});G.__docgenInfo={description:"",methods:[],displayName:"SectionFurtherReading"};const X=()=>{const d=n(a,{children:["Ensure your modifier classes follow the BEM syntax (",e(o,{children:"block__element--modifier"}),") to maintain clarity and consistency in your stylesheets. Use modifier classes thoughtfully to create a versatile and expressive design system."]});return n(i,{children:[e(s,{children:"Modifier Classes"}),n(i,{children:[n(r,{children:["Modifier classes in ",u("designSystemName")," offer a powerful way to specify styles for different variants of a component or for its various states. Consider using modifier classes when you need to alter the appearance or behavior of a component based on specific conditions. Here are some examples:"]}),n(c,{children:[n(t,{children:[e("strong",{children:"Variant Styles:"}),n(c,{children:[n(t,{children:[e(o,{children:"bankai-button--primary:"})," ","Styles for the primary variant of a button."]}),n(t,{children:[e(o,{children:"bankai-card--featured:"})," ","Styles for a featured variant of a card component."]})]})]}),n(t,{children:[e("strong",{children:"State Styles:"}),n(c,{children:[n(t,{children:[e(o,{children:"bankai-input--error:"})," ","Styles for an input component in an error state."]}),n(t,{children:[e(o,{children:"bankai-checkbox--checked:"})," ","Styles for a checkbox component when it's checked."]})]})]})]}),e(S,{msg:d})]})]})};X.__docgenInfo={description:"",methods:[],displayName:"SectionModifierClasses"};const Y=()=>n(i,{children:[e(s,{children:"Choosing Between rem and px"}),n(i,{children:[e(r,{children:"Selecting the appropriate unit for your styles involves understanding the nuances of rem (root em) and px (pixels). Consider the following guidelines to make informed decisions:"}),n(c,{children:[n(t,{children:[e("strong",{children:"Use rem for Accessibility:"})," For improved accessibility, particularly for"," ",e(l,{href:"https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html",shouldOpenInNewWindow:!0,children:"users who may adjust their browser's font size"})," ","settings, use rem units. Unlike pixels, rem units are relative to the root font-size, providing a scalable and accessible layout."]}),n(t,{children:[e("strong",{children:"Use rem for Dynamic Spacing and Sizing:"})," ","Opt for rem units when defining spacing and sizing that should dynamically scale with font size. This ensures a harmonious layout as font sizes adjust, maintaining balanced proportions across your design."]}),n(t,{children:[e("strong",{children:"Use px for Fixed Elements:"})," When specific elements need a fixed size, such as borders, margins, or small icons, px units may be more suitable. Keep in mind that fixed sizes may not scale well with user preferences for larger text."]}),n(t,{children:[e("strong",{children:"Combine for Flexibility:"})," A hybrid approach is often effective. Use rem for elements where scalability matters, and px for fixed-size elements to maintain precision."]})]}),e(r,{children:"By understanding the strengths of each unit, you can strike a balance between flexibility and precision in your styles, ensuring a harmonious user experience across various devices and preferences."})]})]});Y.__docgenInfo={description:"",methods:[],displayName:"SectionREMVsPX"};const Q=()=>{const d=b("css-best-practices");return n(I,{contextCls:d,title:u("stories.developers.bestPractices.css.title"),subTitle:_(u("titles.bestPracices")),children:[e($,{}),e(K,{}),e(q,{}),e(X,{}),e(Y,{}),e(J,{}),e(G,{})]})};Q.__docgenInfo={description:"",methods:[],displayName:"StoryCSSBestPractices"};const Z=()=>e(i,{children:e(r,{children:"Well-organized files and folders contribute to a streamlined development process, ensuring clarity, maintainability, and collaboration among developers. From establishing a coherent structure to naming conventions, let's explore the best practices that empower our applications to scale seamlessly."})});Z.__docgenInfo={description:"",methods:[],displayName:"SectionIntro"};const ee=()=>n(i,{children:[e(s,{children:"Folder Naming"}),n(r,{children:[e("strong",{children:"Use kebab-case for folder names:"})," Adopt"," ",e(l,{href:"https://en.wikipedia.org/wiki/Letter_case#Kebab_case",shouldOpenInNewWindow:!0,children:"kebab-case"})," ","for consistent and readable naming of folders, promoting clarity and adherence to a standardized convention."]}),e(V,{doTitle:"Examples of Valid Folder Names",doNotDoTitle:"Avoid Other Naming Conventions",doList:[e(a,{children:"components"}),e(a,{children:"utility-functions"}),e(a,{children:"button-styles"})],doNotDoList:[e(a,{children:"Components"}),e(a,{children:"utility_functions"}),e(a,{children:"ButtonStyles"})],isSideBySide:!0})]});ee.__docgenInfo={description:"",methods:[],displayName:"SectionFolderNaming"};const h=d=>{const{contextCls:g,children:k,...E}=d,v=b("folder-structure-heading");return n(s,{...E,contextCls:Ve(v,g),children:[e(Ke,{})," ",e("span",{className:`${v}__text`,children:k})]})};h.defaultProps={headingLvl:3};h.propTypes={contextCls:f.string,headingLvl:f.number};h.__docgenInfo={description:"",methods:[],displayName:"FolderStructureHeading",props:{headingLvl:{defaultValue:{value:"3",computed:!1},type:{name:"number"},required:!1,description:""},contextCls:{type:{name:"string"},required:!1,description:""}}};const Qe=`.
└── src
    └── components
        └── forms
            ├── LoginForm.jsx
            └── SignUpForm.jsx`,Ze=`.
└── src
    └── const
        └── platformConst.js`,en=`.
└── src
    └── hooks
        └── useWindowResize.js`,nn=`.
└── src
    └── i18n
        └── en-us.json`,tn=`.
└── src
    └── media
        ├── fonts
        ├── images
        └── video`,on=`.
└── src
    └── pages
        └── Home.jsx`,rn=`.
└── src
    └── services
        ├── appService.js
        └── userService.js`,sn=`.
└── src`,cn=`.
└── src
    └── utils
        └── signUpFormValidationUtils.js`,an=`.
└── src
    └── components
        └── buttons
            ├── __tests__
            │   └── Button.test.jsx
            └── Button.jsx`,ln=`.
└── src
    └── components
        └── buttons
            ├── styles
            │   └── button.scss
            └── Button.jsx`,ne=()=>n(i,{children:[e(h,{children:"src"}),e(m,{codeString:sn}),e(r,{children:"The heart of our source code, containing the main application or library code."})]});ne.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureSrc"};const te=()=>n(i,{children:[e(h,{children:"components"}),e(m,{codeString:Qe}),e(r,{children:"Group your reusable components in this directory."}),e(S,{msg:"Avoid placing components directly within the components folder. Instead,  organize components into sub-folders based on their category or type. This hierarchical organization ensures a systematic and scalable structure for our components."})]});te.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureComponents"};const ie=()=>n(i,{children:[e(h,{children:"hooks"}),e(m,{codeString:en}),e(r,{children:"A dedicated space for custom React hooks used throughout our applications."})]});ie.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureHooks"};const oe=()=>n(i,{children:[e(h,{children:"styles"}),e(m,{codeString:ln}),e(r,{children:"Centralize stylesheets and styling-related assets in this directory."}),e(S,{msg:n(a,{children:["This folder should always be located within the root of the folder that contains the"," ",e("abbr",{title:"User Interface",children:"UI"})," the styles are for."]})})]});oe.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureStyles"};const re=()=>n(i,{children:[e(h,{children:"const"}),e(m,{codeString:Ze}),e(r,{children:"Store constants in this directory for easy access and centralized management."})]});re.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureConst"};const se=()=>n(i,{children:[e(h,{children:e("abbr",{title:"internationalization",children:"i18n"})}),e(m,{codeString:nn}),e(r,{children:"A dedicated space for internationalization and localization files to support multiple languages."})]});se.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureI18N"};const ce=()=>n(i,{children:[e(h,{children:"media"}),e(m,{codeString:tn}),e(r,{children:"Store media assets such as images, videos, and other multimedia elements."}),e(S,{msg:"Avoid placing media files directly within the media folder. Instead, organize media assets into sub-folders based on their category or type. This structured approach simplifies the process of finding specific types of media files, promoting efficient asset management."})]});ce.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureMedia"};const ae=()=>n(i,{children:[e(h,{children:"pages"}),e(m,{codeString:on}),e(r,{children:"Organize application pages or views in this directory."}),e($e,{msg:n(a,{children:[e("strong",{children:"Do not place pages within the components folder!"})," ","Keep the pages directory separate to maintain a clear distinction between application pages and reusable components."]})})]});ae.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructurePages"};const le=()=>n(i,{children:[e(h,{children:"services"}),e(m,{codeString:rn}),n(r,{children:["The services folder serves as a dedicated space for managing"," ",e("abbr",{title:"Application Programming Interface",children:"API"})," calls within our application. As the central hub for all communication with external and internal services, this folder houses utility functions, classes, or modules specifically designed to handle interactions with APIs. Organizing API-related code in the services directory promotes a structured and coherent approach to managing our application's data-fetching logic."]})]});le.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureServices"};const de=()=>n(i,{children:[e(h,{children:"utils"}),e(m,{codeString:cn}),e(r,{children:"Store utility functions, helper classes, or modules in the utils folder. This aids in keeping our codebase organized and facilitates the reuse of common functionality."})]});de.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureUtils"};const he=()=>n(i,{children:[e(h,{children:"__tests__"}),e(m,{codeString:an}),e(r,{children:"This folder is reserved for unit tests. Keep test files organized within this folder to ensure easy navigation and maintenance."}),e(S,{msg:"This folder should always be located within the root of the folder that contains the code the unit tests are for."})]});he.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructureTests"};const pe=()=>n(i,{children:[e(s,{children:"Folder Structure"}),e(i,{children:e(r,{children:"Establishing a clear and logical folder structure is crucial for maintaining a scalable and maintainable applications. Let's explore the purpose and recommended content for some key folders:"})}),e(ne,{}),e(he,{}),e(oe,{}),e(te,{}),e(ae,{}),e(ie,{}),e(re,{}),e(se,{}),e(ce,{}),e(le,{}),e(de,{})]});pe.__docgenInfo={description:"",methods:[],displayName:"SectionFolderStructure"};const me=()=>n(i,{children:[e(s,{headingLvl:3,children:"Camel Case"}),n(i,{children:[e(r,{children:e("strong",{children:"Use camel case for :"})}),n(c,{children:[n(t,{children:["Constant files",e(c,{children:n(t,{children:["Constant files should always end with the"," ",e(o,{children:"Const"})," suffix. For example,"," ",e(o,{children:"platformConst.js"})]})})]}),n(t,{children:["Hook files",e(c,{children:n(t,{children:["Hook files should always have the"," ",e(o,{children:"use"})," prefix. For example,"," ",e(o,{children:"useWindowResize.js"})]})})]}),n(t,{children:["Service files",e(c,{children:n(t,{children:["Service files should always have the"," ",e(o,{children:"Service"})," suffix. For example,"," ",e(o,{children:"appService.js"})]})})]}),n(t,{children:["Utility files",e(c,{children:n(t,{children:["Utility files should always have the"," ",e(o,{children:"Util"})," (if only one util is provided) or ",e(o,{children:"Utils"})," (if more than one util is provided) suffix. For example,"," ",e(o,{children:"signUpFormValidationUtils.js"})]})})]})]})]})]});me.__docgenInfo={description:"",methods:[],displayName:"SectionFileNamingCamelCase"};const ue=()=>n(i,{children:[e(s,{headingLvl:3,children:"Pascal Case"}),n(i,{children:[e(r,{children:e("strong",{children:"Use pascal case for :"})}),n(c,{children:[e(t,{children:"Files that represent Classes"}),n(t,{children:["React components",e(c,{children:n(t,{children:[e("abbr",{title:"Higher-Order Components",children:"HOCs"})," ","should also have the ",e(o,{children:"Composer"})," ","suffix. For example,"," ",e(o,{children:"IFLFormFieldComposer.jsx"})]})})]})]})]})]});ue.__docgenInfo={description:"",methods:[],displayName:"SectionFileNamingPascalCase"};const ge=()=>n(i,{children:[e(s,{headingLvl:3,children:"Kebab Case"}),n(i,{children:[e(r,{children:e("strong",{children:"Use kebab case for :"})}),n(c,{children:[n(t,{children:[e("abbr",{title:"internationalization",children:"i18n"})," files"]}),e(t,{children:"Media files"}),e(t,{children:"SASS/CSS files"})]})]})]});ge.__docgenInfo={description:"",methods:[],displayName:"SectionFileNamingKebabCase"};const fe=()=>n(i,{children:[e(s,{children:"File Naming"}),e(i,{children:e(r,{children:"Consistent and well-thought-out file naming conventions contribute to the maintainability and readability of your project. Choose the appropriate convention based on the type and purpose of the file. Below are guidelines for when to use Camel Case, Pascal Case, and Kebab Case."})}),e(me,{}),e(ue,{}),e(ge,{})]});fe.__docgenInfo={description:"",methods:[],displayName:"SectionFileNaming"};const ye=()=>n(i,{children:[e(s,{children:"Further Reading"}),e(i,{children:n(c,{children:[e(t,{children:e(l,{href:"https://en.wikipedia.org/wiki/Letter_case#Kebab_case",shouldOpenInNewWindow:!0,children:"Kebab Case"})}),e(t,{children:n(l,{href:"https://en.wikipedia.org/wiki/Camel_case",shouldOpenInNewWindow:!0,children:["Camel Case and Pascal Case (",e("abbr",{title:"Also Known As",children:"A.K.A."})," Upper Camel Case)"]})})]})})]});ye.__docgenInfo={description:"",methods:[],displayName:"SectionFurtherReading"};const Se=()=>{const d=b("folder-and-file-best-practices");return n(I,{contextCls:d,title:u("stories.developers.bestPractices.foldersAndFiles.title"),subTitle:_(u("titles.bestPracices")),children:[e(Z,{}),e(ee,{}),e(pe,{}),e(fe,{}),e(ye,{})]})};Se.__docgenInfo={description:"",methods:[],displayName:"StoryFolderAndFileBestPractices"};const be=()=>e(i,{children:e(r,{children:"Writing clean, maintainable, and efficient JavaScript code is essential for creating robust and scalable applications. This guide outlines recommended practices for variable naming, function declarations, error handling, asynchronous operations, DOM manipulation, and more. Whether you're a beginner or an experienced developer, adopting these best practices will contribute to code readability, maintainability, and overall code quality. Let's dive into the key principles that will help you write better JavaScript code."})});be.__docgenInfo={description:"",methods:[],displayName:"SectionIntro"};const p=d=>{const{correctLabel:g,correctExample:k,incorrectLabel:E,incorrectExample:v}=d,He=`// ${g}
${k}

// ${E}
${v}`;return e(m,{codeString:He})};p.defaultProps={correctLabel:"Correct",incorrectLabel:"Incorrect"};p.propTypes={correctLabel:f.string,correctExample:f.string,incorrectExample:f.string,incorrectLabel:f.string};p.__docgenInfo={description:"",methods:[],displayName:"CorrectIncorrectCodeExample",props:{correctLabel:{defaultValue:{value:"'Correct'",computed:!1},type:{name:"string"},required:!1,description:""},incorrectLabel:{defaultValue:{value:"'Incorrect'",computed:!1},type:{name:"string"},required:!1,description:""},correctExample:{type:{name:"string"},required:!1,description:""},incorrectExample:{type:{name:"string"},required:!1,description:""}}};const dn="let myVariable = 10",hn="let my_variable = 10",pn=`function calculateTotal(price, quality) {
    ...
}`,mn=`function calculate_total(price, quality) {
    ...
}`,un=`function handleButtonClick() {
    ...
}`,gn=`function buttonClickHandler() {
    ...
}`,fn=`function fetchUserData() {
    ...
}

function fetchConfig() {
    ...
}`,yn=`function getUserData() {
    ...
}

function getConfigFromBackend() {
    ...
}`,Sn=`function getValue() {
    ...
}`,bn=`function retrieveValue() {
    ...
}`,vn="const MAX_VALUE = 100;",Cn="const maxValue = 100;",wn=`class Car {
    ...
}`,xn=`class car {
    ...
}`,Nn="const isAvailable = true;",In="const available = true;",_n=`let htmlElement = '';
let xmlHttpRequest = '';
let pdfGenerator = '';`,Fn=`let HTMLElement = '';
let XMLHTTPRequest = '';
let PDF_Generator = '';`,kn=`function createCounter() {
    let count = 0;
  
    return {
      increment: function() {
        count++;
      },
      getCount: function() {
        return count;
      },
    };
  }`,En=`let _privateVariable = '';
function _privateFunction() {}`,ve=()=>n(i,{children:[e(s,{headingLvl:4,children:"Booleans"}),n(i,{children:[n(r,{children:["Prefix booleans with words like ",e(o,{children:"is"}),","," ",e(o,{children:"has"}),", ",e(o,{children:"can"}),", etc., to convey their purpose."]}),e(p,{correctExample:Nn,incorrectExample:In})]})]});ve.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventionsBools"};const Ce=()=>n(a,{children:[n(i,{children:[e(s,{headingLvl:3,children:"Variables"}),n(i,{children:[n(c,{children:[n(t,{children:["Use ",e("strong",{children:"camel case"})," for variable names."]}),e(t,{children:"Choose meaningful and descriptive names that convey the purpose of the variable."})]}),e(p,{correctExample:dn,incorrectExample:hn})]})]}),e(ve,{})]});Ce.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventionsVariables"};const we=()=>n(i,{children:[e(s,{headingLvl:4,children:"Event Handlers"}),n(i,{children:[n(r,{children:["Prefix event handlers with ",e(o,{children:"handle"})," to convey their purpose is to handle an event."]}),e(p,{correctExample:un,incorrectExample:gn})]})]});we.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventionsEventHandlers"};const xe=()=>n(i,{children:[n(s,{headingLvl:4,children:[e("abbr",{title:"Application Programming Interface",children:"API"})," ","Fetching"]}),n(i,{children:[n(r,{children:["Prefix functions that retrieve data, configurations, etc., from a backend service with ",e(o,{children:"fetch"}),"."]}),e(p,{correctExample:fn,incorrectExample:yn})]})]});xe.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventionsAPIFetching"};const Ne=()=>n(i,{children:[e(s,{headingLvl:4,children:"Value Retrieval"}),n(i,{children:[n(r,{children:["Prefix functions that serve the purpose of getting a value, local data, etc., with ",e(o,{children:"get"}),"."]}),e(p,{correctExample:Sn,incorrectExample:bn})]})]});Ne.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventionsGetterFunctions"};const Ie=()=>n(i,{children:[e(s,{headingLvl:3,children:"Functions"}),n(i,{children:[n(c,{children:[n(t,{children:["Use ",e("strong",{children:"camel case"})," for function names."]}),e(t,{children:"Make sure that function names clearly indicate their action or purpose."})]}),e(p,{correctExample:pn,incorrectExample:mn})]}),e(we,{}),e(xe,{}),e(Ne,{})]});Ie.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventionsFuncs"};const _e=()=>n(i,{children:[e(s,{headingLvl:3,children:"Constants"}),n(i,{children:[e(r,{children:"Constants represent values that should not be modified during the execution of the program."}),n(c,{children:[n(t,{children:["Use ",e("strong",{children:"screaming snake case"})," ","(all-uppercase letters with underscores between words) for constants."]}),e(t,{children:"Choose meaningful and descriptive names that convey the purpose of the constant."})]}),e(p,{correctExample:vn,incorrectExample:Cn})]})]});_e.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventionsConts"};const Fe=()=>n(i,{children:[e(s,{headingLvl:3,children:"Classes"}),n(i,{children:[e(r,{children:"Classes encapsulate related functionality."}),n(c,{children:[n(t,{children:["Use ",e("strong",{children:"pascal case"})," for class names."]}),e(t,{children:"Classes should have clear, concise names."})]}),e(p,{correctExample:wn,incorrectExample:xn})]})]});Fe.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventionsClasses"};const ke=()=>n(i,{children:[e(s,{headingLvl:3,children:"Additional Naming Convention Considerations"}),e(i,{children:n(i,{children:[e(s,{headingLvl:4,children:"Handling Abbreviations and Acronyms in Names"}),n(i,{children:[n(c,{children:[e(t,{children:"When dealing with Abbreviations and Acronyms, maintain consistent casing for each letter in them."}),e(t,{children:"For camel case, pascal case, or kebab case, treat each letter in the acronym/abbreviation as you would any other letter in the naming convention."})]}),e(p,{correctExample:_n,incorrectExample:Fn})]})]})}),e(i,{children:n(i,{children:[e(s,{headingLvl:4,children:"Don't Prefix Names with Underscores"}),n(i,{children:[e(r,{children:"Avoid using underscores (_) in variable, function, or constant names. While it's a common practice in some languages to indicate private or internal members, JavaScript doesn't provide true privacy through naming conventions. The use of underscores can lead to confusion and may not provide the expected privacy."}),e(p,{correctLabel:"Consider other patterns for encapsulation",correctExample:kn,incorrectLabel:"Avoid underscores in names",incorrectExample:En})]})]})})]});ke.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventionsAdditionalConsiderations"};const Ee=()=>n(i,{children:[e(s,{children:"Naming Conventions"}),e(i,{children:e(r,{children:"When it comes to writing clean and maintainable JavaScript code, adopting descriptive and consistent naming conventions is crucial. Prioritize clarity over brevity, choosing names that clearly express the purpose and functionality of your identifiers."})}),e(Ce,{}),e(Ie,{}),e(_e,{}),e(Fe,{}),e(ke,{})]});Ee.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventions"};const Pe=()=>n(i,{children:[n(s,{children:['Variable Declaration - Prefer "const" and'," ",'"let" Over "var"']}),n(c,{children:[n(t,{children:["Use ",e(o,{children:"const"})," for variables that don't change their value."]}),n(t,{children:["Use ",e(o,{children:"let"})," for variables that need to be reassigned values."]}),n(t,{children:["Avoid using ",e(o,{children:"var"})," due to its function-scoping behavior and"," ",e(l,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#hoisting",shouldOpenInNewWindow:!0,children:"potential issues with hoisting"}),"."]})]})]});Pe.__docgenInfo={description:"",methods:[],displayName:"SectionVariableDeclaration"};const Be=()=>n(i,{children:[e(s,{children:'Avoid the Use of "null"'}),e(i,{children:n(r,{children:["In modern JavaScript development, it's generally recommended to steer clear of using ",e(o,{children:"null"})," ","whenever possible. While ",e(o,{children:"null"})," is a valid value, its usage can introduce potential pitfalls and unintended consequences. Instead, consider using"," ",e(o,{children:"undefined"})," to explicitly indicate a missing or undefined value in your code."]})}),n(i,{children:[e(s,{headingLvl:3,children:"Alternative Representations"}),n(r,{children:["Instead of ",e(o,{children:"null"}),", consider using empty objects (","{}",") or empty arrays (","[]",") to represent missing or empty values. This aligns with the preference for object-oriented representations and reduces the ambiguity associated with ",e(o,{children:"null"}),"."]})]})]});Be.__docgenInfo={description:"",methods:[],displayName:"SectionNoNull"};const De=()=>n(i,{children:[e(s,{children:"Further Reading"}),n(c,{children:[e(t,{children:e(l,{href:"https://eslint.org/docs/latest/rules/no-var",shouldOpenInNewWindow:!0,children:"ESLint no-var"})}),e(t,{children:e(l,{href:"https://github.com/getify/You-Dont-Know-JS",shouldOpenInNewWindow:!0,children:"You Don't Know JavaScript"})})]})]});De.__docgenInfo={description:"",methods:[],displayName:"SectionFurtherReading"};const Ae=()=>{const d=b("js-best-practices");return n(I,{contextCls:d,title:u("stories.developers.bestPractices.js.title"),subTitle:_(u("titles.bestPracices")),children:[e(be,{}),e(Pe,{}),e(Be,{}),e(Ee,{}),e(De,{})]})};Ae.__docgenInfo={description:"",methods:[],displayName:"StoryJSBestPractices"};const Ue=()=>e(i,{children:e(r,{children:"Writing React applications efficiently and maintaining a clean, organized codebase is essential for a successful project. This guide outlines best practices for React development, covering various aspects such as component naming, functional component practices, and more."})});Ue.__docgenInfo={description:"",methods:[],displayName:"SectionIntro"};const Le=()=>n(i,{children:[e(s,{children:"Component Naming Conventions"}),n(c,{children:[n(t,{children:["Component names should use ",e("strong",{children:"pascal case"})," ","convention."]}),e(t,{children:"Choose descriptive names for your components. A well-named component makes the code more readable and helps other developers understand its purpose."}),n(t,{children:["When creating Higher-Order Components, consider using the"," ",e(o,{children:"Composer"})," suffix to indicate their purpose."]}),e(t,{children:"Component file names should match the name of the component they export."})]})]});Le.__docgenInfo={description:"",methods:[],displayName:"SectionNamingConventions"};const Re=()=>n(i,{children:[e(s,{children:"Props"}),e(i,{children:n(c,{children:[n(t,{children:["Include a ",e(o,{children:"contextCls"})," prop in every component to allow assigning CSS classes based on the component's context. This prop provides the flexibility to adjust styles for a component in different contexts, ensuring a consistent yet adaptable visual presentation."]}),e(t,{children:"Group props of similar data types together in the defaultProps/propTypes lists and sort them alphabetically within each group. Organizing props by type streamlines the development process, making it easier to locate specific prop types and maintain consistency across components."}),e(t,{children:"Place props that are functions (e.g., event handlers, render props) at the end of the defaultProps/propTypes list. This ordering aligns with the component's behavior."}),e(t,{children:"Provide default prop values for event handler props to prevent potential crashes when calling the handler if a developer forgets to provide a value for it."})]})}),n(i,{children:[e(s,{headingLvl:3,children:"Prop Naming Conventions"}),n(c,{children:[n(t,{children:["Event handler props should always be prefixed with"," ",e(o,{children:"on"}),", such as"," ",e(o,{children:"onClick"}),", ",e(o,{children:"onChange"}),"."]}),n(t,{children:["Render props should always start with the"," ",e(o,{children:"render"})," prefix, for example,"," ",e(o,{children:"renderContent"}),","," ",e(o,{children:"renderItem"}),"."]}),n(t,{children:["Boolean props should follow the same naming convention established for booleans in the"," ",e(Je,{text:"JavaScript Best Practices page",onClick:qe("Developers/Best Practices","JavaScript Best Practices")}),"."]})]})]})]});Re.__docgenInfo={description:"",methods:[],displayName:"SectionProps"};const Te=()=>n(i,{children:[e(s,{children:"Component Structure"}),e(i,{children:n(c,{children:[e(t,{children:"Keep it simple by having only one React component per file. This ensures a clear and focused file structure."}),e(t,{children:"Prefer using functional components over class-based components for their concise syntax and support for React Hooks."}),n(t,{children:["Leverage SOLID principles in functional components:",n(c,{children:[n(t,{children:[n("strong",{children:["Single Responsibility Principle (",e("abbr",{title:"Single Responsibility Principle",children:"SRP"}),")"]})," ","- Aim for each functional component to have a single responsibility. For example, a user card component should only be responsible for rendering user information."]}),n(t,{children:[n("strong",{children:["Open/Closed Principle (",e("abbr",{title:"Open/Closed Principle",children:"OCP"}),")"]})," ","- Design components to be open for extension but closed for modification. In React, this often involves creating reusable components that can be extended or composed without modifying their source code."]}),n(t,{children:[n("strong",{children:["Liskov Substitution Principle (",e("abbr",{title:"Liskov Substitution Principle",children:"LSP"}),")"]})," ","- Ensure that components can be substituted with instances of their subtypes without altering the correctness of the program. This is crucial for maintaining consistency when working with component hierarchies."]}),n(t,{children:[n("strong",{children:["Interface Segregation Principle (",e("abbr",{title:"Interface Segregation Principle",children:"ISP"}),")"]})," ","- Avoid having components forced to implement interfaces they do not use. This principle encourages creating smaller, specific interfaces that are implemented only by components that need them."]}),n(t,{children:[n("strong",{children:["Dependency Inversion Principle (",e("abbr",{title:"Dependency Inversion Principle",children:"DIP"}),")"]})," ","- Depend on abstractions, not concretions. In React, this might involve using dependency injection to pass dependencies into components, allowing for greater flexibility."]})]})]})]})})]});Te.__docgenInfo={description:"",methods:[],displayName:"SectionComponents"};const Me=()=>n(i,{children:[e(s,{headingLvl:3,children:'Avoid Unnecessary "useEffect"'}),n(r,{children:["Be mindful of using the ",e(o,{children:"useEffect"})," hook unnecessarily. In functional components, only use"," ",e(o,{children:"useEffect"})," when dealing with side effects like data fetching, subscriptions, or manually changing the DOM."]})]});Me.__docgenInfo={description:"",methods:[],displayName:"SectionReactHooksAvoidUseEffect"};const We=()=>n(i,{children:[n(s,{headingLvl:3,children:['"useState" ',e("abbr",{title:"versus",children:"vs."})," ",'"useReducer"']}),e(i,{children:n(r,{children:["When working with React, managing component state is a fundamental aspect of building dynamic user interfaces. React provides two primary hooks,"," ",e(o,{children:"useState"})," and"," ",e(o,{children:"useReducer"}),", for handling state in functional components. Understanding when to use each hook is crucial for effective state management and is key to writing clean, maintainable React components."]})}),n(i,{children:[e(s,{headingLvl:4,children:'When to Use "useState"'}),n(c,{children:[e(t,{children:"Ideal for managing simple state variables."}),e(t,{children:"Suitable for components with small state requirements."}),e(t,{children:"Suitable for independent pieces of state or when updating one state variable doesn't affect others."})]})]}),n(i,{children:[e(s,{headingLvl:4,children:'When to Use "useReducer"'}),n(c,{children:[e(t,{children:"Beneficial when managing more complex state logic that involves multiple values and intricate state transitions."}),e(t,{children:"Best suited for components that require more advanced state management."}),e(t,{children:"Suitable for independent pieces of state or when updating one state variable doesn't affect others."})]})]})]});We.__docgenInfo={description:"",methods:[],displayName:"SectionReactHooksUseStateVsUseReducer"};const Oe=()=>n(i,{children:[e(s,{children:"React Hooks"}),e(i,{children:e(r,{children:"React hooks provide a powerful way to manage state and side effects in functional components. Adhering to best practices when using hooks ensures clean, maintainable, and efficient code. Here are some recommendations:"})}),e(Me,{}),e(We,{})]});Oe.__docgenInfo={description:"",methods:[],displayName:"SectionReactHooks"};const ze=()=>n(i,{children:[e(s,{children:"Further Reading"}),n(c,{children:[e(t,{children:e(l,{href:"https://react.dev/blog/2023/03/16/introducing-react-dev",shouldOpenInNewWindow:!0,children:"React"})}),e(t,{children:e(l,{href:"https://react.dev/reference/react/hooks",shouldOpenInNewWindow:!0,children:"React Hooks"})}),e(t,{children:e(l,{href:"https://www.linkedin.com/pulse/master-solid-principles-react-functional-components-ankush-tagore",shouldOpenInNewWindow:!0,children:"Master SOLID Principles in React Functional Components"})}),e(t,{children:e(l,{href:"https://blog.logrocket.com/useeffect-react-hook-complete-guide/",shouldOpenInNewWindow:!0,children:"A Complete Guide to the useEffect React Hook"})}),e(t,{children:e(l,{href:"https://overreacted.io/a-complete-guide-to-useeffect/",shouldOpenInNewWindow:!0,children:"A Complete Guide to useEffect"})}),e(t,{children:e(l,{href:"https://medium.com/@navneetsingh_95791/react-usestate-vs-usereducer-choosing-the-right-state-management-hook-de3568a778b3",shouldOpenInNewWindow:!0,children:"React useState vs. useReducer: Choosing the Right State Management Hook"})})]})]});ze.__docgenInfo={description:"",methods:[],displayName:"SectionFurtherReading"};const je=()=>{const d=b("react-best-practices");return n(I,{contextCls:d,title:u("stories.developers.bestPractices.react.title"),subTitle:_(u("titles.bestPracices")),children:[e(Ue,{}),e(Le,{}),e(Te,{}),e(Re,{}),e(Oe,{}),e(ze,{})]})};je.__docgenInfo={description:"",methods:[],displayName:"StoryReactBestPractices"};const F={a11y:{disable:!0},actions:{disable:!0},options:{showPanel:!1}},mt={title:"Developers/Best Practices"},C={name:"CSS Best Practices",render:Q,parameters:F},w={name:"Folder & File Best Practices",render:Se,parameters:F},x={name:"JavaScript Best Practices",render:Ae,parameters:F},N={name:"React Best Practices",render:je,parameters:F};var D,A,U;C.parameters={...C.parameters,docs:{...(D=C.parameters)==null?void 0:D.docs,source:{originalSource:`{
  name: 'CSS Best Practices',
  render: StoryCSSBestPractices,
  parameters
}`,...(U=(A=C.parameters)==null?void 0:A.docs)==null?void 0:U.source}}};var L,R,T;w.parameters={...w.parameters,docs:{...(L=w.parameters)==null?void 0:L.docs,source:{originalSource:`{
  name: 'Folder & File Best Practices',
  render: StoryFolderAndFileBestPractices,
  parameters
}`,...(T=(R=w.parameters)==null?void 0:R.docs)==null?void 0:T.source}}};var M,W,O;x.parameters={...x.parameters,docs:{...(M=x.parameters)==null?void 0:M.docs,source:{originalSource:`{
  name: 'JavaScript Best Practices',
  render: StoryJSBestPractices,
  parameters
}`,...(O=(W=x.parameters)==null?void 0:W.docs)==null?void 0:O.source}}};var z,j,H;N.parameters={...N.parameters,docs:{...(z=N.parameters)==null?void 0:z.docs,source:{originalSource:`{
  name: 'React Best Practices',
  render: StoryReactBestPractices,
  parameters
}`,...(H=(j=N.parameters)==null?void 0:j.docs)==null?void 0:H.source}}};const ut=["CSSBestPractices","FolderAndFileBestPractices","JSBestPractices","ReactBestPractices"];export{C as CSSBestPractices,w as FolderAndFileBestPractices,x as JSBestPractices,N as ReactBestPractices,ut as __namedExportsOrder,mt as default};
//# sourceMappingURL=BestPractices.stories-13df3a5f.js.map
