{"version":3,"file":"Button-22fc9757.js","sources":["../../../components/buttons/src/const/baseClsConst.js","../../../components/buttons/src/components/ButtonIcon.jsx","../../../components/buttons/src/components/ButtonText.jsx","../../../components/buttons/src/utils/buttonUtils.js","../../../components/buttons/src/components/ButtonMain.jsx","../../../components/buttons/src/Button.jsx"],"sourcesContent":["export const BUTTON_BASE_CLS = 'bankai-button';\nexport const BUTTON_SPLIT_BASE_CLS = 'bankai-split-button';\n","import PropTypes from 'prop-types';\n\n// Constants\nimport { BUTTON_BASE_CLS } from '../const/baseClsConst';\n\nconst ButtonIcon = (props) => {\n    const { renderIcon, baseCls } = props;\n    const baseIconCls = `${baseCls}__icon-container`;\n\n    return (\n        <span className={baseIconCls}>\n            <span className={`${baseIconCls}-safe-space`}>\n                <span className={`${baseIconCls}-inner`}>{renderIcon({})}</span>\n            </span>\n        </span>\n    );\n};\n\nButtonIcon.defaultProps = {\n    baseCls: BUTTON_BASE_CLS,\n    renderIcon: () => '',\n};\n\nButtonIcon.propTypes = {\n    baseCls: PropTypes.string,\n    renderIcon: PropTypes.func,\n};\n\nexport default ButtonIcon;\n","import PropTypes from 'prop-types';\n\n// Constants\nimport { BUTTON_BASE_CLS } from '../const/baseClsConst';\n\nconst ButtonText = (props) => {\n    const { baseCls, children } = props;\n\n    return (\n        <span className={`${baseCls}__text-container`}>\n            <span className={`${baseCls}__text`}>{children}</span>\n        </span>\n    );\n};\n\nButtonText.defaultProps = {\n    baseCls: BUTTON_BASE_CLS,\n};\n\nButtonText.propTypes = {\n    baseCls: PropTypes.string,\n};\n\nexport default ButtonText;\n","export const getBtnDisabledModCls = (baseCls, isDisabled = false) => ({\n    [`${baseCls}--disabled`]: isDisabled,\n});\n\nexport const getBtnStateModCls = (\n    { isDisabled = false, isBusy = false },\n    baseCls,\n) => ({\n    [`${baseCls}--busy`]: isBusy,\n    ...getBtnDisabledModCls(baseCls, isBusy || isDisabled),\n});\n\nexport const getLinkBtnExtantProps = (props) => {\n    const { contextCls, text, data, onClick, renderIcon, children, ...rest } =\n        props;\n    const sanitizedProps = { ...rest };\n    delete sanitizedProps.disabled;\n\n    // To enforce button text being properly written and prevent scenario where text and\n    // aria label exist, delete the aria-label prop if props.text is present\n    if (text) {\n        delete sanitizedProps['aria-label'];\n    }\n\n    return props;\n};\n\nexport const getBtnExtantProps = (props) => {\n    const {\n        'aria-label': ariaLabel,\n        contextCls,\n        text,\n        type,\n        variant,\n        isBusy,\n        isDisabled,\n        isDynamicText,\n        data,\n        onClick,\n        renderIcon,\n        renderBusyIcon,\n        children,\n        ...rest\n    } = props;\n\n    // TODO: Add aria-disabled attribute for disabled/busy states\n    return {\n        ...rest,\n        ...(!text && ariaLabel && { 'aria-label': ariaLabel }),\n        'aria-disabled': isBusy || isDisabled,\n    };\n};\n\nexport const getMenuBtnExtantProps = (props) => {\n    const {\n        'aria-label': ariaLabel,\n        btnContextCls,\n        contextCls,\n        text,\n        variant,\n        isDisabled,\n        shouldCloseOnBlur,\n        shouldCloseOnSelection,\n        wrapperProps,\n        menuProps,\n        menuOptions,\n        onSelection,\n        onMenuToggle,\n        renderIcon,\n        renderMenuOption,\n        children,\n        ...rest\n    } = props;\n\n    return {\n        ...rest,\n        ...(!text && ariaLabel && { 'aria-label': ariaLabel }),\n        'aria-disabled': isDisabled,\n        ...(isDisabled && { onclick: () => Promise.resolve() }),\n    };\n};\n\nexport const getSplitBtnSanatizedProps = (props, baseCls) => {\n    const { isDisabled, mainButtonProps, menuButtonProps } = props;\n    const { isDisabled: isMainBtnDisabled, ...mainBtnRest } = mainButtonProps;\n    const { isDisabled: isMenuBtnDisabled, ...menuBtnRest } = menuButtonProps;\n\n    return {\n        mainButtonProps: {\n            contextCls: `${baseCls}__main-btn`,\n            ...mainBtnRest,\n            isDisabled: isDisabled || isMainBtnDisabled,\n        },\n        menuButtonProps: {\n            contextCls: `${baseCls}__menu-btn`,\n            ...menuBtnRest,\n            isDisabled: isDisabled || isMenuBtnDisabled,\n        },\n    };\n};\n\nexport const getShouldRenderBtnIcon = ({ isBusy = false, renderIcon }) =>\n    !isBusy && !!renderIcon;\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport ButtonIcon from './ButtonIcon';\nimport ButtonText from './ButtonText';\n\n// Utils\nimport { getShouldRenderBtnIcon } from '../utils/buttonUtils';\n\nconst ButtonMain = (props) => {\n    const {\n        baseCls,\n        contextCls,\n        text,\n        renderBusyIcon,\n        renderIcon,\n        isBusy,\n        isDynamicText,\n        children,\n    } = props;\n    const shouldRenderBtnIcon = getShouldRenderBtnIcon(props);\n    const ariaProps = { ...(isDynamicText && { 'aria-live': 'polite' }) };\n\n    return (\n        <span\n            {...ariaProps}\n            className={cx(`${baseCls}__content-container`, contextCls)}\n        >\n            {!children && (\n                <>\n                    {shouldRenderBtnIcon && (\n                        <ButtonIcon baseCls={baseCls} renderIcon={renderIcon} />\n                    )}\n                    {isBusy && (\n                        <ButtonIcon\n                            baseCls={baseCls}\n                            renderIcon={renderBusyIcon}\n                        />\n                    )}\n                    {!!text && (\n                        <ButtonText baseCls={baseCls}>{text}</ButtonText>\n                    )}\n                </>\n            )}\n            {children}\n        </span>\n    );\n};\n\nButtonMain.defaultProps = {\n    isBusy: false,\n    isDynamicText: false,\n};\n\nButtonMain.propTypes = {\n    baseCls: PropTypes.string.isRequired,\n    contextCls: PropTypes.string,\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    isBusy: PropTypes.bool,\n    isDynamicText: PropTypes.bool,\n    renderBusyIcon: PropTypes.func,\n    renderIcon: PropTypes.func,\n};\n\nexport default ButtonMain;\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { BankaiSpinner } from '@driponfleek/bankai-ui-icons';\nimport ButtonMain from './components/ButtonMain';\n\n// Utils\nimport { getBtnStateModCls, getBtnExtantProps } from './utils/buttonUtils';\n\n// Constants\nimport { BUTTON_BASE_CLS } from './const/baseClsConst';\n\n// Styles\nimport './styles/button.scss';\n\nconst Button = (props) => {\n    const {\n        contextCls,\n        type,\n        text,\n        isDisabled,\n        isBusy,\n        isDynamicText,\n        data,\n        onClick,\n        onFocus,\n        onBlur,\n        renderBusyIcon,\n        renderIcon,\n        children,\n    } = props;\n    const baseCls = BUTTON_BASE_CLS;\n    const btnProps = getBtnExtantProps(props);\n    const modCls = {\n        ...getBtnStateModCls({ isDisabled, isBusy }, baseCls),\n    };\n    const evtHandler = (propHandler) => (e) => {\n        if (!isBusy && !isDisabled) {\n            propHandler({ e, ...(data && { data }) });\n        }\n    };\n    const handleClick = evtHandler(onClick);\n    const handleBlur = evtHandler(onBlur);\n    const handleFocus = evtHandler(onFocus);\n\n    return (\n        <button\n            {...btnProps}\n            className={cx(baseCls, modCls, contextCls)}\n            // Disabling react/button-has-type due to\n            // https://github.com/yannickcr/eslint-plugin-react/issues/1555\n            // eslint-disable-next-line react/button-has-type\n            type={type}\n            onClick={handleClick}\n            onBlur={handleBlur}\n            onFocus={handleFocus}\n        >\n            <ButtonMain\n                baseCls={baseCls}\n                text={text}\n                renderBusyIcon={renderBusyIcon}\n                renderIcon={renderIcon}\n                isBusy={isBusy}\n                isDynamicText={isDynamicText}\n            >\n                {children}\n            </ButtonMain>\n        </button>\n    );\n};\n\nButton.defaultProps = {\n    type: 'button',\n    isBusy: false,\n    isDisabled: false,\n    isDynamicText: false,\n    onClick: () => Promise.resolve(),\n    onBlur: () => Promise.resolve(),\n    onFocus: () => Promise.resolve(),\n    renderBusyIcon: BankaiSpinner,\n};\n\nButton.propTypes = {\n    'aria-label': PropTypes.string,\n    contextCls: PropTypes.string,\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    type: PropTypes.oneOf(['button', 'submit']),\n    variant: PropTypes.string,\n    isDynamicText: PropTypes.bool,\n    isBusy: PropTypes.bool,\n    isDisabled: PropTypes.bool,\n    data: PropTypes.object,\n    onClick: PropTypes.func,\n    onBlur: PropTypes.func,\n    onFocus: PropTypes.func,\n    renderBusyIcon: PropTypes.func,\n    renderIcon: PropTypes.func,\n};\n\nexport default Button;\n"],"names":["BUTTON_BASE_CLS","BUTTON_SPLIT_BASE_CLS","ButtonIcon","props","renderIcon","baseCls","baseIconCls","jsx","PropTypes","ButtonIcon$1","ButtonText","children","ButtonText$1","getBtnDisabledModCls","isDisabled","getBtnStateModCls","isBusy","getLinkBtnExtantProps","contextCls","text","data","onClick","rest","getBtnExtantProps","ariaLabel","type","variant","isDynamicText","renderBusyIcon","getMenuBtnExtantProps","btnContextCls","shouldCloseOnBlur","shouldCloseOnSelection","wrapperProps","menuProps","menuOptions","onSelection","onMenuToggle","renderMenuOption","getSplitBtnSanatizedProps","mainButtonProps","menuButtonProps","isMainBtnDisabled","mainBtnRest","isMenuBtnDisabled","menuBtnRest","getShouldRenderBtnIcon","ButtonMain","shouldRenderBtnIcon","ariaProps","jsxs","cx","Fragment","ButtonMain$1","Button","onFocus","onBlur","btnProps","modCls","evtHandler","propHandler","e","handleClick","handleBlur","handleFocus","BankaiSpinner","BankaiButton"],"mappings":"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"}