{"version":3,"file":"DesignTokenNamingConventions.stories-5a8d69ce.js","sources":["../../stories/everyone/tokens/sections/naming-convention-and-strat/SectionIntro.jsx","../../stories/everyone/tokens/components/DesignTokenDefinitionList.jsx","../../stories/everyone/tokens/sections/naming-convention-and-strat/SectionComponentTokens.jsx","../../stories/everyone/tokens/sections/naming-convention-and-strat/SectionCoreTokens.jsx","../../stories/everyone/tokens/sections/naming-convention-and-strat/SectionSemanticTokens.jsx","../../stories/everyone/tokens/StoryDesignTokenNamingConventionAndStrat.jsx"],"sourcesContent":["import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionIntro = () => (\n    <StorySection>\n        <Paragraph>\n            This strategy organizes design tokens into three levels (\n            <strong>Core</strong>, <strong>Semantic</strong>, and{' '}\n            <strong>Component</strong>) with a clear, scalable naming structure.\n            It ensures consistency, clarity, and flexibility, providing a shared\n            foundation for designers and developers.\n        </Paragraph>\n    </StorySection>\n);\n\nexport default SectionIntro;\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { BASE_CLS_NAMING_CONVENTION_STRAT } from '../const/storyConst';\n\n// Styles\nimport './styles/design-token-definition-list.scss';\n\nconst DesignTokenDefinitionList = (props) => {\n    const { contextCls, term, children } = props;\n    const baseCls = `${BASE_CLS_NAMING_CONVENTION_STRAT}__dl`;\n\n    return (\n        <dl className={cx(baseCls, contextCls)}>\n            <dt className={`${baseCls}-dt`}>\n                <strong>{term}</strong>\n            </dt>\n            <dd className={`${baseCls}-dd`}>{children}</dd>\n        </dl>\n    );\n};\n\nDesignTokenDefinitionList.propTypes = {\n    contextCls: PropTypes.string,\n};\n\nexport default DesignTokenDefinitionList;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    SectionTitle,\n    CodeTag,\n} from '@driponfleek/bankai-lib-storybook';\nimport DesignTokenDefinitionList from '../../components/DesignTokenDefinitionList';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionComponentTokens = () => (\n    <StorySection>\n        <SectionTitle>\n            {getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.componentDesignTokens.title',\n            )}\n        </SectionTitle>\n        <Paragraph>\n            Component tokens define styles scoped to specific UI components\n            (e.g., buttons, modals). They inherit values from semantic tokens\n            and are tailored for precise use cases.\n        </Paragraph>\n        <DesignTokenDefinitionList\n            term={getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.namingConvention.title',\n            )}\n        >\n            <CodeTag>[component]-[role]-[variant]-[state]-[property]</CodeTag>\n        </DesignTokenDefinitionList>\n        <DesignTokenDefinitionList\n            term={getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.nameAnatomyBreakdown.title',\n            )}\n        >\n            <OmniList>\n                <OmniListItem>\n                    <CodeTag>[component]</CodeTag>&#58; The component&apos;s\n                    name (e.g., <strong>button</strong>, <strong>card</strong>,{' '}\n                    <strong>modal</strong>)\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[role]</CodeTag>&#58; High-level purpose of the\n                    component role (e.g., <strong>primary</strong>,{' '}\n                    <strong>secondary</strong>).\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[variant]</CodeTag>&#58; Style variations within\n                    the role (e.g., <strong>destructive</strong>,{' '}\n                    <strong>outline</strong>).\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[state]</CodeTag>&#58; Interaction state of the\n                    component (e.g., <strong>resting</strong>,{' '}\n                    <strong>hover</strong>, <strong>focus</strong>).\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[property]</CodeTag>&#58; Specific property\n                    affected (e.g., <strong>bg-color</strong>,{' '}\n                    <strong>border</strong>, <strong>font</strong>).\n                </OmniListItem>\n            </OmniList>\n        </DesignTokenDefinitionList>\n    </StorySection>\n);\n\nexport default SectionComponentTokens;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    SectionTitle,\n    CodeTag,\n} from '@driponfleek/bankai-lib-storybook';\nimport DesignTokenDefinitionList from '../../components/DesignTokenDefinitionList';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionCoreTokens = () => (\n    <StorySection>\n        <SectionTitle>\n            {getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.coreDesignTokens.title',\n            )}\n        </SectionTitle>\n        <Paragraph>\n            Core tokens represent raw, neutral, and unopinionated values. They\n            act as the atomic building blocks of the design system and are never\n            used directly in the UI.\n        </Paragraph>\n        <DesignTokenDefinitionList\n            term={getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.namingConvention.title',\n            )}\n        >\n            <CodeTag>core-[category]-[property]-[value/level]</CodeTag>\n        </DesignTokenDefinitionList>\n        <DesignTokenDefinitionList\n            term={getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.nameAnatomyBreakdown.title',\n            )}\n        >\n            <OmniList>\n                <OmniListItem>\n                    <CodeTag>core</CodeTag>&#58; Prefix indicating the token\n                    belongs to the core level.\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[category]</CodeTag>&#58; Broad category of the\n                    token (e.g., <strong>color</strong>,{' '}\n                    <strong>spacing</strong>, <strong>typography</strong>).\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[property]</CodeTag>&#58; Specific property of the\n                    category (e.g., <strong>neutral</strong>,{' '}\n                    <strong>size</strong>, <strong>radius</strong>).\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[value/level]</CodeTag>&#58; Value or scale level\n                    (e.g., <strong>100</strong>, <strong>16</strong>,{' '}\n                    <strong>4</strong>).\n                </OmniListItem>\n            </OmniList>\n        </DesignTokenDefinitionList>\n    </StorySection>\n);\n\nexport default SectionCoreTokens;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    SectionTitle,\n    CodeTag,\n} from '@driponfleek/bankai-lib-storybook';\nimport DesignTokenDefinitionList from '../../components/DesignTokenDefinitionList';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionSemanticTokens = () => (\n    <StorySection>\n        <SectionTitle>\n            {getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.semanticDesignTokens.title',\n            )}\n        </SectionTitle>\n        <Paragraph>\n            Semantic tokens translate core tokens or direct values into\n            meaningful roles such as <strong>primary</strong>,{' '}\n            <strong>success</strong>, or <strong>accessible</strong>. They\n            provide a layer of abstraction for specific use cases and ensure\n            consistency and reusability across components.\n        </Paragraph>\n        <DesignTokenDefinitionList\n            term={getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.namingConvention.title',\n            )}\n            convention=\"\"\n        >\n            <CodeTag>\n                semantic-[category]-[role]-[state/variant]-[property]\n            </CodeTag>\n        </DesignTokenDefinitionList>\n        <DesignTokenDefinitionList\n            term={getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.nameAnatomyBreakdown.title',\n            )}\n        >\n            <OmniList>\n                <OmniListItem>\n                    <CodeTag>semantic</CodeTag>&#58; Prefix indicating the token\n                    belongs to the semantic layer.\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[category]</CodeTag>&#58; Broad category of the\n                    token (e.g., <strong>color</strong>,{' '}\n                    <strong>spacing</strong>, <strong>typography</strong>).\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[role]</CodeTag>&#58; Context-specific role (e.g.,{' '}\n                    <strong>primary</strong>, <strong>error</strong>,{' '}\n                    <strong>accessible</strong>).\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[state/variant]</CodeTag>&#58; Interaction state or\n                    contextual variant (e.g., <strong>hover</strong>,{' '}\n                    <strong>resting</strong>).\n                </OmniListItem>\n                <OmniListItem>\n                    <CodeTag>[property]</CodeTag>&#58; Specific property of the\n                    category (e.g., <strong>bg-color</strong>,{' '}\n                    <strong>border</strong>).\n                </OmniListItem>\n            </OmniList>\n        </DesignTokenDefinitionList>\n    </StorySection>\n);\n\nexport default SectionSemanticTokens;\n","import {\n    STORY_SUB_TITLE,\n    BASE_CLS_NAMING_CONVENTION_STRAT,\n} from './const/storyConst';\nimport SectionIntro from './sections/naming-convention-and-strat/SectionIntro';\nimport SectionComponentTokens from './sections/naming-convention-and-strat/SectionComponentTokens';\nimport SectionCoreTokens from './sections/naming-convention-and-strat/SectionCoreTokens';\nimport SectionSemanticTokens from './sections/naming-convention-and-strat/SectionSemanticTokens';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\n\nconst StoryDesignTokenNamingConventionAndStrat = () => {\n    return (\n        <StoryLayout\n            contextCls={BASE_CLS_NAMING_CONVENTION_STRAT}\n            title={getLocale(\n                'stories.everyone.designTokens.namingAndStrategy.title',\n            )}\n            subTitle={STORY_SUB_TITLE}\n        >\n            <SectionIntro />\n            <SectionCoreTokens />\n            <SectionSemanticTokens />\n            <SectionComponentTokens />\n        </StoryLayout>\n    );\n};\n\nexport default StoryDesignTokenNamingConventionAndStrat;\n"],"names":["SectionIntro","jsx","StorySection","Paragraph","DesignTokenDefinitionList","props","contextCls","term","children","baseCls","BASE_CLS_NAMING_CONVENTION_STRAT","cx","PropTypes","SectionComponentTokens","jsxs","SectionTitle","getLocale","CodeTag","OmniList","OmniListItem","SectionCoreTokens","SectionSemanticTokens","StoryDesignTokenNamingConventionAndStrat","StoryLayout","STORY_SUB_TITLE"],"mappings":"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"}