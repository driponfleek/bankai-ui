{"version":3,"file":"Color.stories-567d6649.js","sources":["../../stories/foundation/colors/sections/core/SectionWhenToUseNeutrals.jsx","../../sb-components/lists/ColorTokenCardList.jsx","../../stories/foundation/colors/sections/core/SectionNeutrals.jsx","../../stories/foundation/colors/StoryColorCore.jsx","../../stories/foundation/colors/sections/data/SectionIntro.jsx","../../stories/foundation/colors/components/DataVisPaletteListItem.jsx","../../stories/foundation/colors/utils/dataVisStoryUtils.js","../../stories/foundation/colors/sections/data/SectionFoundationalColors.jsx","../../stories/foundation/colors/sections/data/SectionDivergingColors.jsx","../../stories/foundation/colors/sections/data/SectionQualitativeColors.jsx","../../stories/foundation/colors/sections/data/SectionSequentialColors.jsx","../../stories/foundation/colors/StoryColorDataVis.jsx","../../stories/foundation/colors/sections/semantic/SectionIntro.jsx","../../stories/foundation/colors/StoryColorSemantic.jsx"],"sourcesContent":["import {\n    StorySection,\n    SectionTitle,\n    CodeTag,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\n\nconst SectionWhenToUseNeutrals = () => {\n    return (\n        <StorySection contextCls={genSBBaseCls('color-swatch-list')}>\n            <SectionTitle headingLvl={3}>When to Use Neutrals</SectionTitle>\n            <Paragraph>Neutrals are suitable for&#58;</Paragraph>\n            <OmniList>\n                <OmniListItem>Text</OmniListItem>\n                <OmniListItem>Backgrounds</OmniListItem>\n                <OmniListItem>Borders and Dividers</OmniListItem>\n                <OmniListItem>Disabled Elements</OmniListItem>\n            </OmniList>\n            <Paragraph>\n                <strong>Never use Neutral Color design tokens directly.</strong>{' '}\n                When you need a neutral color, consider these as the available\n                options for semantic and component token aliases. For example,\n                instead of using <CodeTag>core.color.neutral.100</CodeTag> as a\n                page background, use it as the seed value for a semantic design\n                token such as <CodeTag>semantic.color.canvas</CodeTag> and use\n                the semantic design token instead.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionWhenToUseNeutrals;\n","import { Children, useMemo } from 'react';\nimport { ColorSwatch, genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\n\n// Styles\nimport './styles/color-token-card-list.scss';\n\nconst ColorTokenCardList = ({ listData = [] }) => (\n    <div className={genSBBaseCls('color-token-card-list')}>\n        {Children.toArray(\n            useMemo(\n                () =>\n                    listData.map((color) => <ColorSwatch {...color} isCard />),\n                [listData],\n            ),\n        )}\n    </div>\n);\n\nexport default ColorTokenCardList;\n","import {\n    StorySection,\n    SectionTitle,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport {\n    genCustomNeutralColors,\n    massageConstToDotNotation,\n} from '@driponfleek/bankai-lib-theme-utils';\nimport SectionWhenToUseNeutrals from './SectionWhenToUseNeutrals';\nimport ColorTokenCardList from '../../../../../sb-components/lists/ColorTokenCardList';\n\nconst SectionNeutrals = () => {\n    const neutralColors = genCustomNeutralColors();\n    const listData = Object.keys(neutralColors).map((neutralKey) => ({\n        mainContent: `Neutral ${neutralKey.replace('core.color.neutral.', '')}`,\n        color: neutralColors[neutralKey],\n        metaList: [\n            massageConstToDotNotation(neutralKey),\n            neutralColors[neutralKey],\n        ],\n    }));\n\n    return (\n        <StorySection contextCls={genSBBaseCls('color-swatch-list')}>\n            <SectionTitle>Neutrals</SectionTitle>\n            <StorySection>\n                <ColorTokenCardList listData={listData} />\n            </StorySection>\n            <SectionWhenToUseNeutrals />\n        </StorySection>\n    );\n};\n\nexport default SectionNeutrals;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport SectionNeutrals from './sections/core/SectionNeutrals';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\nimport { getLocale } from '../../../utils/localeUtils';\nimport { getFoundationTitle } from '../../../utils/storiesConfigUtils';\n\nconst StoryColorCore = () => {\n    const baseCls = genSBBaseCls('foundation-color-core');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale('stories.foundation.color.core.title')}\n            subTitle={getFoundationTitle(\n                getLocale('stories.foundation.color.categoryTitle'),\n            )}\n        >\n            <SectionNeutrals />\n        </StoryLayout>\n    );\n};\n\nexport default StoryColorCore;\n","import {\n    StorySection,\n    // SectionTitle,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport {\n    Paragraph,\n    // OmniList,\n    // OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionIntro = () => {\n    return (\n        <StorySection contextCls={genSBBaseCls('color-swatch-list')}>\n            <Paragraph>\n                {getLocale('designSystemName')} includes a set of palettes from{' '}\n                <Hyperlink\n                    href=\"https://colorbrewer2.org/\"\n                    shouldOpenInNewWindow\n                >\n                    ColorBrewer\n                </Hyperlink>{' '}\n                that are designed to be colorblind-friendlyâ€”meaning the colors\n                are easier to tell apart for people with common forms of color\n                vision deficiency. Each one sticks to the number of colors\n                recommended by ColorBrewer for that purpose. They&apos;re great\n                defaults for visualizations, and if you need more control, you\n                can always build your own.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionIntro;\n","import ColorDesignTokenListItem from '../../../../sb-components/lists/ColorDesignTokenListItem';\n\nconst DataVisPaletteListItem = (props) => {\n    const { color, mainContent } = props ?? {};\n\n    return <ColorDesignTokenListItem token={mainContent} color={color} />;\n};\n\nexport default DataVisPaletteListItem;\n","/* eslint-disable import/prefer-default-export */\nimport {\n    genBrewerDivergingTokens,\n    genBrewerQualitativeTokens,\n    genBrewerSequentialTokens,\n} from '@driponfleek/bankai-lib-theme-utils';\n\nexport const getFoundationalTokenVals = () => {\n    const htmlDOM = document.getElementsByTagName('html')[0];\n    const styles = window.getComputedStyle(htmlDOM);\n    const axisColor = styles.getPropertyValue(\n        '--bankai-utility-color-data-axis',\n    );\n    const canvasColor = styles.getPropertyValue(\n        '--bankai-utility-color-data-canvas',\n    );\n    const gridColor = styles.getPropertyValue(\n        '--bankai-utility-color-data-grid',\n    );\n\n    return {\n        axisColor,\n        canvasColor,\n        gridColor,\n    };\n};\n\nexport const getDivergingTokenVals = () => {\n    const tokens = genBrewerDivergingTokens();\n    const tokenNames = Object.keys(tokens);\n\n    return tokenNames.reduce(\n        (acc, tokenName) => {\n            const accClone = { ...acc };\n            const val = { mainContent: tokenName, color: tokens[tokenName] };\n\n            switch (true) {\n                case tokenName.includes('brbg'):\n                    accClone.brbg.push(val);\n                    break;\n                case tokenName.includes('piyg'):\n                    accClone.piyg.push(val);\n                    break;\n                case tokenName.includes('prgn'):\n                    accClone.prgn.push(val);\n                    break;\n                case tokenName.includes('puor'):\n                    accClone.puor.push(val);\n                    break;\n                case tokenName.includes('rdbu'):\n                    accClone.rdbu.push(val);\n                    break;\n                case tokenName.includes('rdylbu'):\n                    accClone.rdylbu.push(val);\n                    break;\n                default:\n                    break;\n            }\n\n            return accClone;\n        },\n        {\n            brbg: [],\n            piyg: [],\n            prgn: [],\n            puor: [],\n            rdbu: [],\n            rdylbu: [],\n        },\n    );\n};\n\nexport const getQualitativeTokenVals = () => {\n    const tokens = genBrewerQualitativeTokens();\n    const tokenNames = Object.keys(tokens);\n\n    return tokenNames.reduce(\n        (acc, tokenName) => {\n            const accClone = { ...acc };\n            const val = { mainContent: tokenName, color: tokens[tokenName] };\n\n            switch (true) {\n                case tokenName.includes('dark2'):\n                    accClone.dark2.push(val);\n                    break;\n                case tokenName.includes('paired'):\n                    accClone.paired.push(val);\n                    break;\n                case tokenName.includes('set2'):\n                    accClone.set2.push(val);\n                    break;\n                default:\n                    break;\n            }\n\n            return accClone;\n        },\n        {\n            dark2: [],\n            paired: [],\n            set2: [],\n        },\n    );\n};\n\nexport const getSequentialTokenVals = () => {\n    const tokens = genBrewerSequentialTokens();\n    const tokenNames = Object.keys(tokens);\n\n    return tokenNames.reduce(\n        (acc, tokenName) => {\n            const accClone = { ...acc };\n            const val = { mainContent: tokenName, color: tokens[tokenName] };\n            let palette;\n\n            switch (true) {\n                case tokenName.includes('blues'):\n                    palette = 'blues';\n                    break;\n                case tokenName.includes('.bugn.'):\n                    palette = 'bugn';\n                    break;\n                case tokenName.includes('bupu'):\n                    palette = 'bupu';\n                    break;\n                case tokenName.includes('.gnbu.'):\n                    palette = 'gnbu';\n                    break;\n                case tokenName.includes('greens'):\n                    palette = 'greens';\n                    break;\n                case tokenName.includes('greys'):\n                    palette = 'greys';\n                    break;\n                case tokenName.includes('oranges'):\n                    palette = 'oranges';\n                    break;\n                case tokenName.includes('.orrd.'):\n                    palette = 'orrd';\n                    break;\n                case tokenName.includes('.pubu.'):\n                    palette = 'pubu';\n                    break;\n                case tokenName.includes('pubugn'):\n                    palette = 'pubugn';\n                    break;\n                case tokenName.includes('purd'):\n                    palette = 'purd';\n                    break;\n                case tokenName.includes('purples'):\n                    palette = 'purples';\n                    break;\n                case tokenName.includes('rdpu'):\n                    palette = 'rdpu';\n                    break;\n                case tokenName.includes('reds'):\n                    palette = 'reds';\n                    break;\n                case tokenName.includes('.ylgn.'):\n                    palette = 'ylgn';\n                    break;\n                case tokenName.includes('ylgnbu'):\n                    palette = 'ylgnbu';\n                    break;\n                case tokenName.includes('ylorbr'):\n                    palette = 'ylorbr';\n                    break;\n                case tokenName.includes('ylorrd'):\n                    palette = 'ylorrd';\n                    break;\n                default:\n                    break;\n            }\n\n            if (palette) {\n                accClone[palette].push(val);\n            }\n\n            return accClone;\n        },\n        {\n            blues: [],\n            bugn: [],\n            bupu: [],\n            gnbu: [],\n            greens: [],\n            greys: [],\n            oranges: [],\n            orrd: [],\n            pubu: [],\n            pubugn: [],\n            purd: [],\n            purples: [],\n            rdpu: [],\n            reds: [],\n            ylgn: [],\n            ylgnbu: [],\n            ylorbr: [],\n            ylorrd: [],\n        },\n    );\n};\n","import { useEffect, useCallback, useReducer } from 'react';\nimport { reducer } from '@driponfleek/bankai-lib-helper-utils';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport ColorTokenTileList from '../../../../../sb-components/lists/ColorTokenTileList';\nimport DataVisPaletteListItem from '../../components/DataVisPaletteListItem';\n\n// Utils\nimport { getFoundationalTokenVals } from '../../utils/dataVisStoryUtils';\n\nconst SectionFoundationalColors = () => {\n    const htmlDOM = document.getElementsByTagName('html')[0];\n    const [colors, dispatch] = useReducer(reducer, getFoundationalTokenVals());\n    const { axisColor, canvasColor, gridColor } = colors;\n\n    const handleMutationChange = useCallback((mutationList = []) => {\n        const hasClassChange =\n            mutationList.findIndex(\n                (mutation) => mutation.attributeName === 'class',\n            ) > -1;\n\n        if (hasClassChange) {\n            setTimeout(() => {\n                dispatch(getFoundationalTokenVals());\n            }, 0);\n        }\n    }, []);\n\n    useEffect(() => {\n        const classChangeObserver = new MutationObserver(handleMutationChange);\n        classChangeObserver.observe(htmlDOM, {\n            attributes: true,\n        });\n\n        if (!colors?.axisColor) {\n            dispatch(getFoundationalTokenVals());\n        }\n\n        return () => {\n            classChangeObserver.disconnect();\n        };\n    }, [handleMutationChange, htmlDOM, colors]);\n    const data = [\n        { mainContent: 'utility.color.data.canvas', color: canvasColor },\n        { mainContent: 'utility.color.data.axis', color: axisColor },\n        { mainContent: 'utility.color.data.grid', color: gridColor },\n    ];\n\n    return (\n        <StorySection>\n            <SectionTitle>Foundational Colors</SectionTitle>\n            <Paragraph>\n                Canvas, Axis, and Grid colors provide the structural baseline\n                for charts.\n            </Paragraph>\n            <ColorTokenTileList\n                data={data}\n                renderListItem={DataVisPaletteListItem}\n            />\n        </StorySection>\n    );\n};\n\nexport default SectionFoundationalColors;\n","import { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport ColorTokenTileList from '../../../../../sb-components/lists/ColorTokenTileList';\nimport DataVisPaletteListItem from '../../components/DataVisPaletteListItem';\nimport { getLocale } from '../../../../../utils/localeUtils';\n\n// Utils\nimport { getDivergingTokenVals } from '../../utils/dataVisStoryUtils';\n\nconst SectionDivergingColors = () => {\n    const { brbg, piyg, prgn, puor, rdbu, rdylbu } = getDivergingTokenVals();\n    const renderPalette = (data) => (\n        <ColorTokenTileList\n            data={data}\n            renderListItem={DataVisPaletteListItem}\n        />\n    );\n\n    return (\n        <StorySection>\n            <SectionTitle>\n                {getLocale(\n                    'stories.foundation.color.dataVis.brewerCategory.diverging.title',\n                )}\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Diverging palettes are ideal for data that centers around a\n                    meaningful midpointâ€”like zero, average, or a baselineâ€”where\n                    values can go above or below that point. They use\n                    contrasting colors at each end with a neutral or lighter\n                    tone in the middle, making it easy to spot positive vs.\n                    negative trends or deviations from a norm.\n                </Paragraph>\n                <Paragraph>\n                    Use diverging palettes when you want to&#58;\n                </Paragraph>\n                <OmniList>\n                    <OmniListItem>\n                        Show change, difference, or deviation (e.g., gain vs.\n                        loss).\n                    </OmniListItem>\n                    <OmniListItem>\n                        Emphasize values moving in two directions from a center\n                        point.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Help users quickly identify which side of the midpoint a\n                        value falls on.\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.diverging.palette.brbg',\n                    )}\n                </SectionTitle>\n                {renderPalette(brbg)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.diverging.palette.piyg',\n                    )}\n                </SectionTitle>\n                {renderPalette(piyg)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    PRGn &#40;Purple to Green&#41;\n                </SectionTitle>\n                {renderPalette(prgn)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.diverging.palette.puor',\n                    )}\n                </SectionTitle>\n                {renderPalette(puor)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.diverging.palette.rdbu',\n                    )}\n                </SectionTitle>\n                {renderPalette(rdbu)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.diverging.palette.rdylbu',\n                    )}\n                </SectionTitle>\n                {renderPalette(rdylbu)}\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionDivergingColors;\n","import { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport ColorTokenTileList from '../../../../../sb-components/lists/ColorTokenTileList';\nimport DataVisPaletteListItem from '../../components/DataVisPaletteListItem';\nimport { getLocale } from '../../../../../utils/localeUtils';\n\n// Utils\nimport { getQualitativeTokenVals } from '../../utils/dataVisStoryUtils';\n\nconst SectionQualitativeColors = () => {\n    const { dark2, paired, set2 } = getQualitativeTokenVals();\n    const renderPalette = (data) => (\n        <ColorTokenTileList\n            data={data}\n            renderListItem={DataVisPaletteListItem}\n        />\n    );\n\n    return (\n        <StorySection>\n            <SectionTitle>\n                {getLocale(\n                    'stories.foundation.color.dataVis.brewerCategory.qualitative.title',\n                )}\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Qualitative palettes are designed for categorical dataâ€”where\n                    colors represent distinct groups or labels without any\n                    inherent order or progression. Each color is visually\n                    distinct but carries equal weight, making these palettes\n                    great for comparisons where no single item should stand out\n                    more than another.\n                </Paragraph>\n                <Paragraph>\n                    Use qualitative palettes when you want to&#58;\n                </Paragraph>\n                <OmniList>\n                    <OmniListItem>\n                        Represent categories, groups, or segments.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Show labels like departments, user types, or regions.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Avoid implying hierarchy or value with color.\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.qualitative.palette.dark2',\n                    )}\n                </SectionTitle>\n                {renderPalette(dark2)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.qualitative.palette.paired',\n                    )}\n                </SectionTitle>\n                {renderPalette(paired)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.qualitative.palette.set2',\n                    )}\n                </SectionTitle>\n                {renderPalette(set2)}\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionQualitativeColors;\n","import { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport ColorTokenTileList from '../../../../../sb-components/lists/ColorTokenTileList';\nimport DataVisPaletteListItem from '../../components/DataVisPaletteListItem';\nimport { getLocale } from '../../../../../utils/localeUtils';\n\n// Utils\nimport { getSequentialTokenVals } from '../../utils/dataVisStoryUtils';\n\nconst SectionSequentialColors = () => {\n    const {\n        blues,\n        bugn,\n        bupu,\n        gnbu,\n        greens,\n        greys,\n        oranges,\n        orrd,\n        pubu,\n        pubugn,\n        purd,\n        purples,\n        rdpu,\n        reds,\n        ylgn,\n        ylgnbu,\n        ylorbr,\n        ylorrd,\n    } = getSequentialTokenVals();\n    const renderPalette = (data) => (\n        <ColorTokenTileList\n            data={data}\n            renderListItem={DataVisPaletteListItem}\n        />\n    );\n\n    return (\n        <StorySection>\n            <SectionTitle>\n                {getLocale(\n                    'stories.foundation.color.dataVis.brewerCategory.sequential.title',\n                )}\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Sequential palettes are meant for ordered data that\n                    progresses from low to high. These palettes typically vary\n                    in lightness, sometimes hue, to create a smooth gradient.\n                    Lighter shades represent lower values; darker or more\n                    intense shades represent higher values.\n                </Paragraph>\n                <Paragraph>\n                    Use sequential palettes when you want to&#58;\n                </Paragraph>\n                <OmniList>\n                    <OmniListItem>\n                        Show magnitude or quantity (e.g., counts, percentages).\n                    </OmniListItem>\n                    <OmniListItem>\n                        Highlight progression, intensity, or density.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Visualize values along a continuous scale.\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.blues',\n                    )}\n                </SectionTitle>\n                {renderPalette(blues)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.bugn',\n                    )}\n                </SectionTitle>\n                {renderPalette(bugn)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.bupu',\n                    )}\n                </SectionTitle>\n                {renderPalette(bupu)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.gnbu',\n                    )}\n                </SectionTitle>\n                {renderPalette(gnbu)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.greens',\n                    )}\n                </SectionTitle>\n                {renderPalette(greens)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.greys',\n                    )}\n                </SectionTitle>\n                {renderPalette(greys)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.oranges',\n                    )}\n                </SectionTitle>\n                {renderPalette(oranges)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.orrd',\n                    )}\n                </SectionTitle>\n                {renderPalette(orrd)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.pubu',\n                    )}\n                </SectionTitle>\n                {renderPalette(pubu)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.pubugn',\n                    )}\n                </SectionTitle>\n                {renderPalette(pubugn)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.purd',\n                    )}\n                </SectionTitle>\n                {renderPalette(purd)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.purples',\n                    )}\n                </SectionTitle>\n                {renderPalette(purples)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.rdpu',\n                    )}\n                </SectionTitle>\n                {renderPalette(rdpu)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.reds',\n                    )}\n                </SectionTitle>\n                {renderPalette(reds)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.ylgn',\n                    )}\n                </SectionTitle>\n                {renderPalette(ylgn)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.ylgnbu',\n                    )}\n                </SectionTitle>\n                {renderPalette(ylgnbu)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.ylorbr',\n                    )}\n                </SectionTitle>\n                {renderPalette(ylorbr)}\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    {getLocale(\n                        'stories.foundation.color.dataVis.brewerCategory.sequential.palette.ylorrd',\n                    )}\n                </SectionTitle>\n                {renderPalette(ylorrd)}\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionSequentialColors;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport SectionIntro from './sections/data/SectionIntro';\nimport SectionFoundationalColors from './sections/data/SectionFoundationalColors';\nimport SectionDivergingColors from './sections/data/SectionDivergingColors';\nimport SectionQualitativeColors from './sections/data/SectionQualitativeColors';\nimport SectionSequentialColors from './sections/data/SectionSequentialColors';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\nimport { getLocale } from '../../../utils/localeUtils';\nimport { getFoundationTitle } from '../../../utils/storiesConfigUtils';\n\nconst StoryColorDataVis = () => {\n    const baseCls = genSBBaseCls('foundation-color-data-vis');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale('stories.foundation.color.dataVis.title')}\n            subTitle={getFoundationTitle(\n                getLocale('stories.foundation.color.categoryTitle'),\n            )}\n        >\n            <SectionIntro />\n            <SectionFoundationalColors />\n            <SectionDivergingColors />\n            <SectionQualitativeColors />\n            <SectionSequentialColors />\n        </StoryLayout>\n    );\n};\n\nexport default StoryColorDataVis;\n","import {\n    StorySection,\n    // SectionTitle,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport {\n    Paragraph,\n    // OmniList,\n    // OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\n\nconst SectionIntro = () => {\n    return (\n        <StorySection contextCls={genSBBaseCls('color-swatch-list')}>\n            <Paragraph>Coming Soon.</Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionIntro;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport SectionIntro from './sections/semantic/SectionIntro';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\nimport { getLocale } from '../../../utils/localeUtils';\nimport { getFoundationTitle } from '../../../utils/storiesConfigUtils';\n\nconst StoryColorSemantic = () => {\n    const baseCls = genSBBaseCls('foundation-color-semantic');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale('stories.foundation.color.semantic.title')}\n            subTitle={getFoundationTitle(\n                getLocale('stories.foundation.color.categoryTitle'),\n            )}\n        >\n            <SectionIntro />\n        </StoryLayout>\n    );\n};\n\nexport default StoryColorSemantic;\n"],"names":["SectionWhenToUseNeutrals","jsxs","StorySection","genSBBaseCls","jsx","SectionTitle","Paragraph","OmniList","OmniListItem","CodeTag","ColorTokenCardList","listData","Children","useMemo","color","ColorSwatch","SectionNeutrals","neutralColors","genCustomNeutralColors","neutralKey","massageConstToDotNotation","StoryColorCore","baseCls","StoryLayout","getLocale","getFoundationTitle","SectionIntro","Hyperlink","DataVisPaletteListItem","props","mainContent","ColorDesignTokenListItem","getFoundationalTokenVals","htmlDOM","styles","axisColor","canvasColor","gridColor","getDivergingTokenVals","tokens","genBrewerDivergingTokens","acc","tokenName","accClone","val","getQualitativeTokenVals","genBrewerQualitativeTokens","getSequentialTokenVals","genBrewerSequentialTokens","palette","SectionFoundationalColors","colors","dispatch","useReducer","reducer","handleMutationChange","useCallback","mutationList","mutation","useEffect","classChangeObserver","ColorTokenTileList","SectionDivergingColors","brbg","piyg","prgn","puor","rdbu","rdylbu","renderPalette","data","SectionQualitativeColors","dark2","paired","set2","SectionSequentialColors","blues","bugn","bupu","gnbu","greens","greys","oranges","orrd","pubu","pubugn","purd","purples","rdpu","reds","ylgn","ylgnbu","ylorbr","ylorrd","StoryColorDataVis","StoryColorSemantic"],"mappings":"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"}