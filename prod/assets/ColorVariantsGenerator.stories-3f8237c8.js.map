{"version":3,"file":"ColorVariantsGenerator.stories-3f8237c8.js","sources":["../../../storybook-lib/src/components/docblocks/color/ColorVariantsLI.jsx","../../../storybook-lib/src/components/docblocks/color/ColorVariantsList.jsx","../../stories/designers/working-with-color/sections/color-variant-generator/SectionForm.jsx","../../stories/designers/working-with-color/sections/color-variant-generator/SectionVariants.jsx","../../stories/designers/working-with-color/StoryColorVariantsGen.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport ColorSwatch from './ColorSwatch';\n\n// Utils\nimport { genSBBaseCls } from '../../../utils/storiesConfigUtils';\n\nconst ColorVariantsLI = (props) => {\n    const baseCls = genSBBaseCls('color-variants-list__item');\n    const { item } = props;\n\n    return (\n        <li className={baseCls}>\n            <ColorSwatch {...item} />\n        </li>\n    );\n};\n\nColorVariantsLI.propTypes = {\n    item: PropTypes.object,\n};\n\nexport default ColorVariantsLI;\n","import { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Callout } from '@driponfleek/bankai-ui-callouts';\nimport { BankaiColorPalette } from '@driponfleek/bankai-ui-icons';\nimport ColorVariantsLI from './ColorVariantsLI';\n\n// Utils\nimport { genSBBaseCls } from '../../../utils/storiesConfigUtils';\n\n// Styles\nimport './styles/color-variants-list.scss';\n\nconst ColorVariantsList = (props) => {\n    const { contextCls, emptyStateTitle, variants, shouldScrollList } = props;\n    const baseCls = genSBBaseCls('color-variants-list');\n    const hasNoVariants = variants.length === 0;\n    const modCls = {\n        [`${baseCls}--scrollable`]: !hasNoVariants && shouldScrollList,\n        [`${baseCls}--empty`]: hasNoVariants,\n    };\n    const childItems = Children.toArray(\n        variants.map((item) => <ColorVariantsLI item={item} />),\n    );\n    const renderEmptyIcon = (iconCls) => (\n        <BankaiColorPalette contextCls={iconCls} />\n    );\n\n    return (\n        <div className={cx(baseCls, modCls, contextCls)}>\n            {!hasNoVariants && (\n                <ul className={`${baseCls}__inner`}>{childItems}</ul>\n            )}\n            {hasNoVariants && (\n                <Callout title={emptyStateTitle} renderIcon={renderEmptyIcon} />\n            )}\n        </div>\n    );\n};\n\nColorVariantsList.defaultProps = {\n    shouldScrollList: true,\n    variants: [],\n};\n\nColorVariantsList.propTypes = {\n    contextCls: PropTypes.string,\n    emptyStateTitle: PropTypes.string,\n    shouldScrollList: PropTypes.bool,\n    variants: PropTypes.arrayOf(\n        PropTypes.shape({\n            mainContent: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.element,\n            ]),\n            metaList: PropTypes.arrayOf(\n                PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n            ),\n        }),\n    ),\n};\n\nexport default ColorVariantsList;\n","import PropTypes from 'prop-types';\nimport {\n    FormLayout,\n    FormLayoutSection,\n    DynamicFormRow,\n} from '@driponfleek/bankai-ui-layouts';\nimport { StorySection } from '@driponfleek/bankai-lib-storybook';\nimport ColorPickerField from '../../../../../sb-components/form-elements/ColorPickerField';\nimport ToggleSwitchField from '../../../../../sb-components/form-elements/ToggleSwitchField';\n\nconst SectionForm = (props) => {\n    const {\n        baseCls,\n        sourceColor,\n        shouldShowMaxVariants,\n        onColorChange,\n        onToggleChange,\n    } = props;\n\n    return (\n        <StorySection>\n            <FormLayout>\n                <FormLayoutSection>\n                    <DynamicFormRow\n                        contextCls={`${baseCls}__settings-container`}\n                    >\n                        <ColorPickerField\n                            value={sourceColor}\n                            color={sourceColor}\n                            labelProps={{ content: 'Source Color' }}\n                            onChange={onColorChange}\n                            isLeftAlignedLabel\n                        />\n                        <ToggleSwitchField\n                            isChecked={shouldShowMaxVariants}\n                            labelProps={{ content: 'Show Max Variants?' }}\n                            onChange={onToggleChange}\n                        />\n                    </DynamicFormRow>\n                </FormLayoutSection>\n            </FormLayout>\n        </StorySection>\n    );\n};\n\nSectionForm.defaultProps = {\n    shouldShowMaxVariants: true,\n    onColorChange: () => Promise.resolve(),\n    onToggleChange: () => Promise.resolve(),\n};\n\nSectionForm.propTypes = {\n    baseCls: PropTypes.string,\n    sourceColor: PropTypes.string,\n    shouldShowMaxVariants: PropTypes.bool,\n    onColorChange: PropTypes.func,\n    onToggleChange: PropTypes.func,\n};\n\nexport default SectionForm;\n","import PropTypes from 'prop-types';\nimport {\n    StorySection,\n    ColorVariantsList,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionVariants = (props) => {\n    const { contextCls, variants } = props;\n\n    return (\n        <StorySection>\n            <ColorVariantsList\n                contextCls={contextCls}\n                variants={variants}\n                shouldScrollList={false}\n            />\n        </StorySection>\n    );\n};\n\nSectionVariants.defaultProps = {\n    variants: [],\n};\n\nSectionVariants.propTypes = {\n    contextCls: PropTypes.string,\n    variants: PropTypes.arrayOf(\n        PropTypes.shape({\n            mainContent: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.element,\n            ]),\n            metaList: PropTypes.arrayOf(\n                PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n            ),\n            hasAlpha: PropTypes.bool,\n        }),\n    ),\n};\n\nexport default SectionVariants;\n","import { useState, useMemo } from 'react';\nimport { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport { CORE_COLOR_NEUTRAL_SEED_DEFAULT } from '@driponfleek/bankai-lib-theme-utils';\nimport { getColorVariants } from './utils/colorVariantsGenStoryUtils';\nimport { STORY_SUB_TITLE } from './const/storyConst';\nimport SectionCVGForm from './sections/color-variant-generator/SectionForm';\nimport SectionCVGVariants from './sections/color-variant-generator/SectionVariants';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\nimport { getLocale } from '../../../utils/localeUtils';\n\n// Styles\nimport './styles/story-color-variants-gen.scss';\n\nconst StoryColorVariantsGen = () => {\n    const [sourceColor, setSourceColor] = useState(\n        CORE_COLOR_NEUTRAL_SEED_DEFAULT,\n    );\n    const [shouldShowMaxVariants, setShouldShowMaxVariants] = useState(true);\n    const baseCls = genSBBaseCls('color-variant-generator');\n    const massagedVariants = useMemo(\n        () => getColorVariants(sourceColor, shouldShowMaxVariants ? 1 : 5),\n        [sourceColor, shouldShowMaxVariants],\n    );\n    const handleToggleChange = () => {\n        setShouldShowMaxVariants(!shouldShowMaxVariants);\n    };\n    const handleColorChange = (val) => {\n        setSourceColor(val);\n    };\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale(\n                'stories.designers.workingWithColor.colorVariantsGenerator.title',\n            )}\n            subTitle={STORY_SUB_TITLE}\n        >\n            <SectionCVGForm\n                baseCls={baseCls}\n                sourceColor={sourceColor}\n                shouldShowMaxVariants={shouldShowMaxVariants}\n                onColorChange={handleColorChange}\n                onToggleChange={handleToggleChange}\n            />\n            <SectionCVGVariants\n                contextCls={`${baseCls}__variants-list`}\n                variants={massagedVariants}\n            />\n        </StoryLayout>\n    );\n};\n\nexport default StoryColorVariantsGen;\n"],"names":["ColorVariantsLI","props","baseCls","genSBBaseCls","item","jsx","ColorSwatch","PropTypes","ColorVariantsLI$1","ColorVariantsList","contextCls","emptyStateTitle","variants","shouldScrollList","hasNoVariants","modCls","childItems","Children","renderEmptyIcon","iconCls","BankaiColorPalette","cx","Callout","ColorVariantsList$1","SectionForm","sourceColor","shouldShowMaxVariants","onColorChange","onToggleChange","StorySection","FormLayout","FormLayoutSection","jsxs","DynamicFormRow","ColorPickerField","ToggleSwitchField","SectionVariants","StoryColorVariantsGen","setSourceColor","useState","CORE_COLOR_NEUTRAL_SEED_DEFAULT","setShouldShowMaxVariants","massagedVariants","useMemo","getColorVariants","handleToggleChange","handleColorChange","val","StoryLayout","getLocale","STORY_SUB_TITLE","SectionCVGForm","SectionCVGVariants"],"mappings":"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"}