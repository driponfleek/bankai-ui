{"version":3,"file":"Button.stories-e01979fb.js","sources":["../../../storybook-lib/src/components/docblocks/composers/BannerAndExampleComposer.jsx","../../../storybook-lib/src/components/docblocks/component-preview/CompPreviewWithBanner.jsx","../../stories/components/buttons/sections/button-guidelines/SectionIntro.jsx","../../stories/components/buttons/sections/button-guidelines/SectionAccessibilityForDesigners.jsx","../../stories/components/buttons/sections/button-guidelines/SectionAccessibilityForDevs.jsx","../../sb-components/docblocks/ComponentPreviewWithCodeBlock.jsx","../../stories/components/buttons/sections/button-guidelines/SectionAccessibilityDynamicText.jsx","../../stories/components/buttons/sections/button-guidelines/SectionAccessibility.jsx","../../stories/components/buttons/sections/button-guidelines/SectionWhenToUse.jsx","../../stories/components/buttons/sections/button-guidelines/SectionWhenToAvoid.jsx","../../stories/components/buttons/sections/button-guidelines/SectionRenderingIcons.jsx","../../stories/components/buttons/sections/button-guidelines/SectionRenderingCustomBusyIcons.jsx","../../stories/components/buttons/sections/button-guidelines/SectionRenderingCustomContent.jsx","../../stories/components/buttons/components/BtnHierarchyExamples.jsx","../../stories/components/buttons/sections/button-guidelines/SectionBtnHierarchyDefault.jsx","../../stories/components/buttons/sections/button-guidelines/SectionBtnHierarchyDestructive.jsx","../../stories/components/buttons/sections/button-guidelines/SectionBtnHierarchy.jsx","../../stories/components/buttons/sections/button-guidelines/SectionUsage.jsx","../../stories/components/buttons/sections/button-guidelines/SectionBusyState.jsx","../../sb-components/docblocks/DoAndDoNotDo.jsx","../../stories/components/buttons/sections/button-guidelines/SectionDoAndDoNotDo.jsx","../../stories/components/buttons/sections/button-guidelines/SectionIconConsiderations.jsx","../../stories/components/buttons/sections/button-guidelines/SectionIconPlacement.jsx","../../stories/components/buttons/sections/button-guidelines/SectionDisabledButtons.jsx","../../stories/components/buttons/sections/button-guidelines/SectionBestPractices.jsx","../../stories/components/buttons/StoryButtonGuidelines.jsx","../../stories/components/buttons/sections/button/SectionOverview.jsx","../../stories/components/buttons/StoryButton.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Banner } from '@driponfleek/bankai-ui-callouts';\nimport { BankaiCircleInfo } from '@driponfleek/bankai-ui-icons';\nimport { genSBBaseCls } from '../../../utils/storiesConfigUtils';\n\n// Styles\nimport './styles/banner-and-example-composer.scss';\n\nconst withBannerAndExample = (Comp) => {\n    const Wrapper = (props) => {\n        const {\n            contextCls,\n            shouldRenderIcon,\n            bannerProps,\n            renderBanner,\n            renderBannerIcon,\n            children,\n            ...rest\n        } = props;\n        const baseCls = genSBBaseCls('banner-and-example-composer');\n        const bannerPropsWithFallback = {\n            ...(shouldRenderIcon && { renderIcon: renderBannerIcon }),\n            ...bannerProps,\n        };\n\n        return (\n            <div className={cx(baseCls, contextCls)}>\n                {renderBanner(bannerPropsWithFallback)}\n                <Comp {...rest}>{children}</Comp>\n            </div>\n        );\n    };\n\n    Wrapper.defaultProps = {\n        shouldRenderIcon: true,\n        renderBanner: Banner,\n        renderBannerIcon: BankaiCircleInfo,\n    };\n\n    Wrapper.propTypes = {\n        contextCls: PropTypes.string,\n        shouldRenderIcon: PropTypes.bool,\n        bannerProps: PropTypes.object,\n        renderBanner: PropTypes.func,\n        renderBannerIcon: PropTypes.func,\n    };\n\n    return Wrapper;\n};\n\nconst BannerAndExampleComposer = withBannerAndExample;\n\nexport default BannerAndExampleComposer;\n","import ComponentPreview from './ComponentPreview';\nimport BannerAndExampleComposer from '../composers/BannerAndExampleComposer';\n\nconst CompPreviewWithBanner = BannerAndExampleComposer(ComponentPreview);\n\nexport default CompPreviewWithBanner;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionIntro = () => {\n    return (\n        <StorySection>\n            <Paragraph>\n                Buttons play a pivotal role in user interaction, and to ensure a\n                seamless and accessible experience, we&apos;ve established a set\n                of principles shared across all button variants. This page\n                serves as a central hub for understanding accessibility\n                requirements, customization options, and general best practices\n                applicable to every button type. Dive into this comprehensive\n                guide to ensure consistent and user-friendly button\n                implementations throughout our applications.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionIntro;\n","import PropTypes from 'prop-types';\nimport { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport {\n    CodeTag,\n    StorySection,\n    SectionTitle,\n} from '@driponfleek/bankai-lib-storybook';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionAccessibilityForDesigners = (props) => {\n    const { disabledBullet } = props;\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                {getLocale('titles.forDesigners')}\n            </SectionTitle>\n            <StorySection>\n                <OmniList>\n                    <OmniListItem>\n                        <strong>Contrast Matters&#58;</strong> Ensure that the\n                        color contrast between the button&apos;s text and\n                        background meets the{' '}\n                        <Hyperlink\n                            href=\"https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html\"\n                            shouldOpenInNewWindow\n                        >\n                            accessibility requirement for text contrast\n                        </Hyperlink>\n                        , as outlined in Web Content Accessibility Guidelines\n                        &#40;WCAG&#41;. This helps users with visual impairments\n                        read and understand the content.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Clear Button Text&#58;</strong>{' '}\n                        <Hyperlink\n                            href=\"https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html\"\n                            shouldOpenInNewWindow\n                        >\n                            Button text should clearly convey its purpose\n                        </Hyperlink>\n                        . This ensures that all users, including those relying\n                        on screen readers, understand the button&apos;s\n                        function.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>\n                            Provide aria-labels for Buttons Without Text&#58;\n                        </strong>{' '}\n                        If the button does not contain text, using{' '}\n                        <CodeTag>aria-label</CodeTag> to provide a concise and\n                        descriptive label can enhance accessibility and ensure\n                        all users receive clear information about the\n                        button&apos;s function. Design includes what can&apos;t\n                        be seen which means we are also responsible for\n                        providing these types of details. Be pro-active about\n                        providing these to your developers!\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Visible Focus Indicator&#58;</strong>{' '}\n                        <Hyperlink\n                            href=\"https://www.w3.org/WAI/WCAG21/Understanding/focus-visible.html\"\n                            shouldOpenInNewWindow\n                        >\n                            Design clear and visible focus indicators\n                        </Hyperlink>{' '}\n                        for buttons, including disabled buttons. These\n                        indicators help keyboard and screen reader users\n                        understand which button they have selected and maintain\n                        a consistent user experience.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>\n                            Avoid Disabled Buttons When Possible&#58;\n                        </strong>{' '}\n                        {disabledBullet}\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionAccessibilityForDesigners.propTypes = {\n    disabledBullet: PropTypes.element,\n};\n\nexport default SectionAccessibilityForDesigners;\n","import PropTypes from 'prop-types';\nimport { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    StorySection,\n    SectionTitle,\n} from '@driponfleek/bankai-lib-storybook';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionAccessibilityForDevs = (props) => {\n    const { disabledBullet } = props;\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                {getLocale('titles.forDevelopers')}\n            </SectionTitle>\n            <StorySection>\n                <OmniList>\n                    <OmniListItem>\n                        <strong>\n                            Semantic{' '}\n                            <abbr title={getLocale('abbreviations.html')}>\n                                HTML\n                            </abbr>\n                            &#58;\n                        </strong>{' '}\n                        Whenever possible, use the{' '}\n                        <CodeTag>&lt;button&gt;</CodeTag> element for buttons,\n                        including disabled buttons. It&apos;s semantically\n                        correct and provides built-in keyboard and screen reader\n                        support.\n                        <OmniList>\n                            <OmniListItem>\n                                If you need buttons that link to other pages,\n                                use <CodeTag>&lt;a&gt;</CodeTag> elements with\n                                the appropriate role and attributes to make them\n                                behave like buttons.\n                            </OmniListItem>\n                        </OmniList>\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Use aria-label Sparingly&#58;</strong> For\n                        buttons with text inside, it&apos;s generally not\n                        necessary to use the <CodeTag>aria-label</CodeTag>{' '}\n                        attribute, as screen readers will announce the button\n                        text. Best practice is to make sure the button&apos;s\n                        visible text clearly conveys its purpose.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>\n                            Consider aria-label for Icon-Only Buttons&#58;\n                        </strong>{' '}\n                        If the button contains only an icon without accompanying\n                        text, using <CodeTag>aria-label</CodeTag> to provide a\n                        concise and descriptive label can enhance accessibility\n                        and ensure all users receive clear information about the\n                        button&apos;s function.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>\n                            Consider Alternatives to Disabling Buttons&#58;\n                        </strong>{' '}\n                        {disabledBullet}\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Tab Order&#58;</strong> Ensure that both enabled\n                        and disabled buttons can be navigated using the keyboard\n                        and follow a logical tab order.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Keyboard Interaction&#58;</strong> Buttons,\n                        including disabled ones, should be navigable using the\n                        Tab key to maintain a consistent user experience.\n                        However, disabled buttons should not be interactable\n                        when they are in a disabled state, and pressing Enter or\n                        Space on a disabled button should have no effect.\n                        Ensuring correct keyboard navigation support for buttons\n                        provides a seamless and accessible experience for users\n                        who rely on keyboard input or assistive technologies.\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionAccessibilityForDevs.propTypes = {\n    disabledBullet: PropTypes.element,\n};\n\nexport default SectionAccessibilityForDevs;\n","import { ComponentPreviewWithCodeBlock as PlaygroundWithCode } from '@driponfleek/bankai-lib-storybook';\nimport { getLocale } from '../../utils/localeUtils';\n\nconst ComponentPreviewWithCodeBlock = (props) => {\n    const copyText = getLocale('shared.copy');\n    const copiedText = getLocale('shared.copied');\n\n    return (\n        <PlaygroundWithCode\n            {...props}\n            copyText={copyText}\n            copiedText={copiedText}\n        />\n    );\n};\n\nexport default ComponentPreviewWithCodeBlock;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonSecondary } from '@driponfleek/bankai-ui-buttons';\nimport { BankaiCirclePlus } from '@driponfleek/bankai-ui-icons';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport ComponentPreviewWithCodeBlock from '../../../../../sb-components/docblocks/ComponentPreviewWithCodeBlock';\n\n// Utils\nimport { getDynamicTextCodeStrModifier } from '../../utils/storyUtils';\n\nconst SectionAccessibilityDynamicText = (props) => {\n    const { btnText } = props;\n    const [isDynamicTextBtnBusy, setIsDynamicTextBtnBusy] = useState(false);\n    const handleDynamicTextBtnClick = () => {\n        setIsDynamicTextBtnBusy(true);\n        setTimeout(() => {\n            setIsDynamicTextBtnBusy(false);\n        }, 1800);\n    };\n    const dynamicTextBtnText = isDynamicTextBtnBusy\n        ? 'Busy Doing Stuff'\n        : btnText;\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>Dynamic Text</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Assigning different text to a button during disabled or busy\n                    states serves a dual purpose of enhancing both visual and\n                    auditory user experiences. For users who rely on screen\n                    readers, the dynamic text changes provide clear and\n                    informative announcements, ensuring accessibility.\n                    Simultaneously, users with visual capabilities benefit from\n                    the visual cues, gaining insight into why the button is\n                    temporarily inactive or processing a request. This\n                    thoughtful approach to button text modification ensures a\n                    more inclusive and comprehensible user interface.\n                </Paragraph>\n                <ComponentPreviewWithCodeBlock\n                    codeStrModifier={getDynamicTextCodeStrModifier}\n                    shouldShowCopy={false}\n                >\n                    <ButtonSecondary\n                        text={dynamicTextBtnText}\n                        renderIcon={BankaiCirclePlus}\n                        isBusy={isDynamicTextBtnBusy}\n                        onClick={handleDynamicTextBtnClick}\n                        isDynamicText\n                    />\n                </ComponentPreviewWithCodeBlock>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionAccessibilityDynamicText.propTypes = {\n    btnText: PropTypes.string,\n};\n\nexport default SectionAccessibilityDynamicText;\n","import PropTypes from 'prop-types';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport {\n    StorySection,\n    SectionTitle,\n    CodeTag,\n} from '@driponfleek/bankai-lib-storybook';\nimport SectionAccessibilityForDesigners from './SectionAccessibilityForDesigners';\nimport SectionAccessibilityForDevs from './SectionAccessibilityForDevs';\nimport SectionAccessibilityDynamicText from './SectionAccessibilityDynamicText';\n\nconst SectionAccessibility = (props) => {\n    const { btnText } = props;\n    const disabledText = (\n        <>\n            Buttons disabled using the <CodeTag>disabled</CodeTag> attribute\n            aren&apos;t focusable and can&apos;t be reached by keyboard\n            navigation. When needing to visually display a button in a disabled\n            state, think through the requirements of making it accessible\n            without using the <CodeTag>disabled</CodeTag> attribute.\n        </>\n    );\n\n    return (\n        <StorySection>\n            <SectionTitle>\n                Accessibility&#58; Ensuring Inclusive Interaction\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Accessibility isn&apos;t just a checkbox&mdash;it&apos;s a\n                    commitment to ensuring that all users can interact with your\n                    interface effectively. Buttons are essential interactive\n                    elements, and it&apos;s crucial to ensure that they are\n                    accessible to all users, regardless of their abilities. By\n                    considering these accessibility tips, you can create\n                    buttons, including disabled buttons, that provide a more\n                    inclusive and user-friendly experience for everyone.\n                </Paragraph>\n            </StorySection>\n            <SectionAccessibilityForDesigners disabledBullet={disabledText} />\n            <SectionAccessibilityForDevs disabledBullet={disabledText} />\n            <SectionAccessibilityDynamicText btnText={btnText} />\n            <StorySection>\n                <Paragraph>\n                    For more detailed guidance on button accessibility, please\n                    refer to the{' '}\n                    <Hyperlink\n                        href=\"https://www.w3.org/TR/wai-aria-practices-1.2/#button\"\n                        shouldOpenInNewWindow\n                    >\n                        ARIA Authoring Practices Guide for Buttons\n                    </Hyperlink>\n                    .\n                </Paragraph>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionAccessibility.propTypes = {\n    btnText: PropTypes.string,\n};\n\nexport default SectionAccessibility;\n","import { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionWhenToUse = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>When to Use Buttons</SectionTitle>\n            <StorySection>\n                <OmniList>\n                    <OmniListItem>\n                        <strong>Initiating Actions&#58;</strong> Buttons are\n                        ideal for triggering actions, such as submitting forms,\n                        saving changes, or initiating a process.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Calls-to-Action&#58;</strong> Use buttons to\n                        highlight key actions you want users to take, such as\n                        signing up, making a purchase, or starting a free trial.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Confirmation Dialogs&#58;</strong> In scenarios\n                        where user confirmation is needed, buttons can be used\n                        within confirmation dialogs. For example, confirming a\n                        deletion or acknowledging critical decisions.\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionWhenToUse;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionWhenToAvoid = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>When to Avoid Buttons</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    <strong>Navigation&#58;</strong> When the primary purpose is\n                    navigation, especially within your app or website, consider\n                    using hyperlinks instead of buttons. This not only aligns\n                    with best practices and user expectations for navigation\n                    elements but also enhances accessibility, making it easier\n                    for users relying on screen readers or keyboard navigation\n                    to understand and interact with your content.\n                </Paragraph>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionWhenToAvoid;\n","import PropTypes from 'prop-types';\nimport { ButtonSecondary } from '@driponfleek/bankai-ui-buttons';\nimport { BankaiCirclePlus } from '@driponfleek/bankai-ui-icons';\nimport {\n    ComponentPreviewWithCodeBlock,\n    StorySection,\n    SectionTitle,\n} from '@driponfleek/bankai-lib-storybook';\nimport { getRenderIconCodeStrModifier } from '../../utils/storyUtils';\n\nconst SectionRenderingIcons = (props) => {\n    const { btnText } = props;\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>Rendering an Icon</SectionTitle>\n            <StorySection>\n                <ComponentPreviewWithCodeBlock\n                    codeStrModifier={getRenderIconCodeStrModifier}\n                    shouldShowCopy={false}\n                >\n                    <ButtonSecondary\n                        text={btnText}\n                        renderIcon={BankaiCirclePlus}\n                    />\n                </ComponentPreviewWithCodeBlock>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionRenderingIcons.propTypes = {\n    btnText: PropTypes.string,\n};\n\nexport default SectionRenderingIcons;\n","import { ButtonSecondary } from '@driponfleek/bankai-ui-buttons';\nimport { BankaiCircleDash } from '@driponfleek/bankai-ui-icons';\nimport {\n    BannerInfo,\n    CodeTag,\n    ComponentPreviewWithCodeBlock,\n    StorySection,\n    SectionTitle,\n} from '@driponfleek/bankai-lib-storybook';\nimport { getBusyIconCodeStrModifier } from '../../utils/storyUtils';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst renderCustomBusyIcon = () => (\n    <BankaiCircleDash contextCls=\"bankai-icon-spinner\" />\n);\n\nconst SectionRenderingCustomBusyIcons = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                Rendering a Custom Busy Icon\n            </SectionTitle>\n            <StorySection>\n                <ComponentPreviewWithCodeBlock\n                    codeStrModifier={getBusyIconCodeStrModifier}\n                    shouldShowCopy={false}\n                >\n                    <ButtonSecondary\n                        text=\"Saving\"\n                        renderBusyIcon={renderCustomBusyIcon}\n                        isBusy\n                    />\n                </ComponentPreviewWithCodeBlock>\n                <BannerInfo\n                    msg={\n                        <>\n                            {getLocale('designSystemName')} makes no assumptions\n                            about the animation that works best for your icon.\n                            The default spinning animation can be added to your\n                            icon by using the{' '}\n                            <CodeTag>bankai-icon-spinner</CodeTag> class.\n                        </>\n                    }\n                />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionRenderingCustomBusyIcons;\n","import {\n    ButtonSecondary,\n    ButtonText,\n    ButtonIcon,\n} from '@driponfleek/bankai-ui-buttons';\nimport { BankaiChevronRight } from '@driponfleek/bankai-ui-icons';\nimport {\n    ComponentPreviewWithCodeBlock,\n    StorySection,\n    SectionTitle,\n} from '@driponfleek/bankai-lib-storybook';\nimport { getRenderCustomContentCodeStrModifier } from '../../utils/storyUtils';\n\nconst SectionRenderingCustomContent = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>Rendering Custom Content</SectionTitle>\n            <StorySection>\n                <ComponentPreviewWithCodeBlock\n                    codeStrModifier={getRenderCustomContentCodeStrModifier}\n                    shouldShowCopy={false}\n                >\n                    <ButtonSecondary>\n                        <ButtonText>(∩^o^)⊃━☆゜.* Magic!</ButtonText>\n                        <ButtonIcon renderIcon={BankaiChevronRight} />\n                    </ButtonSecondary>\n                </ComponentPreviewWithCodeBlock>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionRenderingCustomContent;\n","import PropTypes from 'prop-types';\nimport { ButtonSecondary, ButtonPrimary } from '@driponfleek/bankai-ui-buttons';\nimport { CompPreviewWithBanner } from '@driponfleek/bankai-lib-storybook';\n\n// Styles\nimport './styles/btn-hierarchy-examples.scss';\n\nconst BtnHierarchyExamples = (props) => {\n    const { baseCls, isDestructive } = props;\n    const inlineBtnsBannerProps = {\n        msg: <strong>Inline&#58;</strong>,\n    };\n    const stackedBtnsBannerProps = {\n        msg: <strong>Stacked&#58;</strong>,\n    };\n\n    return (\n        <>\n            <CompPreviewWithBanner\n                contextCls={`${baseCls}__btn-hierarchy-inline-ex`}\n                bannerProps={inlineBtnsBannerProps}\n                shouldRenderIcon={false}\n            >\n                {!isDestructive && <ButtonPrimary text=\"Save\" />}\n                <ButtonSecondary text=\"Cancel\" />\n                {isDestructive && <ButtonPrimary text=\"Delete\" isDestructive />}\n            </CompPreviewWithBanner>\n            <CompPreviewWithBanner\n                contextCls={`${baseCls}__btn-hierarchy-stacked-ex`}\n                bannerProps={stackedBtnsBannerProps}\n                shouldRenderIcon={false}\n            >\n                {!isDestructive && <ButtonPrimary text=\"Save\" />}\n                <ButtonSecondary text=\"Cancel\" />\n                {isDestructive && <ButtonPrimary text=\"Delete\" isDestructive />}\n            </CompPreviewWithBanner>\n        </>\n    );\n};\n\nBtnHierarchyExamples.defaultProps = {\n    isDestructive: false,\n};\n\nBtnHierarchyExamples.propTypes = {\n    baseCls: PropTypes.string,\n    isDestructive: PropTypes.bool,\n};\n\nexport default BtnHierarchyExamples;\n","import PropTypes from 'prop-types';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport SectionBtnHierarchyExamples from '../../components/BtnHierarchyExamples';\n\nconst SectionBtnHierarchyDefault = (props) => {\n    const { baseCls } = props;\n\n    return (\n        <StorySection contextCls={`${baseCls}__btn-hierarchy-default-order`}>\n            <SectionTitle headingLvl={4}>Default Order</SectionTitle>\n            <Paragraph>\n                By default, when buttons are inline, the primary button is\n                placed on the left, and the secondary button is placed on the\n                right. This aligns with the natural reading order for\n                left-to-right languages, providing an intuitive flow for users.\n            </Paragraph>\n            <Paragraph>\n                When buttons are vertically stacked, the primary button is\n                placed at the top, and the secondary button is placed below it.\n            </Paragraph>\n            <SectionBtnHierarchyExamples baseCls={baseCls} />\n            {/* <StorySection>\n            </StorySection> */}\n        </StorySection>\n    );\n};\n\nSectionBtnHierarchyDefault.propTypes = {\n    baseCls: PropTypes.string,\n};\n\nexport default SectionBtnHierarchyDefault;\n","import PropTypes from 'prop-types';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport SectionBtnHierarchyExamples from '../../components/BtnHierarchyExamples';\n\nconst SectionBtnHierarchyDestructive = (props) => {\n    const { baseCls } = props;\n\n    return (\n        <StorySection\n            contextCls={`${baseCls}__btn-hierarchy-destructive-order`}\n        >\n            <SectionTitle headingLvl={4}>\n                Button Order When the Primary Button is Destructive\n            </SectionTitle>\n            <Paragraph>\n                When the primary button also serves a destructive purpose, we\n                intentionally swap the default order. By swapping the default\n                order for primary destructive buttons, we introduce a deliberate\n                friction point, encouraging users to think twice before\n                proceeding with potentially irreversible actions. This design\n                pattern aims to enhance user awareness and prevent accidental\n                clicks on critical operations, fostering a deliberate\n                decision-making process.\n            </Paragraph>\n            <SectionBtnHierarchyExamples baseCls={baseCls} isDestructive />\n        </StorySection>\n    );\n};\n\nSectionBtnHierarchyDestructive.propTypes = {\n    baseCls: PropTypes.string,\n};\n\nexport default SectionBtnHierarchyDestructive;\n","import PropTypes from 'prop-types';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport SectionBtnHierarchyDefault from './SectionBtnHierarchyDefault';\nimport SectionBtnHierarchyDestructive from './SectionBtnHierarchyDestructive';\n\nconst SectionBtnHierarchy = (props) => {\n    const { baseCls } = props;\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>Button Hierarchy</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    In designing button hierarchies, we aim to create a\n                    consistent and user-friendly experience. This involves\n                    defining a pattern for the order of primary and secondary\n                    buttons, taking into consideration their potential\n                    destructive nature.\n                </Paragraph>\n            </StorySection>\n            <SectionBtnHierarchyDefault baseCls={baseCls} />\n            <SectionBtnHierarchyDestructive baseCls={baseCls} />\n        </StorySection>\n    );\n};\n\nSectionBtnHierarchy.propTypes = {\n    baseCls: PropTypes.string,\n};\n\nexport default SectionBtnHierarchy;\n","import PropTypes from 'prop-types';\n// import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport SectionWhenToUse from './SectionWhenToUse';\nimport SectionWhenToAvoid from './SectionWhenToAvoid';\nimport SectionRenderingIcons from './SectionRenderingIcons';\nimport SectionRenderingCustomBusyIcons from './SectionRenderingCustomBusyIcons';\nimport SectionRenderingCustomContent from './SectionRenderingCustomContent';\nimport SectionBtnHierarchy from './SectionBtnHierarchy';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\n// TODO: Add documentation about Icon placement best practice\nconst SectionUsage = (props) => {\n    const { baseCls, btnText } = props;\n\n    return (\n        <StorySection>\n            <SectionTitle>{getLocale('titles.usage')}</SectionTitle>\n            {/* <StorySection>\n                <Paragraph>\n                    This section provides comprehensive guidelines for the\n                    general usage of buttons, covering best practices,\n                    accessibility considerations, common customization options,\n                    and more. These guidelines offer insights into creating\n                    consistent, user-friendly button experiences throughout our\n                    applications in diverse contexts.\n                </Paragraph>\n            </StorySection> */}\n            <SectionWhenToUse />\n            <SectionWhenToAvoid />\n            <SectionRenderingCustomContent />\n            <SectionRenderingIcons btnText={btnText} />\n            <SectionRenderingCustomBusyIcons />\n            <SectionBtnHierarchy baseCls={baseCls} />\n        </StorySection>\n    );\n};\n\nSectionUsage.propTypes = {\n    baseCls: PropTypes.string,\n    btnText: PropTypes.string,\n};\n\nexport default SectionUsage;\n","import { ButtonSecondary } from '@driponfleek/bankai-ui-buttons';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    ComponentPreviewWithCodeBlock,\n    StorySection,\n    SectionTitle,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionBusyState = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>When to Use Busy State</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    When a button triggers a process or action that takes time,\n                    consider using the busy state to indicate ongoing activity.\n                    This helps manage user expectations during loading or\n                    processing periods.\n                </Paragraph>\n                <ComponentPreviewWithCodeBlock shouldShowCopy={false}>\n                    <ButtonSecondary text=\"Saving\" isBusy isDynamicText />\n                </ComponentPreviewWithCodeBlock>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionBusyState;\n","import { DoAndDoNotDo as BestPractices } from '@driponfleek/bankai-lib-storybook';\n\n// Utils\nimport { getLocale } from '../../utils/localeUtils';\n\nconst DoAndDoNotDo = (props) => {\n    const doTitle = getLocale('titles.do');\n    const doNotDoTitle = getLocale('titles.doNot');\n\n    return (\n        <BestPractices\n            {...props}\n            doTitle={doTitle}\n            doNotDoTitle={doNotDoTitle}\n        />\n    );\n};\n\nexport default DoAndDoNotDo;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    SectionTitle,\n    CodeTag,\n} from '@driponfleek/bankai-lib-storybook';\nimport DoAndDoNotDo from '../../../../../sb-components/docblocks/DoAndDoNotDo';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionDoAndDoNotDo = () => {\n    const doList = [\n        <>\n            <strong>Do Use Descriptive Text&#58;</strong> Clearly communicate\n            the action a button performs through concise and meaningful text.\n            Descriptive labels improve accessibility and provide clarity to all\n            users.\n        </>,\n        <>\n            <strong>Do Provide Visual Feedback&#58;</strong> Include visual cues\n            such as hover effects, focus outlines, and disabled states to\n            enhance the user experience and communicate the interactive nature\n            of buttons.\n        </>,\n        <>\n            <strong>Do Use ARIA Attributes Responsibly&#58;</strong> When using\n            buttons without visible text (For example, icon buttons), do use the{' '}\n            <CodeTag>aria-label</CodeTag> attribute to provide a meaningful\n            description for accessibility.\n        </>,\n    ];\n    const doNotDoList = [\n        <>\n            <strong>Do Not Use Ambiguous Labels&#58;</strong> Refrain from using\n            vague or unclear labels on buttons. Users should easily understand\n            the purpose of a button without ambiguity.\n        </>,\n        <>\n            <strong>Do Not Sacrifice Clarity for Style&#58;</strong> Stylish\n            designs are crucial, but don&apos;t compromise clarity. Ensure that\n            buttons remain easily recognizable and understandable, even in the\n            absence of accompanying text.\n        </>,\n        <>\n            <strong>Do Not Create Unnecessary Repetition&#58;</strong> While\n            ARIA attributes are valuable for accessibility, avoid redundant\n            information. If a button already has descriptive text, additional\n            use of <CodeTag>aria-label</CodeTag> may be unnecessary and\n            potentially confusing.\n        </>,\n    ];\n\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                {getLocale('titles.dosAndDoNotDos')}\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Buttons are not just functional elements; they are\n                    opportunities to enhance user engagement and satisfaction.\n                    By following these &quot;Do&apos;s&quot; and avoiding the\n                    &quot;Do Not Do&apos;s&quot; you can create a more\n                    user-centered design.\n                </Paragraph>\n                <DoAndDoNotDo\n                    doList={doList}\n                    doNotDoList={doNotDoList}\n                    isSideBySide\n                />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionDoAndDoNotDo;\n","import { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionIconConsiderations = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>Icon Considerations</SectionTitle>\n            <OmniList>\n                <OmniListItem>\n                    <strong>Use Appropriate Icons&#58;</strong> Select icons\n                    that clearly represent the intended action. Choose\n                    universally recognized symbols to ensure a shared\n                    understanding across diverse user groups.\n                </OmniListItem>\n                <OmniListItem>\n                    <strong>Maintain Consistency&#58;</strong> Establish\n                    consistency in iconography throughout your application. Use\n                    similar icons for comparable actions to create a cohesive\n                    and intuitive user interface.\n                </OmniListItem>\n            </OmniList>\n        </StorySection>\n    );\n};\n\nexport default SectionIconConsiderations;\n","import PropTypes from 'prop-types';\nimport {\n    BankaiChevronDown,\n    BankaiSettings,\n} from '@driponfleek/bankai-ui-icons';\nimport {\n    ButtonSecondary,\n    ButtonText,\n    ButtonIcon,\n} from '@driponfleek/bankai-ui-buttons';\nimport {\n    StorySection,\n    SectionTitle,\n    CompPreviewWithBanner,\n} from '@driponfleek/bankai-lib-storybook';\n\n// Styles\nimport './styles/section-icon-placement.scss';\n\nconst SectionIconPlacement = (props) => {\n    const { baseCls } = props;\n    const leftOfTextBannerProps = {\n        msg: (\n            <>\n                <strong>Left Side&#58;</strong> The most common use case. Place\n                icons to the left of the button text when the icon&apos;s role\n                is crucial to understanding the primary action or when the icon\n                serves as a visual cue for quick recognition.\n            </>\n        ),\n    };\n    const rightOfTextBannerProps = {\n        msg: (\n            <>\n                <strong>Right Side&#58;</strong> Position icons to the right of\n                the button text when the icon is secondary or supportive and\n                doesn&apos;t play a crucial role in immediate recognition.\n            </>\n        ),\n    };\n\n    return (\n        <StorySection contextCls={`${baseCls}__icon-placement`}>\n            <SectionTitle headingLvl={3}>Icon Placement</SectionTitle>\n            <StorySection>\n                <CompPreviewWithBanner\n                    bannerProps={leftOfTextBannerProps}\n                    shouldRenderIcon={false}\n                >\n                    <ButtonSecondary\n                        text=\"Settings\"\n                        renderIcon={BankaiSettings}\n                    />\n                </CompPreviewWithBanner>\n                <CompPreviewWithBanner\n                    bannerProps={rightOfTextBannerProps}\n                    shouldRenderIcon={false}\n                >\n                    <ButtonSecondary>\n                        <ButtonText>Menu</ButtonText>\n                        <ButtonIcon renderIcon={BankaiChevronDown} />\n                    </ButtonSecondary>\n                </CompPreviewWithBanner>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nSectionIconPlacement.propTypes = {\n    baseCls: PropTypes.string,\n};\n\nexport default SectionIconPlacement;\n","import {\n    OmniList,\n    OmniListItem,\n    Paragraph,\n} from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    SectionTitle,\n    CodeTag,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionDisabledButtons = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>Avoid Disabled Buttons</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    While disabled buttons have their place in{' '}\n                    <abbr title=\"User Interface\">UI</abbr> design, there are\n                    instances where we may want to consider alternatives. Here\n                    are some tips for when to avoid disabled buttons, why we\n                    should, and alternative approaches&#58;\n                </Paragraph>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={4}>\n                    When to Avoid Disabled Buttons\n                </SectionTitle>\n                <StorySection>\n                    <OmniList>\n                        <OmniListItem>\n                            <strong>When Clarity is Needed&#58;</strong> If the\n                            reason for disabling a button is not immediately\n                            clear to users, it&apos;s better to avoid disabling\n                            it. Users should understand why a button is\n                            inactive.\n                        </OmniListItem>\n                        <OmniListItem>\n                            <strong>When Actions Are Conditional&#58;</strong>{' '}\n                            If an action&apos;s availability depends on certain\n                            conditions or inputs, disabling the button may not\n                            be the best approach. Instead, consider providing\n                            real-time feedback or guidance to users.\n                        </OmniListItem>\n                    </OmniList>\n                </StorySection>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={4}>\n                    Why Avoid Disabled Buttons\n                </SectionTitle>\n                <StorySection>\n                    <OmniList>\n                        <OmniListItem>\n                            <strong>Confusion&#58;</strong> Disabled buttons can\n                            sometimes confuse users, as they may wonder why an\n                            action is unavailable. This can lead to a less\n                            intuitive and frustrating user experience.\n                        </OmniListItem>\n                        <OmniListItem>\n                            <strong>Accessibility&#58;</strong> Disabled buttons\n                            are not focusable and may not always be properly\n                            conveyed to users relying on assistive technologies\n                            like screen readers. This can result in a lack of\n                            clarity for users with disabilities.\n                        </OmniListItem>\n                        <OmniListItem>\n                            <strong>Loss of Context&#58;</strong> When a button\n                            is disabled, users might lose context about what\n                            they need to do to activate it. It&apos;s better to\n                            provide clear instructions or hints.\n                        </OmniListItem>\n                    </OmniList>\n                </StorySection>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={4}>\n                    Alternative Approaches\n                </SectionTitle>\n                <StorySection>\n                    <OmniList>\n                        <OmniListItem>\n                            <strong>Feedback and Validation&#58;</strong> Offer\n                            real-time feedback as users interact with the\n                            interface. Highlight any issues or missing\n                            information near the relevant input fields.\n                        </OmniListItem>\n                        <OmniListItem>\n                            <strong>Progressive Disclosure&#58;</strong> Use\n                            progressive disclosure to guide users through a\n                            multi-step process. Only present actions that are\n                            relevant at each stage, simplifying the interface.\n                        </OmniListItem>\n                        <OmniListItem>\n                            <strong>Change Button State&#58;</strong> Instead of\n                            disabling a button, change its state to indicate\n                            that an action is pending. For example, change the\n                            &quot;Save Data&quot; button to &quot;Saving\n                            Data...&quot; while processing a form.\n                        </OmniListItem>\n                    </OmniList>\n                </StorySection>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={4}>\n                    When to Fake it: Faux Disabled Buttons\n                </SectionTitle>\n                <StorySection>\n                    <Paragraph>\n                        In certain scenarios, you may want to visually simulate\n                        a disabled button without using the native HTML{' '}\n                        <CodeTag>disabled</CodeTag> attribute. Instead, you can\n                        use the <CodeTag>aria-disabled</CodeTag> attribute and\n                        CSS to create a button that appears disabled and\n                        progromattically prevent any interaction with the button\n                        itself while allowing it to remain focusable and\n                        accessible to all users, including those who rely on\n                        screen readers.\n                    </Paragraph>\n                    <Paragraph>\n                        A perfect example of when we would want to do this is\n                        when a button is in a busy state. In the event where a\n                        button that is clicked calls an API to submit some data,\n                        we&apos;d want to prevent the user from clicking the\n                        button again while that operation is underway. Our\n                        button would update to show it is busy and disabled,\n                        letting users know they will need to wait for the action\n                        to finish performing before they can use the button\n                        again.\n                    </Paragraph>\n                </StorySection>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionDisabledButtons;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport SectionBusyState from './SectionBusyState';\nimport SectionDoAndDoNotDo from './SectionDoAndDoNotDo';\nimport SectionIconConsiderations from './SectionIconConsiderations';\nimport SectionIconPlacement from './SectionIconPlacement';\nimport SectionDisabledButtons from './SectionDisabledButtons';\n\n// Utils\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionBestPractices = () => {\n    return (\n        <StorySection>\n            <SectionTitle>{getLocale('titles.bestPracices')}</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    These guidelines are designed to help you create buttons\n                    that are both aesthetically pleasing and functional. By\n                    following these best practices, you contribute to a\n                    consistent, accessible, and user-centric design that\n                    seamlessly guides users through your application.\n                </Paragraph>\n            </StorySection>\n            <SectionIconPlacement />\n            <SectionIconConsiderations />\n            <SectionDoAndDoNotDo />\n            <SectionDisabledButtons />\n            <SectionBusyState />\n        </StorySection>\n    );\n};\n\nexport default SectionBestPractices;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport { BTNS_STORY_SUB_TITLE, PKG_JSON } from './const/storyConst';\nimport SectionIntro from './sections/button-guidelines/SectionIntro';\nimport SectionAccessibility from './sections/button-guidelines/SectionAccessibility';\n// import SectionImplementation from './sections/button/SectionImplementation';\n// import SectionOverview from './sections/button/SectionOverview';\nimport SectionUsage from './sections/button-guidelines/SectionUsage';\n// import SectionUsageWhenToUse from './sections/button-guidelines/SectionUsageWhenToUse';\n// import SectionUsageWhenToAvoid from './sections/button-guidelines/SectionWhenToAvoid';\nimport SectionBestPractices from './sections/button-guidelines/SectionBestPractices';\n// import SectionIconsInButtons from './sections/button-guidelines/SectionIconsInButtons';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\n\n// TODO: Need to provide guidance on:\n// - Icon Placement\n// - Button Heirarchy\nconst StoryButtonGuidelines = () => {\n    const baseCls = genSBBaseCls('button-guidelines');\n    const btnText = 'Button Text';\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            pkgVer={PKG_JSON.version}\n            title={getLocale(\n                'stories.components.buttons.buttonGuidelines.title',\n            )}\n            subTitle={BTNS_STORY_SUB_TITLE}\n        >\n            <SectionIntro />\n            <SectionUsage btnText={btnText} baseCls={baseCls} />\n            {/* <SectionUsageWhenToAvoid /> */}\n            {/* <SectionIconsInButtons baseCls={baseCls} btnText={btnText} /> */}\n            <SectionAccessibility btnText={btnText} />\n            <SectionBestPractices />\n            {/* <SectionOverview /> */}\n            {/* <SectionImplementation {...props} /> */}\n            {/* <SectionDesign /> */}\n        </StoryLayout>\n    );\n};\n\nexport default StoryButtonGuidelines;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionOverview = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Overview</SectionTitle>\n            <Paragraph>\n                This button serves as the perfect starting point for crafting an\n                array of button variants. We&apos;ve kept it simple and\n                unadorned, so you won&apos;t have to wrestle with excessive CSS\n                to get started.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionOverview;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport { getBtnStoryPlaygroundComp } from './utils/storyUtils';\nimport { BTNS_STORY_SUB_TITLE, PKG_JSON } from './const/storyConst';\nimport SectionDesign from './sections/SectionDesign';\nimport SectionImplementation from './sections/SectionImplementation';\nimport SectionOverview from './sections/button/SectionOverview';\nimport SectionPlayground from './sections/SectionPlayground';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\n\nconst StoryButton = (props) => {\n    const baseCls = genSBBaseCls('button');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            pkgVer={PKG_JSON.version}\n            title={getLocale('stories.components.buttons.button.title')}\n            subTitle={BTNS_STORY_SUB_TITLE}\n        >\n            <SectionPlayground\n                {...props}\n                getPlaygroundComp={getBtnStoryPlaygroundComp}\n            />\n            <SectionOverview />\n            <SectionImplementation {...props} />\n            <SectionDesign />\n        </StoryLayout>\n    );\n};\n\nexport default StoryButton;\n"],"names":["withBannerAndExample","Comp","Wrapper","props","contextCls","shouldRenderIcon","bannerProps","renderBanner","renderBannerIcon","children","rest","baseCls","genSBBaseCls","bannerPropsWithFallback","cx","jsx","Banner","BankaiCircleInfo","PropTypes","BannerAndExampleComposer","BannerAndExampleComposer$1","CompPreviewWithBanner","ComponentPreview","CompPreviewWithBanner$1","SectionIntro","StorySection","Paragraph","SectionAccessibilityForDesigners","disabledBullet","SectionTitle","getLocale","jsxs","OmniList","OmniListItem","Hyperlink","CodeTag","SectionAccessibilityForDevs","ComponentPreviewWithCodeBlock","copyText","copiedText","PlaygroundWithCode","SectionAccessibilityDynamicText","btnText","isDynamicTextBtnBusy","setIsDynamicTextBtnBusy","useState","getDynamicTextCodeStrModifier","ButtonSecondary","BankaiCirclePlus","SectionAccessibility","disabledText","Fragment","SectionWhenToUse","SectionWhenToAvoid","SectionRenderingIcons","getRenderIconCodeStrModifier","renderCustomBusyIcon","BankaiCircleDash","SectionRenderingCustomBusyIcons","getBusyIconCodeStrModifier","BannerInfo","SectionRenderingCustomContent","getRenderCustomContentCodeStrModifier","ButtonText","ButtonIcon","BankaiChevronRight","BtnHierarchyExamples","isDestructive","inlineBtnsBannerProps","stackedBtnsBannerProps","ButtonPrimary","SectionBtnHierarchyDefault","SectionBtnHierarchyExamples","SectionBtnHierarchyDestructive","SectionBtnHierarchy","SectionUsage","SectionBusyState","DoAndDoNotDo","doTitle","doNotDoTitle","BestPractices","SectionDoAndDoNotDo","doList","doNotDoList","SectionIconConsiderations","SectionIconPlacement","leftOfTextBannerProps","rightOfTextBannerProps","BankaiSettings","BankaiChevronDown","SectionDisabledButtons","SectionBestPractices","StoryButtonGuidelines","StoryLayout","PKG_JSON","BTNS_STORY_SUB_TITLE","SectionOverview","StoryButton","SectionPlayground","getBtnStoryPlaygroundComp","SectionImplementation","SectionDesign"],"mappings":"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"}