{"version":3,"file":"ColorPaletteGenerator.stories-bcc3a414.js","sources":["../../../lib/color-utils/src/utils/colorPaletteUtils.js","../../stories/designers/working-with-color/sections/color-palette-generator/SectionStatusPalette.jsx","../../stories/designers/working-with-color/sections/color-palette-generator/SectionPalette.jsx","../../stories/designers/working-with-color/StoryColorPaletteGenerator.jsx"],"sourcesContent":["import {\n    convertColorToHex,\n    convertColorToLCH,\n} from './colorFormatConversionUtils';\nimport { getSanitizedHex } from './dataSanitizerUtils';\nimport { COLOR_HARMONIES } from '../const/colorConst';\n\nconst adjustForUniqueHue = (\n    hue,\n    existingHues = [],\n    increment = 15,\n    tolerance = 1,\n) => {\n    let desiredHue = hue % 360;\n    let isDuplicateHue = existingHues.some(\n        (existingHue) => Math.abs(existingHue - desiredHue) < tolerance,\n    );\n\n    while (isDuplicateHue) {\n        const adjustedHue = (desiredHue + increment) % 360; // Shift to resolve overlap\n        desiredHue = adjustedHue;\n        isDuplicateHue = existingHues.some(\n            (existingHue) => Math.abs(existingHue - adjustedHue) < tolerance,\n        );\n    }\n\n    return desiredHue;\n};\n\n// const getHueDistance = (newHue, baseHue) => {\n//     return Math.abs(newHue - baseHue) % 180; // Max distance is 180 (opposite on the wheel)\n// };\n\nexport const getHuesForExistingColors = (existingColors) => {\n    if (!existingColors) {\n        return [];\n    }\n\n    return existingColors.map((color) => {\n        const { h: hue } = convertColorToLCH(color);\n\n        return hue;\n    });\n};\n\nconst generateHueOffsets = (numberOfColors = 1, step = 30) => {\n    const offsets = [];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        const sign = index % 2 === 0 ? 1 : -1; // Alternat positive/negative\n        offsets.push(sign * Math.ceil((index + 1) / 2) * step);\n    }\n\n    return offsets;\n};\n\nconst generateAdjustments = (range, numberOfColors = 1) => {\n    const { min, max } = range ?? {};\n    const step = (max - min) / numberOfColors;\n    const adjustments = [];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        adjustments.push(min + index * step);\n    }\n\n    return adjustments;\n};\n\nexport const generateAnalogousColor = ({\n    offset,\n    baseLCH,\n    chromaAdjustment,\n    lightnessAdjustment,\n    existingHues,\n}) => {\n    const { l: baseLightness, c: baseChroma, h: baseHue } = baseLCH ?? {};\n    const newHue = adjustForUniqueHue(baseHue + offset, existingHues, 30);\n    const newLCH = {\n        l: Math.max(10, Math.min(90, baseLightness + lightnessAdjustment)),\n        c: Math.max(10, Math.min(80, baseChroma + chromaAdjustment)),\n        h: newHue,\n    };\n\n    return {\n        hex: convertColorToHex(newLCH),\n        newHue,\n    };\n};\n\nexport const generateAnalogousPalette = ({\n    baseHex,\n    numberOfColors = 1,\n    existingColors = [],\n    reservedHues = [],\n    adjustmentsRange = { min: -20, max: 20 },\n}) => {\n    const sanitizedHex = getSanitizedHex(baseHex);\n    const baseLCH = convertColorToLCH(sanitizedHex);\n    const { h: baseHue } = baseLCH;\n    const existingHues = getHuesForExistingColors(existingColors);\n    const generatedHues = [baseHue];\n    const hueOffsets = generateHueOffsets(numberOfColors);\n    const chromaAdjustments = generateAdjustments(\n        adjustmentsRange,\n        numberOfColors,\n    );\n    const lightnessAdjustments = generateAdjustments(\n        adjustmentsRange,\n        numberOfColors,\n    );\n    const palette = [];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        const { hex, newHue } = generateAnalogousColor({\n            offset: hueOffsets[index],\n            baseLCH,\n            existingHues: [...existingHues, ...generatedHues, ...reservedHues],\n            chromaAdjustment: chromaAdjustments[index],\n            lightnessAdjustment: lightnessAdjustments[index],\n        });\n        generatedHues.push(newHue);\n        palette.push(hex);\n    }\n\n    return palette;\n};\n\nexport const generateMonochromaticPalette = ({\n    baseHex,\n    numberOfColors = 1,\n    chromaAdjustmentRange = { min: 10, max: 80 },\n    lightnessAdjustmentRange = { min: 10, max: 90 },\n}) => {\n    const sanitizedHex = getSanitizedHex(baseHex);\n    const baseLCH = convertColorToLCH(sanitizedHex);\n    const { h: baseHue } = baseLCH ?? {};\n    const chromaAdjustments = generateAdjustments(\n        chromaAdjustmentRange,\n        numberOfColors,\n    );\n    const lightnessAdjustments = generateAdjustments(\n        lightnessAdjustmentRange,\n        numberOfColors,\n    );\n    const palette = [];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        palette.push(\n            convertColorToHex({\n                l: Math.max(10, Math.min(90, lightnessAdjustments[index])),\n                c: Math.max(10, Math.min(80, chromaAdjustments[index])),\n                h: baseHue,\n            }),\n        );\n    }\n\n    return palette;\n};\n\nexport const generateTriadicPalette = ({\n    baseHex,\n    numberOfColors = 1,\n    existingColors = [],\n    reservedHues = [],\n    chromaAdjustmentRange = { min: 10, max: 50 },\n    lightnessAdjustmentRange = { min: 30, max: 80 },\n}) => {\n    const sanitizedHex = getSanitizedHex(baseHex);\n    const baseLCH = convertColorToLCH(sanitizedHex);\n    const { l: baseLightness, c: baseChroma, h: baseHue } = baseLCH;\n    const triadicHues = [120, -120].map(\n        (offset) => (baseHue + offset + 360) % 360,\n    );\n    const chromaAdjustments = generateAdjustments(\n        chromaAdjustmentRange,\n        numberOfColors,\n    );\n    const lightnessAdjustments = generateAdjustments(\n        lightnessAdjustmentRange,\n        numberOfColors,\n    );\n    const existingHues = getHuesForExistingColors(existingColors);\n    const generatedHues = [baseHue];\n    const palette = [];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        const triadicHue = triadicHues[index % triadicHues.length];\n        const newHue = adjustForUniqueHue(triadicHue, [\n            ...existingHues,\n            ...generatedHues,\n            ...reservedHues,\n        ]);\n        const newChroma = Math.max(\n            10,\n            Math.min(80, baseChroma + chromaAdjustments[index]),\n        );\n        const newLightness = Math.max(\n            10,\n            Math.min(90, baseLightness + lightnessAdjustments[index]),\n        );\n\n        palette.push(\n            convertColorToHex({\n                l: newLightness,\n                c: newChroma,\n                h: newHue,\n            }),\n        );\n    }\n\n    return palette;\n};\n\nexport const generateComplementaryPalette = ({\n    baseHex,\n    numberOfColors = 1,\n    existingColors = [],\n    reservedHues = [],\n}) => {\n    const sanitizedHex = getSanitizedHex(baseHex);\n    const baseLCH = convertColorToLCH(sanitizedHex);\n    const { l: baseLightness, c: baseChroma, h: baseHue } = baseLCH;\n    const hueStep = 180 / (numberOfColors - 1);\n    const existingHues = getHuesForExistingColors(existingColors);\n    const generatedHues = [baseHue];\n    const palette = [];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        const newHue = adjustForUniqueHue(\n            (baseHue + 180 + index * hueStep) % 360,\n            [...existingHues, ...generatedHues, ...reservedHues],\n        );\n        const newChroma = Math.max(\n            10,\n            Math.min(80, baseChroma + (index % 2 === 0 ? 10 : -10)),\n        );\n        const newLightness = Math.max(\n            10,\n            Math.min(90, baseLightness + index * 5),\n        );\n\n        palette.push(\n            convertColorToHex({\n                l: newLightness,\n                c: newChroma,\n                h: newHue,\n            }),\n        );\n\n        generatedHues.push(newHue);\n    }\n\n    return palette;\n};\n\nexport const generateSplitComplementaryPalette = ({\n    baseHex,\n    numberOfColors = 1,\n    existingColors = [],\n    reservedHues = [],\n}) => {\n    const sanitizedHex = getSanitizedHex(baseHex);\n    const baseLCH = convertColorToLCH(sanitizedHex);\n    const { l: baseLightness, c: baseChroma, h: baseHue } = baseLCH;\n    const existingHues = getHuesForExistingColors(existingColors);\n    const splitOffset = 30;\n    const palette = [];\n    const generatedHues = [baseHue];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        const newHue = adjustForUniqueHue(\n            index % 2 === 1\n                ? (baseHue + 180 - splitOffset) % 360\n                : (baseHue + 180 + splitOffset) % 360,\n            [...existingHues, ...generatedHues, ...reservedHues],\n        );\n        const newChroma = Math.max(\n            10,\n            Math.min(80, baseChroma + (index % 2 === 0 ? 10 : -10)),\n        );\n        const newLightness = Math.max(\n            10,\n            Math.min(90, baseLightness + index * 5),\n        );\n\n        palette.push(\n            convertColorToHex({\n                l: newLightness,\n                c: newChroma,\n                h: newHue,\n            }),\n        );\n\n        generatedHues.push(newHue);\n    }\n\n    return palette;\n};\n\nexport const generateSquarePalette = ({\n    baseHex,\n    numberOfColors = 1,\n    existingColors = [],\n    reservedHues = [],\n}) => {\n    const sanitizedHex = getSanitizedHex(baseHex);\n    const baseLCH = convertColorToLCH(sanitizedHex);\n    const { l: baseLightness, c: baseChroma, h: baseHue } = baseLCH;\n    const existingHues = getHuesForExistingColors(existingColors);\n    const hueStep = 90;\n    const generatedHues = [baseHue];\n    const palette = [];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        const newHue = adjustForUniqueHue((baseHue + index * hueStep) % 360, [\n            ...existingHues,\n            ...generatedHues,\n            ...reservedHues,\n        ]);\n        const newChroma = Math.max(\n            10,\n            Math.min(80, baseChroma + (index % 2 === 0 ? 10 : -10)),\n        );\n        const newLightness = Math.max(\n            10,\n            Math.min(90, baseLightness + index * 5),\n        );\n\n        palette.push(\n            convertColorToHex({\n                l: newLightness,\n                c: newChroma,\n                h: newHue,\n            }),\n        );\n\n        generatedHues.push(newHue);\n    }\n\n    return palette;\n};\n\nexport const generateTetradicPalette = ({\n    baseHex,\n    numberOfColors = 1,\n    existingColors = [],\n    reservedHues = [],\n}) => {\n    const sanitizedHex = getSanitizedHex(baseHex);\n    const baseLCH = convertColorToLCH(sanitizedHex);\n    const { l: baseLightness, c: baseChroma, h: baseHue } = baseLCH;\n    const existingHues = getHuesForExistingColors(existingColors);\n    const hueStep = 60;\n    const generatedHues = [baseHue];\n    const palette = [];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        const newHue = adjustForUniqueHue((baseHue + index * hueStep) % 360, [\n            ...existingHues,\n            ...generatedHues,\n            ...reservedHues,\n        ]);\n        const newChroma = Math.max(\n            10,\n            Math.min(80, baseChroma + (index % 2 === 0 ? 10 : -10)),\n        );\n        const newLightness = Math.max(\n            10,\n            Math.min(90, baseLightness + index * 5),\n        );\n\n        palette.push(\n            convertColorToHex({\n                l: newLightness,\n                c: newChroma,\n                h: newHue,\n            }),\n        );\n\n        generatedHues.push(newHue);\n    }\n\n    return palette;\n};\n\nexport const generateCompoundPalette = ({\n    baseHex,\n    numberOfColors = 1,\n    existingColors = [],\n    reservedHues = [],\n}) => {\n    const sanitizedHex = getSanitizedHex(baseHex);\n    const baseLCH = convertColorToLCH(sanitizedHex);\n    const { l: baseLightness, c: baseChroma, h: baseHue } = baseLCH;\n    const existingHues = getHuesForExistingColors(existingColors);\n    const hueOffsets = [-30, 30, 160, 200];\n    const palette = [];\n    const generatedHues = [baseHue];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        const newHue = adjustForUniqueHue(\n            (baseHue + hueOffsets[index % hueOffsets.length]) % 360,\n            [...existingHues, ...generatedHues, ...reservedHues],\n        );\n        const newChroma = Math.max(\n            10,\n            Math.min(80, baseChroma + (index % 2 === 0 ? 10 : -10)),\n        );\n        const newLightness = Math.max(\n            10,\n            Math.min(90, baseLightness + index * 5),\n        );\n\n        palette.push(\n            convertColorToHex({\n                l: newLightness,\n                c: newChroma,\n                h: newHue,\n            }),\n        );\n\n        generatedHues.push(newHue);\n    }\n\n    return palette;\n};\n\nexport const generateShadesPalette = ({\n    baseHex,\n    numberOfColors = 1,\n    lightnessRange = { min: 10, max: 90 },\n}) => {\n    const sanitizedHex = getSanitizedHex(baseHex);\n    const baseLCH = convertColorToLCH(sanitizedHex);\n    const { l: baseLightness, c: baseChroma, h: baseHue } = baseLCH;\n    const step =\n        (lightnessRange.max - lightnessRange.min) / (numberOfColors - 1);\n    let lightnessRanges = Array.from(\n        { length: numberOfColors },\n        (_, i) => lightnessRange.min + i * step,\n    ).filter((lightness) => Math.abs(lightness - baseLightness) > 1);\n\n    let iterations = 0;\n    const maxIterations = 100;\n    while (\n        lightnessRanges.length < numberOfColors &&\n        iterations < maxIterations\n    ) {\n        iterations += 1;\n        const iter = iterations;\n        lightnessRanges = Array.from(\n            { length: numberOfColors },\n            (_, i) =>\n                lightnessRange.min +\n                i *\n                    ((lightnessRange.max - lightnessRange.min) /\n                        (numberOfColors + iter)),\n        ).filter((lightness) => Math.abs(lightness - baseLightness) > 1);\n\n        if (iterations >= maxIterations) {\n            // eslint-disable-next-line no-console\n            console.error(\n                'Unable to generate a valid lightness range. Adjust constraints.',\n            );\n            break;\n        }\n    }\n    const palette = [];\n\n    for (let index = 0; index < numberOfColors; index += 1) {\n        const lightness = lightnessRanges[index];\n\n        palette.push(\n            convertColorToHex({\n                l: lightness,\n                c: baseChroma,\n                h: baseHue,\n            }),\n        );\n    }\n\n    return palette;\n};\n\nexport const generateHarmonyPalette = (harmony, ops) => {\n    switch (harmony) {\n        case COLOR_HARMONIES.COMPLEMENTARY:\n            return generateComplementaryPalette(ops);\n        case COLOR_HARMONIES.MONOCHROMATIC:\n            return generateMonochromaticPalette(ops);\n        case COLOR_HARMONIES.SPLIT_COMPLEMENTARY:\n            return generateSplitComplementaryPalette(ops);\n        case COLOR_HARMONIES.TRIAD:\n            return generateTriadicPalette(ops);\n        case COLOR_HARMONIES.SQUARE:\n            return generateSquarePalette(ops);\n        case COLOR_HARMONIES.TETRADIC:\n            return generateTetradicPalette(ops);\n        case COLOR_HARMONIES.COMPOUND:\n            return generateCompoundPalette(ops);\n        case COLOR_HARMONIES.SHADES:\n            return generateShadesPalette(ops);\n        case COLOR_HARMONIES.ANALOGOUS:\n        default:\n            return generateAnalogousPalette(ops);\n    }\n};\n","import { List } from '@driponfleek/bankai-ui-lists';\nimport {\n    StorySection,\n    SectionTitle,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport ColorDesignTokenListItem from '../../../../../sb-components/lists/ColorDesignTokenListItem';\n\n// Styles\nimport './styles/section-palette.scss';\n\nconst SectionStatusPalette = (props) => {\n    const { data = [] } = props;\n    const baseCls = genSBBaseCls('section-color-palette');\n\n    const renderListItem = (item) => {\n        const { color, mainContent } = item ?? {};\n\n        return <ColorDesignTokenListItem token={mainContent} color={color} />;\n    };\n\n    return (\n        <StorySection contextCls={baseCls}>\n            <SectionTitle>Status Colors</SectionTitle>\n            <List renderListItem={renderListItem} data={data} />\n        </StorySection>\n    );\n};\n\nexport default SectionStatusPalette;\n","import { List } from '@driponfleek/bankai-ui-lists';\nimport { IFLFormFieldComposer } from '@driponfleek/bankai-ui-form-elements';\nimport {\n    Dropdown,\n    NumberPicker,\n} from '@driponfleek/bankai-ui-form-elements-rw';\nimport { DynamicFormRow } from '@driponfleek/bankai-ui-layouts';\nimport {\n    StorySection,\n    SectionTitle,\n    genSBBaseCls,\n} from '@driponfleek/bankai-lib-storybook';\nimport { COLOR_HARMONIES } from '@driponfleek/bankai-lib-color-utils';\nimport ColorDesignTokenListItem from '../../../../../sb-components/lists/ColorDesignTokenListItem';\n\n// Styles\nimport './styles/section-palette.scss';\n\nconst DropdownField = IFLFormFieldComposer(Dropdown);\nconst NumberPickerField = IFLFormFieldComposer(NumberPicker);\nconst harmonyOps = Object.keys(COLOR_HARMONIES).map((harmony) => ({\n    text: harmony,\n    id: harmony,\n}));\nconst SectionPalette = (props) => {\n    const {\n        harmony,\n        title,\n        numberOfColors = 1,\n        data = [],\n        onHarmonyChange = () => Promise.resolve(),\n        onNumberOfColorsChange = () => Promise.resolve(),\n    } = props;\n    const baseCls = genSBBaseCls('section-color-palette');\n\n    const renderListItem = (item) => {\n        const { color } = item;\n\n        return (\n            <ColorDesignTokenListItem\n                token={color}\n                color={color}\n                shouldShowMeta={false}\n            />\n        );\n    };\n\n    return (\n        <StorySection contextCls={baseCls}>\n            {title && <SectionTitle>{title}</SectionTitle>}\n            <DynamicFormRow>\n                <DropdownField\n                    labelProps={{ content: 'Color Harmony' }}\n                    data={harmonyOps}\n                    dataKey=\"id\"\n                    textField=\"text\"\n                    value={harmony}\n                    onChange={onHarmonyChange}\n                    shouldDropUp\n                    isLeftAlignedLabel\n                />\n                <NumberPickerField\n                    labelProps={{ content: 'Number of Colors' }}\n                    value={numberOfColors}\n                    onChange={onNumberOfColorsChange}\n                    min={1}\n                    isLeftAlignedLabel\n                />\n            </DynamicFormRow>\n            <List renderListItem={renderListItem} data={data} />\n        </StorySection>\n    );\n};\n\nexport default SectionPalette;\n","import { useState, useMemo } from 'react';\nimport { StorySection, genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport {\n    genColorMetadata,\n    generateHarmonyPalette,\n    COLOR_HARMONIES,\n} from '@driponfleek/bankai-lib-color-utils';\nimport {\n    reservedStatusColorHues,\n    generateStatusPalette,\n} from '@driponfleek/bankai-lib-theme-utils/';\nimport { DynamicFormLayout } from '@driponfleek/bankai-ui-layouts';\nimport { getColorSwatchData } from './utils/colorVariantsGenStoryUtils';\nimport { STORY_SUB_TITLE } from './const/storyConst';\nimport SectionStatusPalette from './sections/color-palette-generator/SectionStatusPalette';\nimport SectionPalette from './sections/color-palette-generator/SectionPalette';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\nimport ColorPickerField from '../../../sb-components/form-elements/ColorPickerField';\n\n// Styles\nimport './styles/story-color-variants-gen.scss';\n\nconst StoryColorPaletteGenerator = () => {\n    const baseCls = genSBBaseCls('color-palette-gen');\n    const [baseColor, setBaseColor] = useState('#006fa3');\n    const [mainColorsCount, setMainColorsCount] = useState(2);\n    const [mainColorsHarmony, setMainColorsHarmony] = useState(\n        COLOR_HARMONIES.ANALOGOUS,\n    );\n    const [supplementaryColorsCount, setSupplementaryColorsCount] = useState(4);\n    const [supplementaryColorsHarmony, setSupplementaryColorsHarmony] =\n        useState(COLOR_HARMONIES.SQUARE);\n    const statusColors = useMemo(\n        () => generateStatusPalette(baseColor),\n        [baseColor],\n    );\n    const statusColorsArr = useMemo(\n        () => [\n            ...Object.entries(statusColors).map(\n                (statusColor) => statusColor[1],\n            ),\n        ],\n        [statusColors],\n    );\n    const mainColorsPaletteOps = useMemo(\n        () => ({\n            baseHex: baseColor,\n            numberOfColors: mainColorsCount,\n            existingColors: statusColorsArr,\n            reservedHues: reservedStatusColorHues,\n        }),\n        [baseColor, statusColorsArr, mainColorsCount],\n    );\n    const mainColors = useMemo(\n        () => generateHarmonyPalette(mainColorsHarmony, mainColorsPaletteOps),\n        [mainColorsHarmony, mainColorsPaletteOps],\n    );\n    const supplementaryColorsPaletteOps = useMemo(\n        () => ({\n            baseHex: baseColor,\n            numberOfColors: supplementaryColorsCount,\n            existingColors: [...statusColorsArr, ...mainColors],\n            reservedHues: reservedStatusColorHues,\n        }),\n        [baseColor, statusColorsArr, mainColors, supplementaryColorsCount],\n    );\n    const supplementaryColors = useMemo(\n        () =>\n            generateHarmonyPalette(\n                supplementaryColorsHarmony,\n                supplementaryColorsPaletteOps,\n            ),\n        [supplementaryColorsHarmony, supplementaryColorsPaletteOps],\n    );\n    const statusPalette = useMemo(\n        () => ({\n            Affirmative: statusColors.affirmative,\n            Cautionary: statusColors.cautionary,\n            Danger: statusColors.error,\n        }),\n        [statusColors],\n    );\n    const mainColorsListData = useMemo(() => {\n        return mainColors.map((color) =>\n            getColorSwatchData(genColorMetadata(color)),\n        );\n    }, [mainColors]);\n    const supplementaryColorsListData = useMemo(() => {\n        return supplementaryColors.map((color) =>\n            getColorSwatchData(genColorMetadata(color)),\n        );\n    }, [supplementaryColors]);\n    const statusListData = useMemo(() => {\n        return Object.keys(statusPalette).map((colorName) =>\n            getColorSwatchData({\n                ...genColorMetadata(statusPalette[colorName]),\n                tokenId: colorName,\n            }),\n        );\n    }, [statusPalette]);\n\n    const handleBaseColorChange = (value) => {\n        setBaseColor(value);\n    };\n\n    const handleMainColorsHarmonyChange = (params) => {\n        if (params?.id) {\n            setMainColorsHarmony(params?.id);\n        }\n    };\n\n    const handleNumberOfMainColorsChange = (params) => {\n        const { newValue } = params ?? {};\n\n        setMainColorsCount(newValue || 1);\n    };\n\n    const handleSupplementaryColorsHarmonyChange = (params) => {\n        if (params?.id) {\n            setSupplementaryColorsHarmony(params?.id);\n        }\n    };\n\n    const handleNumberOfSupplementaryColorsChange = (params) => {\n        const { newValue } = params ?? {};\n\n        setSupplementaryColorsCount(newValue || 1);\n    };\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title=\"Color Palette Generator\"\n            subTitle={STORY_SUB_TITLE}\n        >\n            <StorySection>\n                <DynamicFormLayout>\n                    <ColorPickerField\n                        color={baseColor}\n                        value={baseColor}\n                        onChange={handleBaseColorChange}\n                        labelProps={{ content: 'Base Color' }}\n                        isLeftAlignedLabel\n                    />\n                </DynamicFormLayout>\n            </StorySection>\n            <SectionPalette\n                title=\"Main Colors\"\n                data={mainColorsListData}\n                harmony={mainColorsHarmony}\n                numberOfColors={mainColorsCount}\n                onHarmonyChange={handleMainColorsHarmonyChange}\n                onNumberOfColorsChange={handleNumberOfMainColorsChange}\n            />\n            <SectionPalette\n                title=\"Supplementary Colors\"\n                data={supplementaryColorsListData}\n                harmony={supplementaryColorsHarmony}\n                numberOfColors={supplementaryColorsCount}\n                onHarmonyChange={handleSupplementaryColorsHarmonyChange}\n                onNumberOfColorsChange={handleNumberOfSupplementaryColorsChange}\n            />\n            <SectionStatusPalette data={statusListData} />\n        </StoryLayout>\n    );\n};\n\nexport default StoryColorPaletteGenerator;\n"],"names":["adjustForUniqueHue","hue","existingHues","increment","tolerance","desiredHue","isDuplicateHue","existingHue","adjustedHue","getHuesForExistingColors","existingColors","color","convertColorToLCH","generateHueOffsets","numberOfColors","step","offsets","index","sign","generateAdjustments","range","min","max","adjustments","generateAnalogousColor","offset","baseLCH","chromaAdjustment","lightnessAdjustment","baseLightness","baseChroma","baseHue","newHue","newLCH","convertColorToHex","generateAnalogousPalette","baseHex","reservedHues","adjustmentsRange","sanitizedHex","getSanitizedHex","generatedHues","hueOffsets","chromaAdjustments","lightnessAdjustments","palette","hex","generateMonochromaticPalette","chromaAdjustmentRange","lightnessAdjustmentRange","generateTriadicPalette","triadicHues","triadicHue","newChroma","newLightness","generateComplementaryPalette","hueStep","generateSplitComplementaryPalette","splitOffset","generateSquarePalette","generateTetradicPalette","generateCompoundPalette","generateShadesPalette","lightnessRange","lightnessRanges","_","i","lightness","iterations","maxIterations","iter","generateHarmonyPalette","harmony","ops","COLOR_HARMONIES","SectionStatusPalette","props","data","baseCls","genSBBaseCls","jsxs","StorySection","jsx","SectionTitle","List","item","mainContent","ColorDesignTokenListItem","DropdownField","IFLFormFieldComposer","Dropdown","NumberPickerField","NumberPicker","harmonyOps","SectionPalette","title","onHarmonyChange","onNumberOfColorsChange","DynamicFormRow","StoryColorPaletteGenerator","baseColor","setBaseColor","useState","mainColorsCount","setMainColorsCount","mainColorsHarmony","setMainColorsHarmony","supplementaryColorsCount","setSupplementaryColorsCount","supplementaryColorsHarmony","setSupplementaryColorsHarmony","statusColors","useMemo","generateStatusPalette","statusColorsArr","statusColor","mainColorsPaletteOps","reservedStatusColorHues","mainColors","supplementaryColorsPaletteOps","supplementaryColors","statusPalette","mainColorsListData","getColorSwatchData","genColorMetadata","supplementaryColorsListData","statusListData","colorName","StoryLayout","STORY_SUB_TITLE","DynamicFormLayout","ColorPickerField","value","params","newValue"],"mappings":"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"}