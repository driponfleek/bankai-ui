{"version":3,"file":"BestPractices.stories-5f1962a9.js","sources":["../../stories/developers/best-practice/sections/css/SectionIntro.jsx","../../stories/developers/best-practice/code-strings/codeStrCSSBestPractices.js","../../stories/developers/best-practice/sections/css/SectionClassNamingConventions.jsx","../../stories/developers/best-practice/sections/css/SectionContextClasses.jsx","../../stories/developers/best-practice/sections/css/SectionDosAndDontDos.jsx","../../stories/developers/best-practice/sections/css/SectionFurtherReading.jsx","../../stories/developers/best-practice/sections/css/SectionModifierClasses.jsx","../../stories/developers/best-practice/sections/css/SectionREMVsPX.jsx","../../stories/developers/best-practice/StoryCSSBestPractices.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionIntro.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderNaming.jsx","../../stories/developers/best-practice/components/FolderStructureHeading.jsx","../../stories/developers/best-practice/code-strings/codeStrFilesAndFolders.js","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureSrc.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureComponents.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureHooks.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureStyles.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureConst.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureI18N.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureMedia.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructurePages.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureServices.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureUtils.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructureTests.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFolderStructure.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFileNamingCamelCase.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFileNamingPascalCase.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFileNamingKebabCase.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFileNaming.jsx","../../stories/developers/best-practice/sections/folders-and-files/SectionFurtherReading.jsx","../../stories/developers/best-practice/StoryFolderAndFileBestPractices.jsx","../../stories/developers/best-practice/sections/js/SectionIntro.jsx","../../stories/developers/best-practice/components/CorrectIncorrectCodeExample.jsx","../../stories/developers/best-practice/code-strings/codeStrJSBestPractice.js","../../stories/developers/best-practice/sections/js/SectionNamingConventionsBools.jsx","../../stories/developers/best-practice/sections/js/SectionNamingConventionsVariables.jsx","../../stories/developers/best-practice/sections/js/SectionNamingConventionsEventHandlers.jsx","../../stories/developers/best-practice/sections/js/SectionNamingConventionsAPIFetching.jsx","../../stories/developers/best-practice/sections/js/SectionNamingConventionsGetterFunctions.jsx","../../stories/developers/best-practice/sections/js/SectionNamingConventionsFuncs.jsx","../../stories/developers/best-practice/sections/js/SectionNamingConventionsConts.jsx","../../stories/developers/best-practice/sections/js/SectionNamingConventionsClasses.jsx","../../stories/developers/best-practice/sections/js/SectionNamingConventionsAdditionalConsiderations.jsx","../../stories/developers/best-practice/sections/js/SectionNamingConventions.jsx","../../stories/developers/best-practice/sections/js/SectionVariableDeclaration.jsx","../../stories/developers/best-practice/sections/js/SectionNoNull.jsx","../../stories/developers/best-practice/sections/js/SectionFurtherReading.jsx","../../stories/developers/best-practice/StoryJSBestPractices.jsx","../../stories/developers/best-practice/sections/react/SectionIntro.jsx","../../stories/developers/best-practice/sections/react/SectionNamingConventions.jsx","../../stories/developers/best-practice/sections/react/SectionProps.jsx","../../stories/developers/best-practice/sections/react/SectionComponents.jsx","../../stories/developers/best-practice/sections/react/SectionReactHooksAvoidUseEffect.jsx","../../stories/developers/best-practice/sections/react/SectionReactHooksUseStateVsUseReducer.jsx","../../stories/developers/best-practice/sections/react/SectionReactHooks.jsx","../../stories/developers/best-practice/sections/react/SectionFurtherReading.jsx","../../stories/developers/best-practice/StoryReactBestPractices.jsx"],"sourcesContent":["import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionIntro = () => {\n    return (\n        <StorySection>\n            <Paragraph>\n                Crafting a polished interface is a journey that starts with\n                thoughtful styles. Our CSS Best Practices guide is here to\n                assist, whether you&apos;re a seasoned developer or just\n                beginning. Gain insights into naming conventions, name spacing,\n                context, and modifier classes to enhance your coding skills.\n                Explore the nuances of rem vs px, not only for responsiveness\n                but also for improved accessibility. Uncover crucial do&apos;s\n                and don&apos;ts for maintaining clean, maintainable, and\n                high-performance stylesheets. Welcome to CSS excellence, where\n                simplicity and efficiency coexist with design excellence.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionIntro;\n","const blockCls = 'button';\nconst nameSpace = 'bankai';\n\nexport const codeStrBEMExample = `<button class=\"${blockCls} ${blockCls}--primary\">\n    <span class=\"${blockCls}__icon\">✓</span>\n</button>`;\n\nexport const codeStrBEMWithNameSapce = `<button class=\"${nameSpace}-${blockCls} ${blockCls}--primary\">\n    <span class=\"${nameSpace}-${blockCls}__icon\">✓</span>\n</button>`;\n\nexport const stylesFolderAndFileNameCodeStr = `.\n└── src\n    ├── styles\n    │   └── my-component.scss\n    └── MyComponent.js`;\n\nexport const codeStrContextClsExample = `import { Button } from '@driponfleek/bankai-ui-buttons';\n\nconst contextCls = 'log-in-button';\n\n<Button contextCls={contextCls} text=\"Log In\" />\n\n// CSS Class List Output: .bankai-button.log-in-button`;\n","import {\n    OmniList,\n    OmniListItem,\n    Paragraph,\n} from '@driponfleek/bankai-ui-typography';\nimport { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport {\n    CodeTag,\n    StorySection,\n    SectionTitle,\n} from '@driponfleek/bankai-lib-storybook';\nimport CodeBlock from '../../../../../sb-components/docblocks/CodeBlock';\nimport {\n    codeStrBEMExample,\n    codeStrBEMWithNameSapce,\n} from '../../code-strings/codeStrCSSBestPractices';\n\nconst SectionClassNamingConventions = () => {\n    return (\n        <StorySection>\n            <SectionTitle>CSS Naming Conventions</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    <Hyperlink\n                        href=\"http://getbem.com/naming/\"\n                        shouldOpenInNewWindow\n                    >\n                        BEM\n                    </Hyperlink>{' '}\n                    &#40;Block, Element, Modifier&#41; is a clear and\n                    maintainable naming convention for CSS classes and IDs,\n                    providing a structured approach to naming elements in your\n                    stylesheets. The three core entities in BEM are&#58;\n                </Paragraph>\n                <OmniList isOrderedList>\n                    <OmniListItem>\n                        <strong>Block&#58;</strong> Represents a standalone\n                        component that is meaningful on its own, such as a\n                        button or a navigation bar.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Element&#58;</strong> A part of a block that has\n                        no standalone meaning and is semantically tied to its\n                        block, like a button&apos;s label or an item in a\n                        navigation menu.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Modifier&#58;</strong> Flags on blocks or\n                        elements to define variations or states, allowing you to\n                        modify their appearance or behavior. For example, a\n                        button could have a modifier for a different color when\n                        in a disabled state.\n                    </OmniListItem>\n                </OmniList>\n                <Paragraph>\n                    BEM&apos;s syntax is structured as{' '}\n                    <CodeTag>block__element--modifier</CodeTag>, offering\n                    clarity and consistency in your CSS code. This convention\n                    enhances collaboration among developers and simplifies the\n                    maintenance of stylesheets as your project grows&#58;\n                </Paragraph>\n                <CodeBlock\n                    codeString={codeStrBEMExample}\n                    shouldShowCopy={false}\n                />\n                <OmniList>\n                    <OmniListItem>\n                        <strong>Block&#58;</strong> <CodeTag>button</CodeTag>\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Element&#58;</strong>{' '}\n                        <CodeTag>button__icon</CodeTag>\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Modifier&#58;</strong>{' '}\n                        <CodeTag>button--primary</CodeTag>\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>Name Spacing</SectionTitle>\n                <StorySection>\n                    <Paragraph>\n                        To foster organization and mitigate naming conflicts, we\n                        recommend namespacing all classes and IDs using the\n                        pattern: <CodeTag>[sdk name]-[block]</CodeTag> &mdash;\n                        for example, <CodeTag>bankai-accordion</CodeTag>. This\n                        not only ensures uniqueness and clarity but also\n                        significantly boosts style scoping. The prefixed names\n                        create a well-defined, isolated scope for styles,\n                        diminishing the likelihood of unintended conflicts. This\n                        practice proves particularly valuable in larger\n                        projects, where maintaining a clear, conflict-free\n                        styling approach is crucial for robust and scalable\n                        applications.\n                    </Paragraph>\n                    <CodeBlock\n                        codeString={codeStrBEMWithNameSapce}\n                        shouldShowCopy={false}\n                    />\n                    <OmniList>\n                        <OmniListItem>\n                            <strong>Name Space&#58;</strong>{' '}\n                            <CodeTag>bankai</CodeTag>\n                        </OmniListItem>\n                        <OmniListItem>\n                            <strong>Block&#58;</strong>{' '}\n                            <CodeTag>button</CodeTag>\n                        </OmniListItem>\n                        <OmniListItem>\n                            <strong>Element&#58;</strong>{' '}\n                            <CodeTag>button__icon</CodeTag>\n                        </OmniListItem>\n                        <OmniListItem>\n                            <strong>Modifier&#58;</strong>{' '}\n                            <CodeTag>button--primary</CodeTag>\n                        </OmniListItem>\n                    </OmniList>\n                </StorySection>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionClassNamingConventions;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\nimport { getLocale } from '../../../../../utils/localeUtils';\nimport CodeBlock from '../../../../../sb-components/docblocks/CodeBlock';\nimport { codeStrContextClsExample } from '../../code-strings/codeStrCSSBestPractices';\n\nconst SectionContextClasses = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Context Classes</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Enhance the adaptability of your styles by leveraging\n                    context classes within {getLocale('designSystemName')}.\n                    Context classes provide a powerful way to tailor the\n                    appearance of an element based on its surroundings or\n                    placement in the UI. For example, you can use a context\n                    class to style a button differently when it&apos;s placed\n                    within a specific section, ensuring a cohesive and\n                    contextual user interface&#58;\n                </Paragraph>\n                <CodeBlock\n                    codeString={codeStrContextClsExample}\n                    shouldShowCopy={false}\n                />\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    When to Use Context Classes\n                </SectionTitle>\n                <StorySection>\n                    <OmniList>\n                        <OmniListItem>\n                            <strong>Surrounding Environment&#58;</strong> Apply\n                            context classes when you want a component to adapt\n                            its style based on its immediate surroundings in the\n                            UI. This allows for a more flexible and contextually\n                            relevant presentation.\n                        </OmniListItem>\n                    </OmniList>\n                </StorySection>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    Benefits of Context Classes\n                </SectionTitle>\n                <StorySection>\n                    <OmniList>\n                        <OmniListItem>\n                            <strong>Enhanced Adaptability&#58;</strong> Context\n                            classes enable your components to seamlessly adapt\n                            to different parts of the UI, ensuring a consistent\n                            yet tailored user experience.\n                        </OmniListItem>\n                        <OmniListItem>\n                            <strong>Improved Style Scope&#58;</strong> By using\n                            context classes, you enhance the style scoping of\n                            your components. Each context class creates a\n                            well-defined scope for styles, preventing unintended\n                            clashes and providing a cleaner, more maintainable\n                            codebase.\n                        </OmniListItem>\n                        <Paragraph>\n                            Utilize context classes judiciously to create a\n                            design system that not only maintains consistency\n                            but also gracefully adapts to diverse UI scenarios,\n                            fostering a more dynamic and user-friendly\n                            interface.\n                        </Paragraph>\n                    </OmniList>\n                </StorySection>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionContextClasses;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    SectionTitle,\n    DoAndDoNotDo,\n    CodeTag,\n} from '@driponfleek/bankai-lib-storybook';\nimport { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionDosAndDontDos = () => {\n    const doList = [\n        <>\n            <strong>Do Use Descriptive Class Names&#58;</strong> Choose class\n            names that clearly convey the purpose of the styles they represent.\n            This fosters readability and makes maintenance more straightforward.\n        </>,\n        <>\n            <strong>Do Leverage BEM Naming Convention&#58;</strong> Follow the\n            BEM (Block, Element, Modifier) naming convention for clarity and\n            maintainability in your CSS code. It enhances collaboration and\n            simplifies scaling your project.\n        </>,\n        <>\n            <strong>Do Name Space Classes and IDs&#58;</strong> Prefix all\n            classes and IDs with the pattern{' '}\n            <CodeTag>[sdk name]-[block]</CodeTag> to ensure uniqueness and\n            reduce the risk of naming conflicts. This practice also improves\n            style scoping.\n        </>,\n        <>\n            <strong>Do Utilize Context Classes Wisely&#58;</strong> Ensure all\n            components have a contextCls prop. Employ context classes to adapt\n            component styles based on their surroundings in the UI. This\n            enhances adaptability and fosters a cohesive user experience.\n        </>,\n        <>\n            <strong>\n                Do Use Modifier Classes for Variants and States&#58;\n            </strong>{' '}\n            Apply modifier classes to specify styles for different component\n            variants or states. Follow the BEM syntax &#40;\n            <CodeTag>block__element--modifier</CodeTag>&#41; to maintain clarity\n            and consistency.\n        </>,\n        <>\n            <strong>Do Choose rem for Scalability&#58;</strong> Opt for rem\n            units when defining spacing and sizing that should scale with font\n            size, promoting accessibility and responsive design.\n        </>,\n        <>\n            <strong>Do Use Kebab-Case for Classes and IDs&#58;</strong>{' '}\n            Consistently use{' '}\n            <Hyperlink\n                href=\"https://en.wikipedia.org/wiki/Letter_case#Kebab_case\"\n                shouldOpenInNewWindow\n            >\n                kebab-case\n            </Hyperlink>{' '}\n            for class names and IDs to ensure a standardized and readable\n            approach in your stylesheets.\n        </>,\n        <>\n            <strong>Do Ensure Every Element Has a Class&#58;</strong> Assign a\n            class name to every element to provide developers with a reliable\n            way to target it without modifying the original component.\n        </>,\n        <>\n            <strong>Do Use CSS Variables with Fallbacks&#58;</strong> Implement\n            CSS Variables with fallback values to ensure graceful degradation in\n            case a variable is not supported.\n        </>,\n        <>\n            <strong>Do Use SASS Mixins and Variables&#58;</strong> Leverage SASS\n            mixins and variables to ensure consistency and prevent redundant\n            code.\n        </>,\n    ];\n    const doNotDoList = [\n        <>\n            <strong>Do Not Use Unclear or Generic Class Names&#58;</strong>{' '}\n            Avoid ambiguous class names that make it challenging to understand\n            the purpose of the styles. Be explicit and descriptive.\n        </>,\n        <>\n            <strong>Do Not Deviate from the BEM Convention&#58;</strong> Stick\n            to the BEM naming convention consistently. Deviating from it can\n            lead to confusion, especially in collaborative projects.\n        </>,\n        <>\n            <strong>Do Not Skip Name Spacing&#58;</strong> Neglecting to\n            namespace classes and IDs increases the risk of naming conflicts,\n            impacting the maintainability of your stylesheets.\n        </>,\n        <>\n            <strong>Do Not Overuse Context Classes&#58;</strong> While context\n            classes are powerful, overusing them can lead to a complex and\n            convoluted styling system. Apply them judiciously.\n        </>,\n        <>\n            <strong>Do Not Neglect Modifier Classes&#58;</strong> Ensure that\n            modifier classes follow the BEM syntax and are applied consistently.\n            Neglecting them can result in inconsistent styling for different\n            component states or variants.\n        </>,\n        <>\n            <strong>\n                Do Not Use Camel-Case, Snake-Case, or Pascal-Case&#58;\n            </strong>{' '}\n            Stick to kebab-case for classes and IDs &#40;with the exception of\n            elements in BEM naming convention that use double-underscore&#41; to\n            maintain a uniform and predictable coding style.\n        </>,\n        <>\n            <strong>Do Not Style IDs Directly&#58;</strong> Due to their high\n            specificity, avoid styling IDs directly. Instead, use classes for\n            styling to ensure easier overrides in different contexts.\n        </>,\n        <>\n            <strong>Do Not Style HTML Elements Directly&#58;</strong> Refrain\n            from styling HTML elements directly to prevent global impacts and\n            make contextual overrides more manageable.\n        </>,\n        <>\n            <strong>\n                Do Not Use Inline Styles Unless Absolutely Necessary&#58;\n            </strong>{' '}\n            Inline styles can complicate maintenance and reduce the reusability\n            of styles. Reserve inline styles for exceptional cases.\n        </>,\n        <>\n            <strong>\n                Do Not Start Classes and IDs with Numbers or Include Special\n                Characters&#58;\n            </strong>{' '}\n            Follow a naming convention that avoids starting class names or IDs\n            with numbers and excludes special characters to maintain\n            compatibility and avoid unexpected behavior.\n        </>,\n    ];\n\n    return (\n        <StorySection>\n            <SectionTitle>{getLocale('titles.dosAndDoNotDos')}</SectionTitle>\n            <StorySection>\n                <DoAndDoNotDo\n                    doTitle=\"Do's for Clean and Efficient CSS\"\n                    doNotDoTitle=\"Do Not Do's for CSS Pitfalls\"\n                    doList={doList}\n                    doNotDoList={doNotDoList}\n                />\n                <Paragraph>\n                    By adhering to these best practices, you&apos;ll establish a\n                    solid foundation for your projects, ensuring clean,\n                    maintainable, and high-performance CSS.\n                </Paragraph>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionDosAndDontDos;\n","import { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionFurtherReading = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Further Reading</SectionTitle>\n            <StorySection>\n                <OmniList>\n                    <OmniListItem>\n                        <strong>BEM Methodology&#58;</strong> Learn more about\n                        the BEM (Block, Element, Modifier) naming convention and\n                        its advantages in creating scalable and maintainable\n                        CSS.{' '}\n                        <Hyperlink\n                            href=\"http://getbem.com/\"\n                            shouldOpenInNewWindow\n                        >\n                            BEM Documentation\n                        </Hyperlink>\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>CSS Variables and Fallbacks&#58;</strong> Dive\n                        into the usage of CSS Variables and the importance of\n                        providing fallback values.{' '}\n                        <Hyperlink\n                            href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\"\n                            shouldOpenInNewWindow\n                        >\n                            MDN Web Docs - CSS Variables\n                        </Hyperlink>\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>SASS Mixins and Variables&#58;</strong> Explore\n                        the benefits of using SASS mixins and variables for a\n                        more modular and efficient stylesheet.{' '}\n                        <Hyperlink\n                            href=\"https://sass-lang.com/documentation\"\n                            shouldOpenInNewWindow\n                        >\n                            SASS Documentation\n                        </Hyperlink>\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Rem vs Px&#58;</strong> Understand the\n                        considerations between using rem and px units for\n                        spacing and sizing in your CSS.{' '}\n                        <Hyperlink\n                            href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#Relative_units\"\n                            shouldOpenInNewWindow\n                        >\n                            MDN Web Docs - Use relative units\n                        </Hyperlink>\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Kebab-Case&#58;</strong> Understand the\n                        importance of kebab-case in naming classes and IDs for a\n                        consistent and readable coding style.{' '}\n                        <Hyperlink\n                            href=\"https://developer.mozilla.org/en-US/docs/Glossary/Kebab_case\"\n                            shouldOpenInNewWindow\n                        >\n                            MDN Web Docs - Kebab Case\n                        </Hyperlink>\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>\n                            Understanding Success Criterion 1.4.4 &#40;Resize\n                            Text&#41;&#58;\n                        </strong>{' '}\n                        Gain insights into the accessibility guideline regarding\n                        text resizing and its impact on users.{' '}\n                        <Hyperlink\n                            href=\"https://www.w3.org/WAI/WCAG21/quickref/#resize-text\"\n                            shouldOpenInNewWindow\n                        >\n                            Understanding SC 1.4.4 - W3C\n                        </Hyperlink>\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionFurtherReading;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport {\n    StorySection,\n    SectionTitle,\n    CodeTag,\n    BannerInfo,\n} from '@driponfleek/bankai-lib-storybook';\nimport { getLocale } from '../../../../../utils/localeUtils';\n\nconst SectionModifierClasses = () => {\n    const bannerMsg = (\n        <>\n            Ensure your modifier classes follow the BEM syntax &#40;\n            <CodeTag>block__element--modifier</CodeTag>&#41; to maintain clarity\n            and consistency in your stylesheets. Use modifier classes\n            thoughtfully to create a versatile and expressive design system.\n        </>\n    );\n\n    return (\n        <StorySection>\n            <SectionTitle>Modifier Classes</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Modifier classes in {getLocale('designSystemName')} offer a\n                    powerful way to specify styles for different variants of a\n                    component or for its various states. Consider using modifier\n                    classes when you need to alter the appearance or behavior of\n                    a component based on specific conditions. Here are some\n                    examples&#58;\n                </Paragraph>\n                <OmniList>\n                    <OmniListItem>\n                        <strong>Variant Styles&#58;</strong>\n                        <OmniList>\n                            <OmniListItem>\n                                <CodeTag>bankai-button--primary&#58;</CodeTag>{' '}\n                                Styles for the primary variant of a button.\n                            </OmniListItem>\n                            <OmniListItem>\n                                <CodeTag>bankai-card--featured&#58;</CodeTag>{' '}\n                                Styles for a featured variant of a card\n                                component.\n                            </OmniListItem>\n                        </OmniList>\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>State Styles&#58;</strong>\n                        <OmniList>\n                            <OmniListItem>\n                                <CodeTag>bankai-input--error&#58;</CodeTag>{' '}\n                                Styles for an input component in an error state.\n                            </OmniListItem>\n                            <OmniListItem>\n                                <CodeTag>bankai-checkbox--checked&#58;</CodeTag>{' '}\n                                Styles for a checkbox component when it&apos;s\n                                checked.\n                            </OmniListItem>\n                        </OmniList>\n                    </OmniListItem>\n                </OmniList>\n                <BannerInfo msg={bannerMsg} />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionModifierClasses;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport { StorySection, SectionTitle } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionREMVsPX = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Choosing Between rem and px</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Selecting the appropriate unit for your styles involves\n                    understanding the nuances of rem &#40;root em&#41; and px\n                    &#40;pixels&#41;. Consider the following guidelines to make\n                    informed decisions&#58;\n                </Paragraph>\n                <OmniList>\n                    <OmniListItem>\n                        <strong>Use rem for Accessibility&#58;</strong> For\n                        improved accessibility, particularly for{' '}\n                        <Hyperlink\n                            href=\"https://www.w3.org/WAI/WCAG21/Understanding/resize-text.html\"\n                            shouldOpenInNewWindow\n                        >\n                            users who may adjust their browser&apos;s font size\n                        </Hyperlink>{' '}\n                        settings, use rem units. Unlike pixels, rem units are\n                        relative to the root font-size, providing a scalable and\n                        accessible layout.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>\n                            Use rem for Dynamic Spacing and Sizing&#58;\n                        </strong>{' '}\n                        Opt for rem units when defining spacing and sizing that\n                        should dynamically scale with font size. This ensures a\n                        harmonious layout as font sizes adjust, maintaining\n                        balanced proportions across your design.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Use px for Fixed Elements&#58;</strong> When\n                        specific elements need a fixed size, such as borders,\n                        margins, or small icons, px units may be more suitable.\n                        Keep in mind that fixed sizes may not scale well with\n                        user preferences for larger text.\n                    </OmniListItem>\n                    <OmniListItem>\n                        <strong>Combine for Flexibility&#58;</strong> A hybrid\n                        approach is often effective. Use rem for elements where\n                        scalability matters, and px for fixed-size elements to\n                        maintain precision.\n                    </OmniListItem>\n                </OmniList>\n                <Paragraph>\n                    By understanding the strengths of each unit, you can strike\n                    a balance between flexibility and precision in your styles,\n                    ensuring a harmonious user experience across various devices\n                    and preferences.\n                </Paragraph>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionREMVsPX;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport SectionIntro from './sections/css/SectionIntro';\nimport SectionClassNamingConventions from './sections/css/SectionClassNamingConventions';\nimport SectionContextClasses from './sections/css/SectionContextClasses';\nimport SectionDosAndDontDos from './sections/css/SectionDosAndDontDos';\nimport SectionFurtherReading from './sections/css/SectionFurtherReading';\nimport SectionModifierClasses from './sections/css/SectionModifierClasses';\nimport SectionREMVsPX from './sections/css/SectionREMVsPX';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\nimport { getDevelopersTitle } from '../../../utils/storiesConfigUtils';\n\nconst StoryCSSBestPractices = () => {\n    const baseCls = genSBBaseCls('css-best-practices');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale('stories.developers.bestPractices.css.title')}\n            subTitle={getDevelopersTitle(getLocale('titles.bestPracices'))}\n        >\n            <SectionIntro />\n            <SectionClassNamingConventions />\n            <SectionContextClasses />\n            <SectionModifierClasses />\n            <SectionREMVsPX />\n            <SectionDosAndDontDos />\n            <SectionFurtherReading />\n        </StoryLayout>\n    );\n};\n\nexport default StoryCSSBestPractices;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionIntro = () => {\n    return (\n        <StorySection>\n            <Paragraph>\n                Well-organized files and folders contribute to a streamlined\n                development process, ensuring clarity, maintainability, and\n                collaboration among developers. From establishing a coherent\n                structure to naming conventions, let&apos;s explore the best\n                practices that empower our applications to scale seamlessly.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionIntro;\n","import { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    DoAndDoNotDo,\n    StorySection,\n    SectionTitle,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionFolderNaming = () => {\n    const doList = [\n        <>components</>,\n        <>utility-functions</>,\n        <>button-styles</>,\n    ];\n    const doNotDoList = [\n        <>Components</>,\n        <>utility_functions</>,\n        <>ButtonStyles</>,\n    ];\n\n    return (\n        <StorySection>\n            <SectionTitle>Folder Naming</SectionTitle>\n            <Paragraph>\n                <strong>Use kebab-case for folder names&#58;</strong> Adopt{' '}\n                <Hyperlink\n                    href=\"https://en.wikipedia.org/wiki/Letter_case#Kebab_case\"\n                    shouldOpenInNewWindow\n                >\n                    kebab-case\n                </Hyperlink>{' '}\n                for consistent and readable naming of folders, promoting clarity\n                and adherence to a standardized convention.\n            </Paragraph>\n            <DoAndDoNotDo\n                doTitle=\"Examples of Valid Folder Names\"\n                doNotDoTitle=\"Avoid Other Naming Conventions\"\n                doList={doList}\n                doNotDoList={doNotDoList}\n                isSideBySide\n            />\n        </StorySection>\n    );\n};\n\nexport default SectionFolderNaming;\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { BankaiFolderOpen } from '@driponfleek/bankai-ui-icons';\nimport { SectionTitle, genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\n\n// Styles\nimport './styles/folder-structure-heading.scss';\n\nconst FolderStructureHeading = (props) => {\n    const { contextCls, children, ...rest } = props;\n    const baseCls = genSBBaseCls('folder-structure-heading');\n\n    return (\n        <SectionTitle {...rest} contextCls={cx(baseCls, contextCls)}>\n            <BankaiFolderOpen />{' '}\n            <span className={`${baseCls}__text`}>{children}</span>\n        </SectionTitle>\n    );\n};\n\nFolderStructureHeading.defaultProps = {\n    headingLvl: 3,\n};\n\nFolderStructureHeading.propTypes = {\n    contextCls: PropTypes.string,\n    headingLvl: PropTypes.number,\n};\n\nexport default FolderStructureHeading;\n","export const codeStrComponentsFolder = `.\n└── src\n    └── components\n        └── forms\n            ├── LoginForm.jsx\n            └── SignUpForm.jsx`;\n\nexport const codeStrConstFolder = `.\n└── src\n    └── const\n        └── platformConst.js`;\n\nexport const codeStrHooksFolder = `.\n└── src\n    └── hooks\n        └── useWindowResize.js`;\n\nexport const codeStrI18NFolder = `.\n└── src\n    └── i18n\n        └── en-us.json`;\n\nexport const codeStrMedia = `.\n└── src\n    └── media\n        ├── fonts\n        ├── images\n        └── video`;\n\nexport const codeStrPagesFolder = `.\n└── src\n    └── pages\n        └── Home.jsx`;\n\nexport const codeStrServicesFolder = `.\n└── src\n    └── services\n        ├── appService.js\n        └── userService.js`;\n\nexport const codeStrSrcFolder = `.\n└── src`;\n\nexport const codeStrUtilsFolder = `.\n└── src\n    └── utils\n        └── signUpFormValidationUtils.js`;\n\nexport const codeStrTestsFolder = `.\n└── src\n    └── components\n        └── buttons\n            ├── __tests__\n            │   └── Button.test.jsx\n            └── Button.jsx`;\n\nexport const codeStrStylesFolder = `.\n└── src\n    └── components\n        └── buttons\n            ├── styles\n            │   └── button.scss\n            └── Button.jsx`;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { CodeBlock, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrSrcFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureSrc = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>src</FolderStructureHeading>\n            <CodeBlock codeString={codeStrSrcFolder} />\n            <Paragraph>\n                The heart of our source code, containing the main application or\n                library code.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureSrc;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeBlock,\n    StorySection,\n    BannerInfo,\n} from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrComponentsFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureComponents = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>components</FolderStructureHeading>\n            <CodeBlock codeString={codeStrComponentsFolder} />\n            <Paragraph>\n                Group your reusable components in this directory.\n            </Paragraph>\n            <BannerInfo msg=\"Avoid placing components directly within the components folder. Instead,  organize components into sub-folders based on their category or type. This hierarchical organization ensures a systematic and scalable structure for our components.\" />\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureComponents;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { CodeBlock, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrHooksFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureHooks = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>hooks</FolderStructureHeading>\n            <CodeBlock codeString={codeStrHooksFolder} />\n            <Paragraph>\n                A dedicated space for custom React hooks used throughout our\n                applications.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureHooks;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    BannerInfo,\n    CodeBlock,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrStylesFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureStyles = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>styles</FolderStructureHeading>\n            <CodeBlock codeString={codeStrStylesFolder} />\n            <Paragraph>\n                Centralize stylesheets and styling-related assets in this\n                directory.\n            </Paragraph>\n            <BannerInfo\n                msg={\n                    <>\n                        This folder should always be located within the root of\n                        the folder that contains the{' '}\n                        <abbr title=\"User Interface\">UI</abbr> the styles are\n                        for.\n                    </>\n                }\n            />\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureStyles;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { CodeBlock, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrConstFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureConst = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>const</FolderStructureHeading>\n            <CodeBlock codeString={codeStrConstFolder} />\n            <Paragraph>\n                Store constants in this directory for easy access and\n                centralized management.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureConst;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { CodeBlock, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrI18NFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureI18N = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>\n                <abbr title=\"internationalization\">i18n</abbr>\n            </FolderStructureHeading>\n            <CodeBlock codeString={codeStrI18NFolder} />\n            <Paragraph>\n                A dedicated space for internationalization and localization\n                files to support multiple languages.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureI18N;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    BannerInfo,\n    CodeBlock,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrMedia } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureMedia = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>media</FolderStructureHeading>\n            <CodeBlock codeString={codeStrMedia} />\n            <Paragraph>\n                Store media assets such as images, videos, and other multimedia\n                elements.\n            </Paragraph>\n            <BannerInfo msg=\"Avoid placing media files directly within the media folder. Instead, organize media assets into sub-folders based on their category or type. This structured approach simplifies the process of finding specific types of media files, promoting efficient asset management.\" />\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureMedia;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    BannerDanger,\n    CodeBlock,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrPagesFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructurePages = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>pages</FolderStructureHeading>\n            <CodeBlock codeString={codeStrPagesFolder} />\n            <Paragraph>\n                Organize application pages or views in this directory.\n            </Paragraph>\n            <BannerDanger\n                msg={\n                    <>\n                        <strong>\n                            Do not place pages within the components folder!\n                        </strong>{' '}\n                        Keep the pages directory separate to maintain a clear\n                        distinction between application pages and reusable\n                        components.\n                    </>\n                }\n            />\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructurePages;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { CodeBlock, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrServicesFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureServices = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>services</FolderStructureHeading>\n            <CodeBlock codeString={codeStrServicesFolder} />\n            <Paragraph>\n                The services folder serves as a dedicated space for managing{' '}\n                <abbr title=\"Application Programming Interface\">API</abbr> calls\n                within our application. As the central hub for all communication\n                with external and internal services, this folder houses utility\n                functions, classes, or modules specifically designed to handle\n                interactions with APIs. Organizing API-related code in the\n                services directory promotes a structured and coherent approach\n                to managing our application&apos;s data-fetching logic.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureServices;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { CodeBlock, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrUtilsFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureUtils = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>utils</FolderStructureHeading>\n            <CodeBlock codeString={codeStrUtilsFolder} />\n            <Paragraph>\n                Store utility functions, helper classes, or modules in the utils\n                folder. This aids in keeping our codebase organized and\n                facilitates the reuse of common functionality.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureUtils;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    BannerInfo,\n    CodeBlock,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\nimport FolderStructureHeading from '../../components/FolderStructureHeading';\nimport { codeStrTestsFolder } from '../../code-strings/codeStrFilesAndFolders';\n\nconst SectionFolderStructureTests = () => {\n    return (\n        <StorySection>\n            <FolderStructureHeading>__tests__</FolderStructureHeading>\n            <CodeBlock codeString={codeStrTestsFolder} />\n            <Paragraph>\n                This folder is reserved for unit tests. Keep test files\n                organized within this folder to ensure easy navigation and\n                maintenance.\n            </Paragraph>\n            <BannerInfo msg=\"This folder should always be located within the root of the folder that contains the code the unit tests are for.\" />\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructureTests;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport SectionFolderStructureSrc from './SectionFolderStructureSrc';\nimport SectionFolderStructureComponents from './SectionFolderStructureComponents';\nimport SectionFolderStructureHooks from './SectionFolderStructureHooks';\nimport SectionFolderStructureStyles from './SectionFolderStructureStyles';\nimport SectionFolderStructureConst from './SectionFolderStructureConst';\nimport SectionFolderStructureI18N from './SectionFolderStructureI18N';\nimport SectionFolderStructureMedia from './SectionFolderStructureMedia';\nimport SectionFolderStructurePages from './SectionFolderStructurePages';\nimport SectionFolderStructureServices from './SectionFolderStructureServices';\nimport SectionFolderStructureUtils from './SectionFolderStructureUtils';\nimport SectionFolderStructureTests from './SectionFolderStructureTests';\n\nconst SectionFolderStructure = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Folder Structure</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Establishing a clear and logical folder structure is crucial\n                    for maintaining a scalable and maintainable applications.\n                    Let&apos;s explore the purpose and recommended content for\n                    some key folders:\n                </Paragraph>\n            </StorySection>\n            <SectionFolderStructureSrc />\n            <SectionFolderStructureTests />\n            <SectionFolderStructureStyles />\n            <SectionFolderStructureComponents />\n            <SectionFolderStructurePages />\n            <SectionFolderStructureHooks />\n            <SectionFolderStructureConst />\n            <SectionFolderStructureI18N />\n            <SectionFolderStructureMedia />\n            <SectionFolderStructureServices />\n            <SectionFolderStructureUtils />\n        </StorySection>\n    );\n};\n\nexport default SectionFolderStructure;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionFileNamingCamelCase = () => (\n    <StorySection>\n        <SectionTitle headingLvl={3}>Camel Case</SectionTitle>\n        <StorySection>\n            <Paragraph>\n                <strong>Use camel case for &#58;</strong>\n            </Paragraph>\n            <OmniList>\n                <OmniListItem>\n                    Constant files\n                    <OmniList>\n                        <OmniListItem>\n                            Constant files should always end with the{' '}\n                            <CodeTag>Const</CodeTag> suffix. For example,{' '}\n                            <CodeTag>platformConst.js</CodeTag>\n                        </OmniListItem>\n                    </OmniList>\n                </OmniListItem>\n                <OmniListItem>\n                    Hook files\n                    <OmniList>\n                        <OmniListItem>\n                            Hook files should always have the{' '}\n                            <CodeTag>use</CodeTag> prefix. For example,{' '}\n                            <CodeTag>useWindowResize.js</CodeTag>\n                        </OmniListItem>\n                    </OmniList>\n                </OmniListItem>\n                <OmniListItem>\n                    Service files\n                    <OmniList>\n                        <OmniListItem>\n                            Service files should always have the{' '}\n                            <CodeTag>Service</CodeTag> suffix. For example,{' '}\n                            <CodeTag>appService.js</CodeTag>\n                        </OmniListItem>\n                    </OmniList>\n                </OmniListItem>\n                <OmniListItem>\n                    Utility files\n                    <OmniList>\n                        <OmniListItem>\n                            Utility files should always have the{' '}\n                            <CodeTag>Util</CodeTag> &#40;if only one util is\n                            provided&#41; or <CodeTag>Utils</CodeTag> &#40;if\n                            more than one util is provided&#41; suffix. For\n                            example,{' '}\n                            <CodeTag>signUpFormValidationUtils.js</CodeTag>\n                        </OmniListItem>\n                    </OmniList>\n                </OmniListItem>\n            </OmniList>\n        </StorySection>\n    </StorySection>\n);\n\nexport default SectionFileNamingCamelCase;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionFileNamingPascalCase = () => (\n    <StorySection>\n        <SectionTitle headingLvl={3}>Pascal Case</SectionTitle>\n        <StorySection>\n            <Paragraph>\n                <strong>Use pascal case for &#58;</strong>\n            </Paragraph>\n            <OmniList>\n                <OmniListItem>Files that represent Classes</OmniListItem>\n                <OmniListItem>\n                    React components\n                    <OmniList>\n                        <OmniListItem>\n                            <abbr title=\"Higher-Order Components\">HOCs</abbr>{' '}\n                            should also have the <CodeTag>Composer</CodeTag>{' '}\n                            suffix. For example,{' '}\n                            <CodeTag>IFLFormFieldComposer.jsx</CodeTag>\n                        </OmniListItem>\n                    </OmniList>\n                </OmniListItem>\n            </OmniList>\n        </StorySection>\n    </StorySection>\n);\n\nexport default SectionFileNamingPascalCase;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionFileNamingKebabCase = () => (\n    <StorySection>\n        <SectionTitle headingLvl={3}>Kebab Case</SectionTitle>\n        <StorySection>\n            <Paragraph>\n                <strong>Use kebab case for &#58;</strong>\n            </Paragraph>\n            <OmniList>\n                <OmniListItem>\n                    <abbr title=\"internationalization\">i18n</abbr> files\n                </OmniListItem>\n                <OmniListItem>Media files</OmniListItem>\n                <OmniListItem>SASS&#47;CSS files</OmniListItem>\n            </OmniList>\n        </StorySection>\n    </StorySection>\n);\n\nexport default SectionFileNamingKebabCase;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport SectionFileNamingCamelCase from './SectionFileNamingCamelCase';\nimport SectionFileNamingPascalCase from './SectionFileNamingPascalCase';\nimport SectionFileNamingKebabCase from './SectionFileNamingKebabCase';\n\nconst SectionFileNaming = () => {\n    return (\n        <StorySection>\n            <SectionTitle>File Naming</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Consistent and well-thought-out file naming conventions\n                    contribute to the maintainability and readability of your\n                    project. Choose the appropriate convention based on the type\n                    and purpose of the file. Below are guidelines for when to\n                    use Camel Case, Pascal Case, and Kebab Case.\n                </Paragraph>\n            </StorySection>\n            <SectionFileNamingCamelCase />\n            <SectionFileNamingPascalCase />\n            <SectionFileNamingKebabCase />\n        </StorySection>\n    );\n};\n\nexport default SectionFileNaming;\n","import { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionFurtherReading = () => (\n    <StorySection>\n        <SectionTitle>Further Reading</SectionTitle>\n        <StorySection>\n            <OmniList>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://en.wikipedia.org/wiki/Letter_case#Kebab_case\"\n                        shouldOpenInNewWindow\n                    >\n                        Kebab Case\n                    </Hyperlink>\n                </OmniListItem>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://en.wikipedia.org/wiki/Camel_case\"\n                        shouldOpenInNewWindow\n                    >\n                        Camel Case and Pascal Case &#40;\n                        <abbr title=\"Also Known As\">A.K.A.</abbr> Upper Camel\n                        Case&#41;\n                    </Hyperlink>\n                </OmniListItem>\n            </OmniList>\n        </StorySection>\n    </StorySection>\n);\n\nexport default SectionFurtherReading;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport SectionIntro from './sections/folders-and-files/SectionIntro';\nimport SectionFolderNaming from './sections/folders-and-files/SectionFolderNaming';\nimport SectionFolderStructure from './sections/folders-and-files/SectionFolderStructure';\nimport SectionFileNaming from './sections/folders-and-files/SectionFileNaming';\nimport SectionFurtherReading from './sections/folders-and-files/SectionFurtherReading';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\nimport { getDevelopersTitle } from '../../../utils/storiesConfigUtils';\n\nconst StoryFolderAndFileBestPractices = () => {\n    const baseCls = genSBBaseCls('folder-and-file-best-practices');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale(\n                'stories.developers.bestPractices.foldersAndFiles.title',\n            )}\n            subTitle={getDevelopersTitle(getLocale('titles.bestPracices'))}\n        >\n            <SectionIntro />\n            <SectionFolderNaming />\n            <SectionFolderStructure />\n            <SectionFileNaming />\n            <SectionFurtherReading />\n        </StoryLayout>\n    );\n};\n\nexport default StoryFolderAndFileBestPractices;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionIntro = () => {\n    return (\n        <StorySection>\n            <Paragraph>\n                Writing clean, maintainable, and efficient JavaScript code is\n                essential for creating robust and scalable applications. This\n                guide outlines recommended practices for variable naming,\n                function declarations, error handling, asynchronous operations,\n                DOM manipulation, and more. Whether you&apos;re a beginner or an\n                experienced developer, adopting these best practices will\n                contribute to code readability, maintainability, and overall\n                code quality. Let&apos;s dive into the key principles that will\n                help you write better JavaScript code.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionIntro;\n","import PropTypes from 'prop-types';\nimport { CodeBlock } from '@driponfleek/bankai-lib-storybook';\n\nconst CorrectIncorrectCodeExample = (props) => {\n    const { correctLabel, correctExample, incorrectLabel, incorrectExample } =\n        props;\n    const codeStr = `// ${correctLabel}\\n${correctExample}\\n\\n// ${incorrectLabel}\\n${incorrectExample}`;\n\n    return <CodeBlock codeString={codeStr} />;\n};\n\nCorrectIncorrectCodeExample.defaultProps = {\n    correctLabel: 'Correct',\n    incorrectLabel: 'Incorrect',\n};\n\nCorrectIncorrectCodeExample.propTypes = {\n    correctLabel: PropTypes.string,\n    correctExample: PropTypes.string,\n    incorrectExample: PropTypes.string,\n    incorrectLabel: PropTypes.string,\n};\n\nexport default CorrectIncorrectCodeExample;\n","// Naming Conventions - Variables\nexport const codeStrVariablesCorrectEx = `let myVariable = 10`;\nexport const codeStrVariablesIncorrectEx = `let my_variable = 10`;\n\n// Naming Conventions - Functions\nexport const codeStrFunctionsCorrectEx = `function calculateTotal(price, quality) {\n    ...\n}`;\nexport const codeStrFunctionsIncorrectEx = `function calculate_total(price, quality) {\n    ...\n}`;\n\n// Naming Conventions - Functions - Event Handlers\nexport const codeStrEvtHandlersCorrectEx = `function handleButtonClick() {\n    ...\n}`;\nexport const codeStrEvtHandlersIncorrectEx = `function buttonClickHandler() {\n    ...\n}`;\n\n// Naming Conventions - Functions - API Fetchers\nexport const codeStrAPIFetchCorrectEx = `function fetchUserData() {\n    ...\n}\n\nfunction fetchConfig() {\n    ...\n}`;\nexport const codeStrAPIFetchIncorrectEx = `function getUserData() {\n    ...\n}\n\nfunction getConfigFromBackend() {\n    ...\n}`;\n\n// Naming Conventions - Functions - Getter Functions\nexport const codeStrGetterFuncsCorrectEx = `function getValue() {\n    ...\n}`;\nexport const codeStrGetterFuncsIncorrectEx = `function retrieveValue() {\n    ...\n}`;\n\n// Naming Conventions - Constants\nexport const codeStrConstCorrectEx = `const MAX_VALUE = 100;`;\nexport const codeStrConstIncorrectEx = `const maxValue = 100;`;\n\n// Naming Conventions - Classes\nexport const codeStrClassCorrectEx = `class Car {\n    ...\n}`;\nexport const codeStrClassIncorrectEx = `class car {\n    ...\n}`;\n\n// Naming Conventions - Booleans\nexport const codeStrBoolCorrectEx = `const isAvailable = true;`;\nexport const codeStrBoolIncorrectEx = `const available = true;`;\n\n// Naming Conventions - Acronyms and Abbreviations\nexport const codeStrAcrAbbrCorrectEx = `let htmlElement = '';\nlet xmlHttpRequest = '';\nlet pdfGenerator = '';`;\nexport const codeStrAcrAbbrIncorrectEx = `let HTMLElement = '';\nlet XMLHTTPRequest = '';\nlet PDF_Generator = '';`;\n\n// Naming Conventions - No using underscore prefix\nexport const codeStrNoUnderscoresCorrectEx = `function createCounter() {\n    let count = 0;\n  \n    return {\n      increment: function() {\n        count++;\n      },\n      getCount: function() {\n        return count;\n      },\n    };\n  }`;\n\nexport const codeStrNoUnderscoresIncorrectEx = `let _privateVariable = '';\nfunction _privateFunction() {}`;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\nimport CorrectIncorrectCodeExample from '../../components/CorrectIncorrectCodeExample';\nimport {\n    codeStrBoolCorrectEx,\n    codeStrBoolIncorrectEx,\n} from '../../code-strings/codeStrJSBestPractice';\n\n// TODO: Add link to lint documentation providing the full list of bool prefixes.\nconst SectionNamingConventionsBools = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={4}>Booleans</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Prefix booleans with words like <CodeTag>is</CodeTag>,{' '}\n                    <CodeTag>has</CodeTag>, <CodeTag>can</CodeTag>, etc., to\n                    convey their purpose.\n                </Paragraph>\n                <CorrectIncorrectCodeExample\n                    correctExample={codeStrBoolCorrectEx}\n                    incorrectExample={codeStrBoolIncorrectEx}\n                />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventionsBools;\n","import { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport SectionNamingConventionsBools from './SectionNamingConventionsBools';\nimport CorrectIncorrectCodeExample from '../../components/CorrectIncorrectCodeExample';\nimport {\n    codeStrVariablesCorrectEx,\n    codeStrVariablesIncorrectEx,\n} from '../../code-strings/codeStrJSBestPractice';\n\nconst SectionNamingConventionsVariables = () => {\n    return (\n        <>\n            <StorySection>\n                <SectionTitle headingLvl={3}>Variables</SectionTitle>\n                <StorySection>\n                    <OmniList>\n                        <OmniListItem>\n                            Use <strong>camel case</strong> for variable names.\n                        </OmniListItem>\n                        <OmniListItem>\n                            Choose meaningful and descriptive names that convey\n                            the purpose of the variable.\n                        </OmniListItem>\n                    </OmniList>\n                    <CorrectIncorrectCodeExample\n                        correctExample={codeStrVariablesCorrectEx}\n                        incorrectExample={codeStrVariablesIncorrectEx}\n                    />\n                </StorySection>\n            </StorySection>\n            <SectionNamingConventionsBools />\n        </>\n    );\n};\n\nexport default SectionNamingConventionsVariables;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\nimport CorrectIncorrectCodeExample from '../../components/CorrectIncorrectCodeExample';\nimport {\n    codeStrEvtHandlersCorrectEx,\n    codeStrEvtHandlersIncorrectEx,\n} from '../../code-strings/codeStrJSBestPractice';\n\nconst SectionNamingConventionsEventHandlers = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={4}>Event Handlers</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Prefix event handlers with <CodeTag>handle</CodeTag> to\n                    convey their purpose is to handle an event.\n                </Paragraph>\n                <CorrectIncorrectCodeExample\n                    correctExample={codeStrEvtHandlersCorrectEx}\n                    incorrectExample={codeStrEvtHandlersIncorrectEx}\n                />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventionsEventHandlers;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\nimport CorrectIncorrectCodeExample from '../../components/CorrectIncorrectCodeExample';\nimport {\n    codeStrAPIFetchCorrectEx,\n    codeStrAPIFetchIncorrectEx,\n} from '../../code-strings/codeStrJSBestPractice';\n\nconst SectionNamingConventionsAPIFetching = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={4}>\n                <abbr title=\"Application Programming Interface\">API</abbr>{' '}\n                Fetching\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Prefix functions that retrieve data, configurations, etc.,\n                    from a backend service with <CodeTag>fetch</CodeTag>.\n                </Paragraph>\n                <CorrectIncorrectCodeExample\n                    correctExample={codeStrAPIFetchCorrectEx}\n                    incorrectExample={codeStrAPIFetchIncorrectEx}\n                />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventionsAPIFetching;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\nimport CorrectIncorrectCodeExample from '../../components/CorrectIncorrectCodeExample';\nimport {\n    codeStrGetterFuncsCorrectEx,\n    codeStrGetterFuncsIncorrectEx,\n} from '../../code-strings/codeStrJSBestPractice';\n\nconst SectionNamingConventionsGetterFunctions = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={4}>Value Retrieval</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Prefix functions that serve the purpose of getting a value,\n                    local data, etc., with <CodeTag>get</CodeTag>.\n                </Paragraph>\n                <CorrectIncorrectCodeExample\n                    correctExample={codeStrGetterFuncsCorrectEx}\n                    incorrectExample={codeStrGetterFuncsIncorrectEx}\n                />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventionsGetterFunctions;\n","import { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport SectionNamingConventionsEventHandlers from './SectionNamingConventionsEventHandlers';\nimport SectionNamingConventionsAPIFetching from './SectionNamingConventionsAPIFetching';\nimport SectionNamingConventionsGetterFunctions from './SectionNamingConventionsGetterFunctions';\nimport CorrectIncorrectCodeExample from '../../components/CorrectIncorrectCodeExample';\nimport {\n    codeStrFunctionsCorrectEx,\n    codeStrFunctionsIncorrectEx,\n} from '../../code-strings/codeStrJSBestPractice';\n\nconst SectionNamingConventionsFuncs = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>Functions</SectionTitle>\n            <StorySection>\n                <OmniList>\n                    <OmniListItem>\n                        Use <strong>camel case</strong> for function names.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Make sure that function names clearly indicate their\n                        action or purpose.\n                    </OmniListItem>\n                </OmniList>\n                <CorrectIncorrectCodeExample\n                    correctExample={codeStrFunctionsCorrectEx}\n                    incorrectExample={codeStrFunctionsIncorrectEx}\n                />\n            </StorySection>\n            <SectionNamingConventionsEventHandlers />\n            <SectionNamingConventionsAPIFetching />\n            <SectionNamingConventionsGetterFunctions />\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventionsFuncs;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport CorrectIncorrectCodeExample from '../../components/CorrectIncorrectCodeExample';\nimport {\n    codeStrConstCorrectEx,\n    codeStrConstIncorrectEx,\n} from '../../code-strings/codeStrJSBestPractice';\n\nconst SectionNamingConventionsConts = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>Constants</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Constants represent values that should not be modified\n                    during the execution of the program.\n                </Paragraph>\n                <OmniList>\n                    <OmniListItem>\n                        Use <strong>screaming snake case</strong>{' '}\n                        &#40;all-uppercase letters with underscores between\n                        words&#41; for constants.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Choose meaningful and descriptive names that convey the\n                        purpose of the constant.\n                    </OmniListItem>\n                </OmniList>\n                <CorrectIncorrectCodeExample\n                    correctExample={codeStrConstCorrectEx}\n                    incorrectExample={codeStrConstIncorrectEx}\n                />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventionsConts;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport CorrectIncorrectCodeExample from '../../components/CorrectIncorrectCodeExample';\nimport {\n    codeStrClassCorrectEx,\n    codeStrClassIncorrectEx,\n} from '../../code-strings/codeStrJSBestPractice';\n\nconst SectionNamingConventionsClasses = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>Classes</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    Classes encapsulate related functionality.\n                </Paragraph>\n                <OmniList>\n                    <OmniListItem>\n                        Use <strong>pascal case</strong> for class names.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Classes should have clear, concise names.\n                    </OmniListItem>\n                </OmniList>\n                <CorrectIncorrectCodeExample\n                    correctExample={codeStrClassCorrectEx}\n                    incorrectExample={codeStrClassIncorrectEx}\n                />\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventionsClasses;\n","import {\n    Paragraph,\n    OmniList,\n    OmniListItem,\n} from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport CorrectIncorrectCodeExample from '../../components/CorrectIncorrectCodeExample';\nimport {\n    codeStrAcrAbbrCorrectEx,\n    codeStrAcrAbbrIncorrectEx,\n    codeStrNoUnderscoresCorrectEx,\n    codeStrNoUnderscoresIncorrectEx,\n} from '../../code-strings/codeStrJSBestPractice';\n\nconst SectionNamingConventionsAdditionalConsiderations = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                Additional Naming Convention Considerations\n            </SectionTitle>\n            <StorySection>\n                <StorySection>\n                    <SectionTitle headingLvl={4}>\n                        Handling Abbreviations and Acronyms in Names\n                    </SectionTitle>\n                    <StorySection>\n                        <OmniList>\n                            <OmniListItem>\n                                When dealing with Abbreviations and Acronyms,\n                                maintain consistent casing for each letter in\n                                them.\n                            </OmniListItem>\n                            <OmniListItem>\n                                For camel case, pascal case, or kebab case,\n                                treat each letter in the\n                                acronym&#47;abbreviation as you would any other\n                                letter in the naming convention.\n                            </OmniListItem>\n                        </OmniList>\n                        <CorrectIncorrectCodeExample\n                            correctExample={codeStrAcrAbbrCorrectEx}\n                            incorrectExample={codeStrAcrAbbrIncorrectEx}\n                        />\n                    </StorySection>\n                </StorySection>\n            </StorySection>\n            <StorySection>\n                <StorySection>\n                    <SectionTitle headingLvl={4}>\n                        Don&apos;t Prefix Names with Underscores\n                    </SectionTitle>\n                    <StorySection>\n                        <Paragraph>\n                            Avoid using underscores (_) in variable, function,\n                            or constant names. While it&apos;s a common practice\n                            in some languages to indicate private or internal\n                            members, JavaScript doesn&apos;t provide true\n                            privacy through naming conventions. The use of\n                            underscores can lead to confusion and may not\n                            provide the expected privacy.\n                        </Paragraph>\n                        <CorrectIncorrectCodeExample\n                            correctLabel=\"Consider other patterns for encapsulation\"\n                            correctExample={codeStrNoUnderscoresCorrectEx}\n                            incorrectLabel=\"Avoid underscores in names\"\n                            incorrectExample={codeStrNoUnderscoresIncorrectEx}\n                        />\n                    </StorySection>\n                </StorySection>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventionsAdditionalConsiderations;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport SectionNamingConventionsVariables from './SectionNamingConventionsVariables';\nimport SectionNamingConventionsFuncs from './SectionNamingConventionsFuncs';\nimport SectionNamingConventionsConts from './SectionNamingConventionsConts';\nimport SectionNamingConventionsClasses from './SectionNamingConventionsClasses';\nimport SectionNamingConventionsAdditionalConsiderations from './SectionNamingConventionsAdditionalConsiderations';\n\nconst SectionNamingConventions = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Naming Conventions</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    When it comes to writing clean and maintainable JavaScript\n                    code, adopting descriptive and consistent naming conventions\n                    is crucial. Prioritize clarity over brevity, choosing names\n                    that clearly express the purpose and functionality of your\n                    identifiers.\n                </Paragraph>\n            </StorySection>\n            <SectionNamingConventionsVariables />\n            <SectionNamingConventionsFuncs />\n            <SectionNamingConventionsConts />\n            <SectionNamingConventionsClasses />\n            <SectionNamingConventionsAdditionalConsiderations />\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventions;\n","import { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionVariableDeclaration = () => {\n    return (\n        <StorySection>\n            <SectionTitle>\n                Variable Declaration - Prefer &quot;const&quot; and{' '}\n                &quot;let&quot; Over &quot;var&quot;\n            </SectionTitle>\n            <OmniList>\n                <OmniListItem>\n                    Use <CodeTag>const</CodeTag> for variables that don&apos;t\n                    change their value.\n                </OmniListItem>\n                <OmniListItem>\n                    Use <CodeTag>let</CodeTag> for variables that need to be\n                    reassigned values.\n                </OmniListItem>\n                <OmniListItem>\n                    Avoid using <CodeTag>var</CodeTag> due to its\n                    function-scoping behavior and{' '}\n                    <Hyperlink\n                        href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#hoisting\"\n                        shouldOpenInNewWindow\n                    >\n                        potential issues with hoisting\n                    </Hyperlink>\n                    .\n                </OmniListItem>\n            </OmniList>\n        </StorySection>\n    );\n};\n\nexport default SectionVariableDeclaration;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionNoNull = () => {\n    const emptyObj = '{}';\n    const emptyArr = '[]';\n\n    return (\n        <StorySection>\n            <SectionTitle>Avoid the Use of &quot;null&quot;</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    In modern JavaScript development, it&apos;s generally\n                    recommended to steer clear of using <CodeTag>null</CodeTag>{' '}\n                    whenever possible. While <CodeTag>null</CodeTag> is a valid\n                    value, its usage can introduce potential pitfalls and\n                    unintended consequences. Instead, consider using{' '}\n                    <CodeTag>undefined</CodeTag> to explicitly indicate a\n                    missing or undefined value in your code.\n                </Paragraph>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    Alternative Representations\n                </SectionTitle>\n                <Paragraph>\n                    Instead of <CodeTag>null</CodeTag>, consider using empty\n                    objects &#40;\n                    {emptyObj}\n                    &#41; or empty arrays &#40;{emptyArr}&#41; to represent\n                    missing or empty values. This aligns with the preference for\n                    object-oriented representations and reduces the ambiguity\n                    associated with <CodeTag>null</CodeTag>.\n                </Paragraph>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionNoNull;\n","import { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionFurtherReading = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Further Reading</SectionTitle>\n            <OmniList>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://eslint.org/docs/latest/rules/no-var\"\n                        shouldOpenInNewWindow\n                    >\n                        ESLint no-var\n                    </Hyperlink>\n                </OmniListItem>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://github.com/getify/You-Dont-Know-JS\"\n                        shouldOpenInNewWindow\n                    >\n                        You Don&apos;t Know JavaScript\n                    </Hyperlink>\n                </OmniListItem>\n            </OmniList>\n        </StorySection>\n    );\n};\n\nexport default SectionFurtherReading;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport SectionIntro from './sections/js/SectionIntro';\nimport SectionNamingConventions from './sections/js/SectionNamingConventions';\nimport SectionVariableDeclaration from './sections/js/SectionVariableDeclaration';\nimport SectionNoNull from './sections/js/SectionNoNull';\nimport SectionFurtherReading from './sections/js/SectionFurtherReading';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\nimport { getDevelopersTitle } from '../../../utils/storiesConfigUtils';\n\nconst StoryJSBestPractices = () => {\n    const baseCls = genSBBaseCls('js-best-practices');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale('stories.developers.bestPractices.js.title')}\n            subTitle={getDevelopersTitle(getLocale('titles.bestPracices'))}\n        >\n            <SectionIntro />\n            <SectionVariableDeclaration />\n            <SectionNoNull />\n            <SectionNamingConventions />\n            <SectionFurtherReading />\n        </StoryLayout>\n    );\n};\n\nexport default StoryJSBestPractices;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionIntro = () => {\n    return (\n        <StorySection>\n            <Paragraph>\n                Writing React applications efficiently and maintaining a clean,\n                organized codebase is essential for a successful project. This\n                guide outlines best practices for React development, covering\n                various aspects such as component naming, functional component\n                practices, and more.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionIntro;\n","import { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionNamingConventions = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Component Naming Conventions</SectionTitle>\n            <OmniList>\n                <OmniListItem>\n                    Component names should use <strong>pascal case</strong>{' '}\n                    convention.\n                </OmniListItem>\n                <OmniListItem>\n                    Choose descriptive names for your components. A well-named\n                    component makes the code more readable and helps other\n                    developers understand its purpose.\n                </OmniListItem>\n                <OmniListItem>\n                    When creating Higher-Order Components, consider using the{' '}\n                    <CodeTag>Composer</CodeTag> suffix to indicate their\n                    purpose.\n                </OmniListItem>\n                <OmniListItem>\n                    Component file names should match the name of the component\n                    they export.\n                </OmniListItem>\n            </OmniList>\n        </StorySection>\n    );\n};\n\nexport default SectionNamingConventions;\n","import { LinkButton } from '@driponfleek/bankai-ui-buttons';\nimport { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\nimport { linkTo } from '@storybook/addon-links';\n\nconst SectionProps = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Props</SectionTitle>\n            <StorySection>\n                <OmniList>\n                    <OmniListItem>\n                        Include a <CodeTag>contextCls</CodeTag> prop in every\n                        component to allow assigning CSS classes based on the\n                        component&apos;s context. This prop provides the\n                        flexibility to adjust styles for a component in\n                        different contexts, ensuring a consistent yet adaptable\n                        visual presentation.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Group props of similar data types together in the\n                        defaultProps&#47;propTypes lists and sort them\n                        alphabetically within each group. Organizing props by\n                        type streamlines the development process, making it\n                        easier to locate specific prop types and maintain\n                        consistency across components.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Place props that are functions &#40;e.g., event\n                        handlers, render props&#41; at the end of the\n                        defaultProps&#47;propTypes list. This ordering aligns\n                        with the component&apos;s behavior.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Provide default prop values for event handler props to\n                        prevent potential crashes when calling the handler if a\n                        developer forgets to provide a value for it.\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={3}>\n                    Prop Naming Conventions\n                </SectionTitle>\n                <OmniList>\n                    <OmniListItem>\n                        Event handler props should always be prefixed with{' '}\n                        <CodeTag>on</CodeTag>, such as{' '}\n                        <CodeTag>onClick</CodeTag>, <CodeTag>onChange</CodeTag>.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Render props should always start with the{' '}\n                        <CodeTag>render</CodeTag> prefix, for example,{' '}\n                        <CodeTag>renderContent</CodeTag>,{' '}\n                        <CodeTag>renderItem</CodeTag>.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Boolean props should follow the same naming convention\n                        established for booleans in the{' '}\n                        <LinkButton\n                            text=\"JavaScript Best Practices page\"\n                            onClick={linkTo(\n                                'Developers/Best Practices',\n                                'JavaScript Best Practices',\n                            )}\n                        />\n                        .\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionProps;\n","import { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionComponents = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Component Structure</SectionTitle>\n            <StorySection>\n                <OmniList>\n                    <OmniListItem>\n                        Keep it simple by having only one React component per\n                        file. This ensures a clear and focused file structure.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Prefer using functional components over class-based\n                        components for their concise syntax and support for\n                        React Hooks.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Leverage SOLID principles in functional components&#58;\n                        <OmniList>\n                            <OmniListItem>\n                                <strong>\n                                    Single Responsibility Principle &#40;\n                                    <abbr title=\"Single Responsibility Principle\">\n                                        SRP\n                                    </abbr>\n                                    &#41;\n                                </strong>{' '}\n                                - Aim for each functional component to have a\n                                single responsibility. For example, a user card\n                                component should only be responsible for\n                                rendering user information.\n                            </OmniListItem>\n                            <OmniListItem>\n                                <strong>\n                                    Open&#47;Closed Principle &#40;\n                                    <abbr title=\"Open/Closed Principle\">\n                                        OCP\n                                    </abbr>\n                                    &#41;\n                                </strong>{' '}\n                                - Design components to be open for extension but\n                                closed for modification. In React, this often\n                                involves creating reusable components that can\n                                be extended or composed without modifying their\n                                source code.\n                            </OmniListItem>\n                            <OmniListItem>\n                                <strong>\n                                    Liskov Substitution Principle &#40;\n                                    <abbr title=\"Liskov Substitution Principle\">\n                                        LSP\n                                    </abbr>\n                                    &#41;\n                                </strong>{' '}\n                                - Ensure that components can be substituted with\n                                instances of their subtypes without altering the\n                                correctness of the program. This is crucial for\n                                maintaining consistency when working with\n                                component hierarchies.\n                            </OmniListItem>\n                            <OmniListItem>\n                                <strong>\n                                    Interface Segregation Principle &#40;\n                                    <abbr title=\"Interface Segregation Principle\">\n                                        ISP\n                                    </abbr>\n                                    &#41;\n                                </strong>{' '}\n                                - Avoid having components forced to implement\n                                interfaces they do not use. This principle\n                                encourages creating smaller, specific interfaces\n                                that are implemented only by components that\n                                need them.\n                            </OmniListItem>\n                            <OmniListItem>\n                                <strong>\n                                    Dependency Inversion Principle &#40;\n                                    <abbr title=\"Dependency Inversion Principle\">\n                                        DIP\n                                    </abbr>\n                                    &#41;\n                                </strong>{' '}\n                                - Depend on abstractions, not concretions. In\n                                React, this might involve using dependency\n                                injection to pass dependencies into components,\n                                allowing for greater flexibility.\n                            </OmniListItem>\n                        </OmniList>\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionComponents;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionReactHooksAvoidUseEffect = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                Avoid Unnecessary &quot;useEffect&quot;\n            </SectionTitle>\n            <Paragraph>\n                Be mindful of using the <CodeTag>useEffect</CodeTag> hook\n                unnecessarily. In functional components, only use{' '}\n                <CodeTag>useEffect</CodeTag> when dealing with side effects like\n                data fetching, subscriptions, or manually changing the DOM.\n            </Paragraph>\n        </StorySection>\n    );\n};\n\nexport default SectionReactHooksAvoidUseEffect;\n","import {\n    OmniList,\n    OmniListItem,\n    Paragraph,\n} from '@driponfleek/bankai-ui-typography';\nimport {\n    CodeTag,\n    SectionTitle,\n    StorySection,\n} from '@driponfleek/bankai-lib-storybook';\n\nconst SectionReactHooksUseStateVsUseReducer = () => {\n    return (\n        <StorySection>\n            <SectionTitle headingLvl={3}>\n                &quot;useState&quot; <abbr title=\"versus\">vs.</abbr>{' '}\n                &quot;useReducer&quot;\n            </SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    When working with React, managing component state is a\n                    fundamental aspect of building dynamic user interfaces.\n                    React provides two primary hooks,{' '}\n                    <CodeTag>useState</CodeTag> and{' '}\n                    <CodeTag>useReducer</CodeTag>, for handling state in\n                    functional components. Understanding when to use each hook\n                    is crucial for effective state management and is key to\n                    writing clean, maintainable React components.\n                </Paragraph>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={4}>\n                    When to Use &quot;useState&quot;\n                </SectionTitle>\n                <OmniList>\n                    <OmniListItem>\n                        Ideal for managing simple state variables.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Suitable for components with small state requirements.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Suitable for independent pieces of state or when\n                        updating one state variable doesn&apos;t affect others.\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n            <StorySection>\n                <SectionTitle headingLvl={4}>\n                    When to Use &quot;useReducer&quot;\n                </SectionTitle>\n                <OmniList>\n                    <OmniListItem>\n                        Beneficial when managing more complex state logic that\n                        involves multiple values and intricate state\n                        transitions.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Best suited for components that require more advanced\n                        state management.\n                    </OmniListItem>\n                    <OmniListItem>\n                        Suitable for independent pieces of state or when\n                        updating one state variable doesn&apos;t affect others.\n                    </OmniListItem>\n                </OmniList>\n            </StorySection>\n        </StorySection>\n    );\n};\n\nexport default SectionReactHooksUseStateVsUseReducer;\n","import { Paragraph } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\nimport SectionReactHooksAvoidUseEffect from './SectionReactHooksAvoidUseEffect';\nimport SectionComponentsUseStateVsUseReducer from './SectionReactHooksUseStateVsUseReducer';\n\nconst SectionReactHooks = () => {\n    return (\n        <StorySection>\n            <SectionTitle>React Hooks</SectionTitle>\n            <StorySection>\n                <Paragraph>\n                    React hooks provide a powerful way to manage state and side\n                    effects in functional components. Adhering to best practices\n                    when using hooks ensures clean, maintainable, and efficient\n                    code. Here are some recommendations&#58;\n                </Paragraph>\n            </StorySection>\n            <SectionReactHooksAvoidUseEffect />\n            <SectionComponentsUseStateVsUseReducer />\n        </StorySection>\n    );\n};\n\nexport default SectionReactHooks;\n","import { Hyperlink } from '@driponfleek/bankai-ui-navigation';\nimport { OmniList, OmniListItem } from '@driponfleek/bankai-ui-typography';\nimport { SectionTitle, StorySection } from '@driponfleek/bankai-lib-storybook';\n\nconst SectionFurtherReading = () => {\n    return (\n        <StorySection>\n            <SectionTitle>Further Reading</SectionTitle>\n            <OmniList>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://react.dev/blog/2023/03/16/introducing-react-dev\"\n                        shouldOpenInNewWindow\n                    >\n                        React\n                    </Hyperlink>\n                </OmniListItem>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://react.dev/reference/react/hooks\"\n                        shouldOpenInNewWindow\n                    >\n                        React Hooks\n                    </Hyperlink>\n                </OmniListItem>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://www.linkedin.com/pulse/master-solid-principles-react-functional-components-ankush-tagore\"\n                        shouldOpenInNewWindow\n                    >\n                        Master SOLID Principles in React Functional Components\n                    </Hyperlink>\n                </OmniListItem>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://blog.logrocket.com/useeffect-react-hook-complete-guide/\"\n                        shouldOpenInNewWindow\n                    >\n                        A Complete Guide to the useEffect React Hook\n                    </Hyperlink>\n                </OmniListItem>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://overreacted.io/a-complete-guide-to-useeffect/\"\n                        shouldOpenInNewWindow\n                    >\n                        A Complete Guide to useEffect\n                    </Hyperlink>\n                </OmniListItem>\n                <OmniListItem>\n                    <Hyperlink\n                        href=\"https://medium.com/@navneetsingh_95791/react-usestate-vs-usereducer-choosing-the-right-state-management-hook-de3568a778b3\"\n                        shouldOpenInNewWindow\n                    >\n                        React useState vs. useReducer: Choosing the Right State\n                        Management Hook\n                    </Hyperlink>\n                </OmniListItem>\n            </OmniList>\n        </StorySection>\n    );\n};\n\nexport default SectionFurtherReading;\n","import { genSBBaseCls } from '@driponfleek/bankai-lib-storybook';\nimport SectionIntro from './sections/react/SectionIntro';\nimport SectionNamingConventions from './sections/react/SectionNamingConventions';\nimport SectionProps from './sections/react/SectionProps';\nimport SectionComponents from './sections/react/SectionComponents';\nimport SectionReactHooks from './sections/react/SectionReactHooks';\nimport SectionFurtherReading from './sections/react/SectionFurtherReading';\nimport StoryLayout from '../../../sb-components/layout/StoryLayout';\n\n// Utils\nimport { getLocale } from '../../../utils/localeUtils';\nimport { getDevelopersTitle } from '../../../utils/storiesConfigUtils';\n\nconst StoryReactBestPractices = () => {\n    const baseCls = genSBBaseCls('react-best-practices');\n\n    return (\n        <StoryLayout\n            contextCls={baseCls}\n            title={getLocale('stories.developers.bestPractices.react.title')}\n            subTitle={getDevelopersTitle(getLocale('titles.bestPracices'))}\n        >\n            <SectionIntro />\n            <SectionNamingConventions />\n            <SectionComponents />\n            <SectionProps />\n            <SectionReactHooks />\n            <SectionFurtherReading />\n        </StoryLayout>\n    );\n};\n\nexport default StoryReactBestPractices;\n"],"names":["SectionIntro","jsx","StorySection","Paragraph","blockCls","nameSpace","codeStrBEMExample","codeStrBEMWithNameSapce","codeStrContextClsExample","SectionClassNamingConventions","SectionTitle","jsxs","Hyperlink","OmniList","OmniListItem","CodeTag","CodeBlock","SectionContextClasses","getLocale","SectionDosAndDontDos","doList","Fragment","doNotDoList","DoAndDoNotDo","SectionFurtherReading","SectionModifierClasses","bannerMsg","BannerInfo","SectionREMVsPX","StoryCSSBestPractices","baseCls","genSBBaseCls","StoryLayout","getDevelopersTitle","SectionFolderNaming","FolderStructureHeading","props","contextCls","children","rest","cx","BankaiFolderOpen","PropTypes","codeStrComponentsFolder","codeStrConstFolder","codeStrHooksFolder","codeStrI18NFolder","codeStrMedia","codeStrPagesFolder","codeStrServicesFolder","codeStrSrcFolder","codeStrUtilsFolder","codeStrTestsFolder","codeStrStylesFolder","SectionFolderStructureSrc","SectionFolderStructureComponents","SectionFolderStructureHooks","SectionFolderStructureStyles","SectionFolderStructureConst","SectionFolderStructureI18N","SectionFolderStructureMedia","SectionFolderStructurePages","BannerDanger","SectionFolderStructureServices","SectionFolderStructureUtils","SectionFolderStructureTests","SectionFolderStructure","SectionFileNamingCamelCase","SectionFileNamingPascalCase","SectionFileNamingKebabCase","SectionFileNaming","StoryFolderAndFileBestPractices","CorrectIncorrectCodeExample","correctLabel","correctExample","incorrectLabel","incorrectExample","codeStr","codeStrVariablesCorrectEx","codeStrVariablesIncorrectEx","codeStrFunctionsCorrectEx","codeStrFunctionsIncorrectEx","codeStrEvtHandlersCorrectEx","codeStrEvtHandlersIncorrectEx","codeStrAPIFetchCorrectEx","codeStrAPIFetchIncorrectEx","codeStrGetterFuncsCorrectEx","codeStrGetterFuncsIncorrectEx","codeStrConstCorrectEx","codeStrConstIncorrectEx","codeStrClassCorrectEx","codeStrClassIncorrectEx","codeStrBoolCorrectEx","codeStrBoolIncorrectEx","codeStrAcrAbbrCorrectEx","codeStrAcrAbbrIncorrectEx","codeStrNoUnderscoresCorrectEx","codeStrNoUnderscoresIncorrectEx","SectionNamingConventionsBools","SectionNamingConventionsVariables","SectionNamingConventionsEventHandlers","SectionNamingConventionsAPIFetching","SectionNamingConventionsGetterFunctions","SectionNamingConventionsFuncs","SectionNamingConventionsConts","SectionNamingConventionsClasses","SectionNamingConventionsAdditionalConsiderations","SectionNamingConventions","SectionVariableDeclaration","SectionNoNull","StoryJSBestPractices","SectionProps","LinkButton","linkTo","SectionComponents","SectionReactHooksAvoidUseEffect","SectionReactHooksUseStateVsUseReducer","SectionReactHooks","SectionComponentsUseStateVsUseReducer","StoryReactBestPractices"],"mappings":"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"}