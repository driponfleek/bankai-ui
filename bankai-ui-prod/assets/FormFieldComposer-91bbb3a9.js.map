{"version":3,"file":"FormFieldComposer-91bbb3a9.js","sources":["../../../components/form-elements/src/components/form-field-composer/FFCControlHintContainer.jsx","../../../components/form-elements/src/components/form-field-composer/FFCInlineLeft.jsx","../../../components/form-elements/src/components/form-field-composer/FFCInlineRight.jsx","../../../components/form-elements/src/components/form-field-composer/FFCStacked.jsx","../../../components/form-elements/src/components/FFCLabel.jsx","../../../components/form-elements/src/components/FFCHints.jsx","../../../components/form-elements/src/components/FFCStackedHintTop.jsx","../../../components/form-elements/src/utils/formFieldComposerRendererUtil.js","../../../components/form-elements/src/FormFieldComposer.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst FFCControlHintContainer = (props) => {\n    const { baseCls, children } = props;\n\n    return (\n        <div className={`${baseCls}__control-hint-container`}>{children}</div>\n    );\n};\n\nFFCControlHintContainer.propTypes = {\n    baseCls: PropTypes.string,\n};\n\nexport default FFCControlHintContainer;\n","import PropTypes from 'prop-types';\nimport FFCControlHintContainer from './FFCControlHintContainer';\nimport FFCLabel from './FFCLabel';\nimport FFCHints from './FFCHints';\n\nconst FFCInlineLeft = (props) => {\n    const { baseCls, hasLabel, shouldRenderHints, children, ...rest } = props;\n\n    return (\n        <>\n            <FFCControlHintContainer baseCls={baseCls}>\n                {hasLabel && <FFCLabel {...rest} baseCls={baseCls} />}\n                {shouldRenderHints && <FFCHints {...rest} baseCls={baseCls} />}\n            </FFCControlHintContainer>\n            {children}\n        </>\n    );\n};\n\nFFCInlineLeft.propTypes = {\n    baseCls: PropTypes.string,\n    hasLabel: PropTypes.bool,\n    shouldRenderHints: PropTypes.bool,\n};\n\nexport default FFCInlineLeft;\n","import PropTypes from 'prop-types';\nimport FFCControlHintContainer from './FFCControlHintContainer';\nimport FFCLabel from './FFCLabel';\nimport FFCHints from './FFCHints';\n\nconst FFCInlineRight = (props) => {\n    const { baseCls, hasLabel, shouldRenderHints, children, ...rest } = props;\n\n    return (\n        <>\n            {children}\n            <FFCControlHintContainer baseCls={baseCls}>\n                {hasLabel && <FFCLabel {...rest} baseCls={baseCls} />}\n                {shouldRenderHints && <FFCHints {...rest} baseCls={baseCls} />}\n            </FFCControlHintContainer>\n        </>\n    );\n};\n\nFFCInlineRight.propTypes = {\n    baseCls: PropTypes.string,\n    hasLabel: PropTypes.bool,\n    shouldRenderHints: PropTypes.bool,\n};\n\nexport default FFCInlineRight;\n","import PropTypes from 'prop-types';\nimport FFCLabel from './FFCLabel';\nimport FFCHints from './FFCHints';\n\nconst FFCStacked = (props) => {\n    const { baseCls, hasLabel, shouldRenderHints, children, ...rest } = props;\n\n    return (\n        <>\n            {hasLabel && <FFCLabel {...rest} baseCls={baseCls} />}\n            {children}\n            {shouldRenderHints && <FFCHints {...rest} baseCls={baseCls} />}\n        </>\n    );\n};\n\nFFCStacked.propTypes = {\n    baseCls: PropTypes.string,\n    hasLabel: PropTypes.bool,\n    shouldRenderHints: PropTypes.bool,\n};\n\nexport default FFCStacked;\n","import PropTypes from 'prop-types';\nimport FormLabel from '../FormLabel';\n\n// Utils\nimport { getFFCLabelExtantProps } from '../utils/formFieldComposerUtils';\n\nconst FFCLabel = (props) => {\n    const { baseCls, ...rest } = props;\n    const labelProps = getFFCLabelExtantProps(rest);\n\n    return (\n        <div className={`${baseCls}__label-container`}>\n            <div className={`${baseCls}__label-container-inner`}>\n                <FormLabel {...labelProps} />\n            </div>\n        </div>\n    );\n};\n\nFFCLabel.propTypes = {\n    baseCls: PropTypes.string,\n};\n\nexport default FFCLabel;\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport InlineFormHint from '../InlineFormHint';\nimport InlineFormError from '../InlineFormError';\n\nimport { getHasError, getFFCHasHint } from '../utils/formFieldComposerUtils';\n\nconst FFCHints = (props) => {\n    const {\n        baseCls,\n        errorId,\n        shouldIncludeError,\n        shouldIncludeHint,\n        errorProps,\n        hintProps,\n    } = props;\n    const isDisplayingHint = getFFCHasHint(props) || getHasError(props);\n    const hintBaseCls = `${baseCls}__hints-container`;\n    const modCls = {\n        [`${hintBaseCls}--is-displaying-hint`]: isDisplayingHint,\n    };\n    const { children: hintChildren, ...hintPropsRest } = hintProps ?? {};\n    const { children: errorChildren } = errorProps ?? {};\n    const inlineHintProps = {\n        ...hintPropsRest,\n        ...(!errorChildren && {\n            ...(hintChildren && { children: hintChildren }),\n        }),\n    };\n\n    return (\n        <div className={cx(hintBaseCls, modCls)}>\n            {shouldIncludeError && (\n                <InlineFormError {...errorProps} id={errorId} />\n            )}\n            {shouldIncludeHint && <InlineFormHint {...inlineHintProps} />}\n        </div>\n    );\n};\n\nFFCHints.defaultProps = {\n    shouldIncludeError: false,\n    shouldIncludeHint: false,\n};\n\nFFCHints.propTypes = {\n    baseCls: PropTypes.string,\n    errorId: PropTypes.string,\n    hasError: PropTypes.bool,\n    shouldIncludeError: PropTypes.bool,\n    shouldIncludeHint: PropTypes.bool,\n    errorProps: PropTypes.object,\n    hintProps: PropTypes.object,\n};\n\nexport default FFCHints;\n","import PropTypes from 'prop-types';\nimport FFCLabel from './FFCLabel';\nimport FFCHints from './FFCHints';\n\nconst FFCStackedHintTop = (props) => {\n    const { baseCls, hasLabel, shouldRenderHints, children, ...rest } = props;\n\n    return (\n        <>\n            {hasLabel && <FFCLabel {...rest} baseCls={baseCls} />}\n            {shouldRenderHints && <FFCHints {...rest} baseCls={baseCls} />}\n            {children}\n        </>\n    );\n};\n\nFFCStackedHintTop.propTypes = {\n    baseCls: PropTypes.string,\n    hasLabel: PropTypes.bool,\n    shouldRenderHints: PropTypes.bool,\n};\n\nexport default FFCStackedHintTop;\n","/* eslint-disable import/prefer-default-export */\nimport FFCInlineLeft from '../components/form-field-composer/FFCInlineLeft';\nimport FFCInlineRight from '../components/form-field-composer/FFCInlineRight';\nimport FFCStacked from '../components/form-field-composer/FFCStacked';\nimport FFCStackedHintTop from '../components/FFCStackedHintTop';\n\n// Constants\nimport VARIANTS from '../const/formFieldComposerVariantsConst';\n\nconst { INLINE_LEFT, INLINE_RIGHT, STACKED, STACKED_HINT_TOP } = VARIANTS;\n\nexport const getFFCRenderer = (props) => {\n    const { variant } = props ?? {};\n\n    switch (variant) {\n        case INLINE_LEFT:\n            return FFCInlineLeft;\n        case INLINE_RIGHT:\n            return FFCInlineRight;\n        case STACKED_HINT_TOP:\n            return FFCStackedHintTop;\n        case STACKED:\n        default:\n            return FFCStacked;\n    }\n};\n","import PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Utils\nimport {\n    getFFCCompExtantProps,\n    getFFCHasHint,\n    getHasError,\n    getHasLabel,\n    getFormFieldComposerModCls,\n    getShouldRenderHints,\n} from './utils/formFieldComposerUtils';\nimport { getFFCRenderer } from './utils/formFieldComposerRendererUtil';\n\n// Constants\nimport VARIANTS from './const/formFieldComposerVariantsConst';\n\n// Styles\nimport './styles/form-field-composer.scss';\n\nconst { STACKED } = VARIANTS;\n\n// TODO: Need to remove need for variants\nconst withFormField = (Comp) => {\n    const Wrapper = (props) => {\n        const { contextCls, id, ...rest } = props;\n        const baseCls = 'bankai-form-field-composer';\n        const fallbackId = `bankai-ffc-${uuidv4()}`;\n        const modCls = getFormFieldComposerModCls(props, baseCls);\n        const CompWrapper = getFFCRenderer(props);\n        const compId = id || fallbackId;\n        const hasHint = getFFCHasHint(props);\n        const hasError = getHasError(props);\n        const hasLabel = getHasLabel(props);\n        const errorId = `${compId}-error`;\n        const hintId = `${compId}-hint`;\n        const shouldRenderHints = getShouldRenderHints(props);\n        const compProps = getFFCCompExtantProps({\n            ...props,\n            hasError,\n            errorId,\n            hintId,\n            id: compId,\n        });\n\n        return (\n            <div className={cx(baseCls, modCls, contextCls)}>\n                <div className={`${baseCls}__inner`}>\n                    <CompWrapper\n                        {...rest}\n                        baseCls={baseCls}\n                        id={compId}\n                        shouldRenderHints={shouldRenderHints}\n                        errorId={errorId}\n                        hintId={hintId}\n                        hasHint={hasHint}\n                        hasError={hasError}\n                        hasLabel={hasLabel}\n                    >\n                        <div className={`${baseCls}__control-container`}>\n                            <Comp {...compProps} />\n                        </div>\n                    </CompWrapper>\n                </div>\n            </div>\n        );\n    };\n\n    Wrapper.defaultProps = {\n        rwSuffix: '_input',\n        variant: STACKED,\n        hasError: false,\n        isDisabled: false,\n        isReadOnly: false,\n        shouldIncludeError: true,\n        shouldIncludeHint: true,\n    };\n\n    Wrapper.propTypes = {\n        contextCls: PropTypes.string,\n        id: PropTypes.string,\n        rwSuffix: PropTypes.string,\n        variant: PropTypes.string,\n        hasError: PropTypes.bool,\n        isDisabled: PropTypes.bool,\n        isReadOnly: PropTypes.bool,\n        shouldIncludeError: PropTypes.bool,\n        shouldIncludeHint: PropTypes.bool,\n        errorProps: PropTypes.object,\n        hintProps: PropTypes.object,\n        labelProps: PropTypes.object,\n        labelSubtextProps: PropTypes.object,\n    };\n\n    return Wrapper;\n};\n\nconst FormFieldComposer = withFormField;\n\nexport default FormFieldComposer;\n"],"names":["FFCControlHintContainer","props","baseCls","children","PropTypes","FFCControlHintContainer$1","FFCInlineLeft","hasLabel","shouldRenderHints","rest","jsxs","Fragment","jsx","FFCLabel","FFCHints","FFCInlineLeft$1","FFCInlineRight","FFCInlineRight$1","FFCStacked","FFCStacked$1","labelProps","getFFCLabelExtantProps","FormLabel","FFCLabel$1","errorId","shouldIncludeError","shouldIncludeHint","errorProps","hintProps","isDisplayingHint","getFFCHasHint","getHasError","hintBaseCls","modCls","hintChildren","hintPropsRest","errorChildren","inlineHintProps","cx","InlineFormError","InlineFormHint","FFCHints$1","FFCStackedHintTop","FFCStackedHintTop$1","INLINE_LEFT","INLINE_RIGHT","STACKED","STACKED_HINT_TOP","VARIANTS","getFFCRenderer","variant","withFormField","Comp","Wrapper","contextCls","id","fallbackId","uuidv4","getFormFieldComposerModCls","CompWrapper","compId","hasHint","hasError","getHasLabel","hintId","getShouldRenderHints","compProps","getFFCCompExtantProps","FormFieldComposer","BankaiFormFieldComposer"],"mappings":"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"}