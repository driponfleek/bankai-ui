// ========================================================
// Dependencies
// ========================================================
@import '@driponfleek/bankai-lib-style-utils/src/styles/mixins/animations.scss';
@import '@driponfleek/bankai-lib-style-utils/src/styles/mixins/layout.scss';
@import '@driponfleek/bankai-lib-style-utils/src/styles/mixins/resets.scss';
@import '@driponfleek/bankai-lib-style-utils/src/styles/utils/unit-conversion-utils.scss';
@import '@driponfleek/bankai-lib-theme-utils/src/styles/mixins/states.scss';
@import '@driponfleek/bankai-lib-theme-utils/src/styles/utils/theme-utils.scss';
@import '@driponfleek/bankai-lib-theme-utils/src/styles/vars/core-spacing-vars.scss';
@import './mixins.scss';

.bankai-button, %bankai-button {
    @include bankai-button-reset;
    @include bankai-focus-state-halo;
    color: inherit;
    background-color: var(--bankai-semantic-color-canvas, bankai-get-light-theme-map-value('semantic-color-canvas'));
    box-sizing: border-box;
    border: var(--bankai-btn-border-width, bankai-get-light-theme-map-value('btn-border-width')) solid transparent;
    // TODO: Should this be on the default button?
    // Dev's will always have to override it if creating a variant with no radius.
    // border-radius: var(--bankai-btn-border-radius, bankai-get-light-theme-map-value('btn-border-radius'));
    font-weight: var(--bankai-btn-font-weight, bankai-get-light-theme-map-value('btn-font-weight'));
    // Necessary to enforce proper line height. Without this the CSS reset will set it to 1.15
    line-height: inherit;
    $this: '.bankai-button';

    &:not(&--disabled) {
        @include bankai-hover-state;
    }

    &__content-container {
        display: inline-block;
        padding: #{bankai-to-rem($bankai-core-spacing-01-x)} #{bankai-to-rem($bankai-core-spacing-02-x)};
    }

    &__text {
        display: inline-block;
        line-height: var(--bankai-semantic-typography-line-height, bankai-get-light-theme-map-value('semantic-typography-line-height'));
        vertical-align: middle;
    }

    &__text-container {
        display: inline-block;
    }

    &__text-container,
    &__icon-container {
        box-sizing: border-box;
        user-select: none;
        padding: #{bankai-to-rem($bankai-core-spacing-01-x)};
    }

    &__icon-container-safe-space {
        display: inline-block;
        box-sizing: border-box;
    }

    &__icon-container-inner {
        line-height: 1;
        display: inline-block;
        font-size: 1.125em;

        .bankai-icon {
            vertical-align: middle;
            margin: auto;
        }
    }

    &--disabled {
        @include bankai-faux-disabled-state;
    }

    &--primary {
        color: var(--bankai-btn-primary-text-color, bankai-get-light-theme-map-value('btn-primary-text-color'));
        background-color: var(--bankai-btn-primary-bg-color, bankai-get-light-theme-map-value('btn-primary-bg-color'));
        border-color: var(--bankai-btn-primary-border-color, bankai-get-light-theme-map-value('btn-primary-border-color'));

        // &:focus-visible {
        //     @include bankai-button-primary-focus-visible;
        // }

        &:not(#{$this}--disabled):active {
            @include bankai-button-primary-active;
        }

        @media (hover: hover) {
            &:not(#{$this}--disabled):hover {
                @include bankai-button-primary-hover;
            }
        }
    }

    &--secondary {
        color: var(--bankai-btn-secondary-text-color, bankai-get-light-theme-map-value('btn-secondary-text-color'));
        background-color: var(--bankai-btn-secondary-bg-color, bankai-get-light-theme-map-value('btn-secondary-bg-color'));
        border-color: var(--bankai-btn-secondary-border-color, bankai-get-light-theme-map-value('btn-secondary-border-color'));

        // &:focus-visible {
        //     @include bankai-button-secondary-focus-visible;
        // }

        &:not(#{$this}--disabled):active {
            @include bankai-button-secondary-active;
        }

        @media (hover: hover) {
            &:not(#{$this}--disabled):hover {
                @include bankai-button-secondary-hover;
            }
        }
    }

    &--primary-destructive {
        color: var(--bankai-btn-primary-destructive-text-color, bankai-get-light-theme-map-value('btn-primary-destructive-text-color'));
        background-color: var(--bankai-btn-primary-destructive-bg-color, bankai-get-light-theme-map-value('btn-primary-destructive-bg-color'));
        border-color: var(--bankai-btn-primary-destructive-border-color, bankai-get-light-theme-map-value('btn-primary-destructive-border-color'));

        // &:focus-visible {
        //     @include bankai-button-destructive-focus-visible;
        // }

        &:not(#{$this}--disabled):active {
            @include bankai-button-primary-destructive-active;
        }

        @media (hover: hover) {
            &:not(#{$this}--disabled):hover {
                @include bankai-button-primary-destructive-hover;
            }
        }
    }

    &--secondary-destructive {
        color: var(--bankai-btn-secondary-destructive-text-color, bankai-get-light-theme-map-value('btn-secondary-destructive-text-color'));
        background-color: var(--bankai-btn-secondary-destructive-bg-color, bankai-get-light-theme-map-value('btn-secondary-destructive-bg-color'));
        border-color: var(--bankai-btn-secondary-destructive-border-color, bankai-get-light-theme-map-value('btn-secondary-destructive-border-color'));

        // &:focus-visible {
        //     @include bankai-button-destructive-focus-visible;
        // }

        &:not(#{$this}--disabled):active {
            @include bankai-button-secondary-destructive-active;
        }

        @media (hover: hover) {
            &:not(#{$this}--disabled):hover {
                @include bankai-button-secondary-destructive-hover;
            }
        }
    }

    // stylelint-disable no-descending-specificity
    &--primary,
    &--secondary,
    &--destructive,
    &--primary-destructive,
    &--secondary-destructive {
        border-radius: var(--bankai-btn-border-radius, bankai-get-light-theme-map-value('btn-border-radius'));

        &:not(#{$this}--disabled):active {
            @include bankai-button-active;
        }
    }

    &--busy {
        .bankai-icon-spinner {
            @include bankai-rotate-infinite;
        }

        .bankai-icon-spinner::before {
            transform: translate3d(0.1px, -0.2px, 0);
        }
    }
}
